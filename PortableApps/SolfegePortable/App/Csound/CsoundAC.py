# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CsoundAC', [dirname(__file__)])
        except ImportError:
            import _CsoundAC
            return _CsoundAC
        if fp is not None:
            try:
                _mod = imp.load_module('_CsoundAC', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CsoundAC = swig_import_helper()
    del swig_import_helper
else:
    import _CsoundAC
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CsoundAC.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _CsoundAC.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _CsoundAC.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _CsoundAC.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _CsoundAC.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _CsoundAC.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _CsoundAC.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _CsoundAC.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _CsoundAC.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _CsoundAC.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _CsoundAC.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _CsoundAC.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _CsoundAC.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _CsoundAC.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _CsoundAC.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _CsoundAC.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _CsoundAC.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _CsoundAC.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(DoubleVector self) -> SwigPyIterator"""
        return _CsoundAC.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(DoubleVector self) -> bool"""
        return _CsoundAC.DoubleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(DoubleVector self) -> bool"""
        return _CsoundAC.DoubleVector___bool__(self)

    def __len__(self):
        """__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _CsoundAC.DoubleVector___len__(self)

    def pop(self):
        """pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _CsoundAC.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _CsoundAC.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            DoubleVector v=std::vector< double,std::allocator< double > >())
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _CsoundAC.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _CsoundAC.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _CsoundAC.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _CsoundAC.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _CsoundAC.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _CsoundAC.DoubleVector_append(self, *args)

    def empty(self):
        """empty(DoubleVector self) -> bool"""
        return _CsoundAC.DoubleVector_empty(self)

    def size(self):
        """size(DoubleVector self) -> std::vector< double >::size_type"""
        return _CsoundAC.DoubleVector_size(self)

    def clear(self):
        """clear(DoubleVector self)"""
        return _CsoundAC.DoubleVector_clear(self)

    def swap(self, *args):
        """swap(DoubleVector self, DoubleVector v)"""
        return _CsoundAC.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _CsoundAC.DoubleVector_get_allocator(self)

    def begin(self):
        """begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _CsoundAC.DoubleVector_begin(self)

    def end(self):
        """end(DoubleVector self) -> std::vector< double >::iterator"""
        return _CsoundAC.DoubleVector_end(self)

    def rbegin(self):
        """rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _CsoundAC.DoubleVector_rbegin(self)

    def rend(self):
        """rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _CsoundAC.DoubleVector_rend(self)

    def pop_back(self):
        """pop_back(DoubleVector self)"""
        return _CsoundAC.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _CsoundAC.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        this = _CsoundAC.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _CsoundAC.DoubleVector_push_back(self, *args)

    def front(self):
        """front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _CsoundAC.DoubleVector_front(self)

    def back(self):
        """back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _CsoundAC.DoubleVector_back(self)

    def assign(self, *args):
        """assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _CsoundAC.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _CsoundAC.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _CsoundAC.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _CsoundAC.DoubleVector_reserve(self, *args)

    def capacity(self):
        """capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _CsoundAC.DoubleVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _CsoundAC.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class Conversions(_object):
    """Proxy of C++ csound::Conversions class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conversions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Conversions, name)
    __repr__ = _swig_repr
    def getPI():
        """getPI() -> double"""
        return _CsoundAC.Conversions_getPI()

    if _newclass:getPI = staticmethod(getPI)
    __swig_getmethods__["getPI"] = lambda x: getPI
    def get2PI():
        """get2PI() -> double"""
        return _CsoundAC.Conversions_get2PI()

    if _newclass:get2PI = staticmethod(get2PI)
    __swig_getmethods__["get2PI"] = lambda x: get2PI
    def getMiddleCHz():
        """getMiddleCHz() -> double"""
        return _CsoundAC.Conversions_getMiddleCHz()

    if _newclass:getMiddleCHz = staticmethod(getMiddleCHz)
    __swig_getmethods__["getMiddleCHz"] = lambda x: getMiddleCHz
    def getNORM_7():
        """getNORM_7() -> double"""
        return _CsoundAC.Conversions_getNORM_7()

    if _newclass:getNORM_7 = staticmethod(getNORM_7)
    __swig_getmethods__["getNORM_7"] = lambda x: getNORM_7
    def initialize():
        """initialize() -> bool"""
        return _CsoundAC.Conversions_initialize()

    if _newclass:initialize = staticmethod(initialize)
    __swig_getmethods__["initialize"] = lambda x: initialize
    def getSampleSize():
        """getSampleSize() -> int"""
        return _CsoundAC.Conversions_getSampleSize()

    if _newclass:getSampleSize = staticmethod(getSampleSize)
    __swig_getmethods__["getSampleSize"] = lambda x: getSampleSize
    def getMaximumAmplitude(*args):
        """getMaximumAmplitude(int size) -> double"""
        return _CsoundAC.Conversions_getMaximumAmplitude(*args)

    if _newclass:getMaximumAmplitude = staticmethod(getMaximumAmplitude)
    __swig_getmethods__["getMaximumAmplitude"] = lambda x: getMaximumAmplitude
    def getMaximumDynamicRange():
        """getMaximumDynamicRange() -> double"""
        return _CsoundAC.Conversions_getMaximumDynamicRange()

    if _newclass:getMaximumDynamicRange = staticmethod(getMaximumDynamicRange)
    __swig_getmethods__["getMaximumDynamicRange"] = lambda x: getMaximumDynamicRange
    def amplitudeToDecibels(*args):
        """amplitudeToDecibels(double amplitude) -> double"""
        return _CsoundAC.Conversions_amplitudeToDecibels(*args)

    if _newclass:amplitudeToDecibels = staticmethod(amplitudeToDecibels)
    __swig_getmethods__["amplitudeToDecibels"] = lambda x: amplitudeToDecibels
    def amplitudeToGain(*args):
        """amplitudeToGain(double Amplitude) -> double"""
        return _CsoundAC.Conversions_amplitudeToGain(*args)

    if _newclass:amplitudeToGain = staticmethod(amplitudeToGain)
    __swig_getmethods__["amplitudeToGain"] = lambda x: amplitudeToGain
    def decibelsToAmplitude(*args):
        """decibelsToAmplitude(double decibels) -> double"""
        return _CsoundAC.Conversions_decibelsToAmplitude(*args)

    if _newclass:decibelsToAmplitude = staticmethod(decibelsToAmplitude)
    __swig_getmethods__["decibelsToAmplitude"] = lambda x: decibelsToAmplitude
    def decibelsToMidi(*args):
        """decibelsToMidi(double decibels) -> double"""
        return _CsoundAC.Conversions_decibelsToMidi(*args)

    if _newclass:decibelsToMidi = staticmethod(decibelsToMidi)
    __swig_getmethods__["decibelsToMidi"] = lambda x: decibelsToMidi
    def gainToAmplitude(*args):
        """gainToAmplitude(double Gain) -> double"""
        return _CsoundAC.Conversions_gainToAmplitude(*args)

    if _newclass:gainToAmplitude = staticmethod(gainToAmplitude)
    __swig_getmethods__["gainToAmplitude"] = lambda x: gainToAmplitude
    def midiToDecibels(*args):
        """midiToDecibels(double Midi) -> double"""
        return _CsoundAC.Conversions_midiToDecibels(*args)

    if _newclass:midiToDecibels = staticmethod(midiToDecibels)
    __swig_getmethods__["midiToDecibels"] = lambda x: midiToDecibels
    def midiToAmplitude(*args):
        """midiToAmplitude(double Midi) -> double"""
        return _CsoundAC.Conversions_midiToAmplitude(*args)

    if _newclass:midiToAmplitude = staticmethod(midiToAmplitude)
    __swig_getmethods__["midiToAmplitude"] = lambda x: midiToAmplitude
    def amplitudeToMidi(*args):
        """amplitudeToMidi(double Amplitude) -> double"""
        return _CsoundAC.Conversions_amplitudeToMidi(*args)

    if _newclass:amplitudeToMidi = staticmethod(amplitudeToMidi)
    __swig_getmethods__["amplitudeToMidi"] = lambda x: amplitudeToMidi
    def midiToGain(*args):
        """midiToGain(double Midi) -> double"""
        return _CsoundAC.Conversions_midiToGain(*args)

    if _newclass:midiToGain = staticmethod(midiToGain)
    __swig_getmethods__["midiToGain"] = lambda x: midiToGain
    def leftPan(*args):
        """leftPan(double x) -> double"""
        return _CsoundAC.Conversions_leftPan(*args)

    if _newclass:leftPan = staticmethod(leftPan)
    __swig_getmethods__["leftPan"] = lambda x: leftPan
    def round(*args):
        """round(double value) -> double"""
        return _CsoundAC.Conversions_round(*args)

    if _newclass:round = staticmethod(round)
    __swig_getmethods__["round"] = lambda x: round
    def temper(*args):
        """temper(double octave, double tonesPerOctave) -> double"""
        return _CsoundAC.Conversions_temper(*args)

    if _newclass:temper = staticmethod(temper)
    __swig_getmethods__["temper"] = lambda x: temper
    def phaseToTableLengths(*args):
        """phaseToTableLengths(double Phase, double TableSampleCount) -> double"""
        return _CsoundAC.Conversions_phaseToTableLengths(*args)

    if _newclass:phaseToTableLengths = staticmethod(phaseToTableLengths)
    __swig_getmethods__["phaseToTableLengths"] = lambda x: phaseToTableLengths
    def hzToMidi(*args):
        """hzToMidi(double Hz, bool rounded) -> double"""
        return _CsoundAC.Conversions_hzToMidi(*args)

    if _newclass:hzToMidi = staticmethod(hzToMidi)
    __swig_getmethods__["hzToMidi"] = lambda x: hzToMidi
    def hzToOctave(*args):
        """hzToOctave(double Hz) -> double"""
        return _CsoundAC.Conversions_hzToOctave(*args)

    if _newclass:hzToOctave = staticmethod(hzToOctave)
    __swig_getmethods__["hzToOctave"] = lambda x: hzToOctave
    def hzToSamplingIncrement(*args):
        """hzToSamplingIncrement(double Hz, double SR, double SamplesPerCycle) -> double"""
        return _CsoundAC.Conversions_hzToSamplingIncrement(*args)

    if _newclass:hzToSamplingIncrement = staticmethod(hzToSamplingIncrement)
    __swig_getmethods__["hzToSamplingIncrement"] = lambda x: hzToSamplingIncrement
    def midiToHz(*args):
        """midiToHz(double Midi) -> double"""
        return _CsoundAC.Conversions_midiToHz(*args)

    if _newclass:midiToHz = staticmethod(midiToHz)
    __swig_getmethods__["midiToHz"] = lambda x: midiToHz
    def midiToOctave(*args):
        """midiToOctave(double Midi) -> double"""
        return _CsoundAC.Conversions_midiToOctave(*args)

    if _newclass:midiToOctave = staticmethod(midiToOctave)
    __swig_getmethods__["midiToOctave"] = lambda x: midiToOctave
    def midiToSamplingIncrement(*args):
        """midiToSamplingIncrement(double Midi, double SR, double SamplesPerCycle) -> double"""
        return _CsoundAC.Conversions_midiToSamplingIncrement(*args)

    if _newclass:midiToSamplingIncrement = staticmethod(midiToSamplingIncrement)
    __swig_getmethods__["midiToSamplingIncrement"] = lambda x: midiToSamplingIncrement
    def octaveToHz(*args):
        """octaveToHz(double Octave) -> double"""
        return _CsoundAC.Conversions_octaveToHz(*args)

    if _newclass:octaveToHz = staticmethod(octaveToHz)
    __swig_getmethods__["octaveToHz"] = lambda x: octaveToHz
    def octaveToMidi(*args):
        """octaveToMidi(double Octave, bool rounded) -> double"""
        return _CsoundAC.Conversions_octaveToMidi(*args)

    if _newclass:octaveToMidi = staticmethod(octaveToMidi)
    __swig_getmethods__["octaveToMidi"] = lambda x: octaveToMidi
    def octaveToSamplingIncrement(*args):
        """octaveToSamplingIncrement(double Octave, double SR, double SamplesPerCycle) -> double"""
        return _CsoundAC.Conversions_octaveToSamplingIncrement(*args)

    if _newclass:octaveToSamplingIncrement = staticmethod(octaveToSamplingIncrement)
    __swig_getmethods__["octaveToSamplingIncrement"] = lambda x: octaveToSamplingIncrement
    def rightPan(*args):
        """rightPan(double x) -> double"""
        return _CsoundAC.Conversions_rightPan(*args)

    if _newclass:rightPan = staticmethod(rightPan)
    __swig_getmethods__["rightPan"] = lambda x: rightPan
    def swapInt(*args):
        """swapInt(int Source) -> int"""
        return _CsoundAC.Conversions_swapInt(*args)

    if _newclass:swapInt = staticmethod(swapInt)
    __swig_getmethods__["swapInt"] = lambda x: swapInt
    def swapShort(*args):
        """swapShort(short Source) -> short"""
        return _CsoundAC.Conversions_swapShort(*args)

    if _newclass:swapShort = staticmethod(swapShort)
    __swig_getmethods__["swapShort"] = lambda x: swapShort
    def stringToBool(*args):
        """
        stringToBool(std::string value, bool default_=False) -> bool
        stringToBool(std::string value) -> bool
        """
        return _CsoundAC.Conversions_stringToBool(*args)

    if _newclass:stringToBool = staticmethod(stringToBool)
    __swig_getmethods__["stringToBool"] = lambda x: stringToBool
    def boolToString(*args):
        """boolToString(bool value) -> std::string"""
        return _CsoundAC.Conversions_boolToString(*args)

    if _newclass:boolToString = staticmethod(boolToString)
    __swig_getmethods__["boolToString"] = lambda x: boolToString
    def stringToInt(*args):
        """
        stringToInt(std::string value, int default_=0) -> int
        stringToInt(std::string value) -> int
        """
        return _CsoundAC.Conversions_stringToInt(*args)

    if _newclass:stringToInt = staticmethod(stringToInt)
    __swig_getmethods__["stringToInt"] = lambda x: stringToInt
    def intToString(*args):
        """intToString(int value) -> std::string"""
        return _CsoundAC.Conversions_intToString(*args)

    if _newclass:intToString = staticmethod(intToString)
    __swig_getmethods__["intToString"] = lambda x: intToString
    def stringToDouble(*args):
        """
        stringToDouble(std::string value, double default_=0.0) -> double
        stringToDouble(std::string value) -> double
        """
        return _CsoundAC.Conversions_stringToDouble(*args)

    if _newclass:stringToDouble = staticmethod(stringToDouble)
    __swig_getmethods__["stringToDouble"] = lambda x: stringToDouble
    def doubleToString(*args):
        """doubleToString(double value) -> std::string"""
        return _CsoundAC.Conversions_doubleToString(*args)

    if _newclass:doubleToString = staticmethod(doubleToString)
    __swig_getmethods__["doubleToString"] = lambda x: doubleToString
    def stringToVector(*args):
        """stringToVector(std::string const & text, DoubleVector vector)"""
        return _CsoundAC.Conversions_stringToVector(*args)

    if _newclass:stringToVector = staticmethod(stringToVector)
    __swig_getmethods__["stringToVector"] = lambda x: stringToVector
    def midiToPitchClass(*args):
        """midiToPitchClass(double midiKey) -> double"""
        return _CsoundAC.Conversions_midiToPitchClass(*args)

    if _newclass:midiToPitchClass = staticmethod(midiToPitchClass)
    __swig_getmethods__["midiToPitchClass"] = lambda x: midiToPitchClass
    def pitchClassSetToMidi(*args):
        """pitchClassSetToMidi(double pitchClassSet) -> double"""
        return _CsoundAC.Conversions_pitchClassSetToMidi(*args)

    if _newclass:pitchClassSetToMidi = staticmethod(pitchClassSetToMidi)
    __swig_getmethods__["pitchClassSetToMidi"] = lambda x: pitchClassSetToMidi
    def midiToPitchClassSet(*args):
        """midiToPitchClassSet(double midiKey) -> double"""
        return _CsoundAC.Conversions_midiToPitchClassSet(*args)

    if _newclass:midiToPitchClassSet = staticmethod(midiToPitchClassSet)
    __swig_getmethods__["midiToPitchClassSet"] = lambda x: midiToPitchClassSet
    def pitchClassToMidi(*args):
        """pitchClassToMidi(double pitchClass) -> double"""
        return _CsoundAC.Conversions_pitchClassToMidi(*args)

    if _newclass:pitchClassToMidi = staticmethod(pitchClassToMidi)
    __swig_getmethods__["pitchClassToMidi"] = lambda x: pitchClassToMidi
    def findClosestPitchClass(*args):
        """
        findClosestPitchClass(double M, double pitchClass, double tones=12.0) -> double
        findClosestPitchClass(double M, double pitchClass) -> double
        """
        return _CsoundAC.Conversions_findClosestPitchClass(*args)

    if _newclass:findClosestPitchClass = staticmethod(findClosestPitchClass)
    __swig_getmethods__["findClosestPitchClass"] = lambda x: findClosestPitchClass
    def midiToRoundedOctave(*args):
        """midiToRoundedOctave(double midiKey) -> double"""
        return _CsoundAC.Conversions_midiToRoundedOctave(*args)

    if _newclass:midiToRoundedOctave = staticmethod(midiToRoundedOctave)
    __swig_getmethods__["midiToRoundedOctave"] = lambda x: midiToRoundedOctave
    def trim(*args):
        """trim(std::string & value) -> std::string &"""
        return _CsoundAC.Conversions_trim(*args)

    if _newclass:trim = staticmethod(trim)
    __swig_getmethods__["trim"] = lambda x: trim
    def trimQuotes(*args):
        """trimQuotes(std::string & value) -> std::string &"""
        return _CsoundAC.Conversions_trimQuotes(*args)

    if _newclass:trimQuotes = staticmethod(trimQuotes)
    __swig_getmethods__["trimQuotes"] = lambda x: trimQuotes
    def modulus(*args):
        """modulus(double a, double b) -> double"""
        return _CsoundAC.Conversions_modulus(*args)

    if _newclass:modulus = staticmethod(modulus)
    __swig_getmethods__["modulus"] = lambda x: modulus
    def nameToPitches(*args):
        """nameToPitches(std::string name) -> DoubleVector"""
        return _CsoundAC.Conversions_nameToPitches(*args)

    if _newclass:nameToPitches = staticmethod(nameToPitches)
    __swig_getmethods__["nameToPitches"] = lambda x: nameToPitches
    def nameToM(*args):
        """nameToM(std::string name) -> double"""
        return _CsoundAC.Conversions_nameToM(*args)

    if _newclass:nameToM = staticmethod(nameToM)
    __swig_getmethods__["nameToM"] = lambda x: nameToM
    def mToName(*args):
        """mToName(double pitchClassSet) -> std::string"""
        return _CsoundAC.Conversions_mToName(*args)

    if _newclass:mToName = staticmethod(mToName)
    __swig_getmethods__["mToName"] = lambda x: mToName
    def dupstr(*args):
        """dupstr(char const * string) -> char *"""
        return _CsoundAC.Conversions_dupstr(*args)

    if _newclass:dupstr = staticmethod(dupstr)
    __swig_getmethods__["dupstr"] = lambda x: dupstr
    def gainToDb(*args):
        """
        gainToDb(double inputDb, double gain, bool odbfs=False) -> double
        gainToDb(double inputDb, double gain) -> double
        """
        return _CsoundAC.Conversions_gainToDb(*args)

    if _newclass:gainToDb = staticmethod(gainToDb)
    __swig_getmethods__["gainToDb"] = lambda x: gainToDb
    def EPSILON():
        """EPSILON() -> double"""
        return _CsoundAC.Conversions_EPSILON()

    if _newclass:EPSILON = staticmethod(EPSILON)
    __swig_getmethods__["EPSILON"] = lambda x: EPSILON
    def epsilonFactor():
        """epsilonFactor() -> double &"""
        return _CsoundAC.Conversions_epsilonFactor()

    if _newclass:epsilonFactor = staticmethod(epsilonFactor)
    __swig_getmethods__["epsilonFactor"] = lambda x: epsilonFactor
    def eq_epsilon(*args):
        """eq_epsilon(double a, double b) -> bool"""
        return _CsoundAC.Conversions_eq_epsilon(*args)

    if _newclass:eq_epsilon = staticmethod(eq_epsilon)
    __swig_getmethods__["eq_epsilon"] = lambda x: eq_epsilon
    def gt_epsilon(*args):
        """gt_epsilon(double a, double b) -> bool"""
        return _CsoundAC.Conversions_gt_epsilon(*args)

    if _newclass:gt_epsilon = staticmethod(gt_epsilon)
    __swig_getmethods__["gt_epsilon"] = lambda x: gt_epsilon
    def lt_epsilon(*args):
        """lt_epsilon(double a, double b) -> bool"""
        return _CsoundAC.Conversions_lt_epsilon(*args)

    if _newclass:lt_epsilon = staticmethod(lt_epsilon)
    __swig_getmethods__["lt_epsilon"] = lambda x: lt_epsilon
    def ge_epsilon(*args):
        """ge_epsilon(double a, double b) -> bool"""
        return _CsoundAC.Conversions_ge_epsilon(*args)

    if _newclass:ge_epsilon = staticmethod(ge_epsilon)
    __swig_getmethods__["ge_epsilon"] = lambda x: ge_epsilon
    def le_epsilon(*args):
        """le_epsilon(double a, double b) -> bool"""
        return _CsoundAC.Conversions_le_epsilon(*args)

    if _newclass:le_epsilon = staticmethod(le_epsilon)
    __swig_getmethods__["le_epsilon"] = lambda x: le_epsilon
    def __init__(self): 
        """__init__(csound::Conversions self) -> Conversions"""
        this = _CsoundAC.new_Conversions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Conversions
    __del__ = lambda self : None;
Conversions_swigregister = _CsoundAC.Conversions_swigregister
Conversions_swigregister(Conversions)

def Conversions_getPI():
  """Conversions_getPI() -> double"""
  return _CsoundAC.Conversions_getPI()

def Conversions_get2PI():
  """Conversions_get2PI() -> double"""
  return _CsoundAC.Conversions_get2PI()

def Conversions_getMiddleCHz():
  """Conversions_getMiddleCHz() -> double"""
  return _CsoundAC.Conversions_getMiddleCHz()

def Conversions_getNORM_7():
  """Conversions_getNORM_7() -> double"""
  return _CsoundAC.Conversions_getNORM_7()

def Conversions_initialize():
  """Conversions_initialize() -> bool"""
  return _CsoundAC.Conversions_initialize()

def Conversions_getSampleSize():
  """Conversions_getSampleSize() -> int"""
  return _CsoundAC.Conversions_getSampleSize()

def Conversions_getMaximumAmplitude(*args):
  """Conversions_getMaximumAmplitude(int size) -> double"""
  return _CsoundAC.Conversions_getMaximumAmplitude(*args)

def Conversions_getMaximumDynamicRange():
  """Conversions_getMaximumDynamicRange() -> double"""
  return _CsoundAC.Conversions_getMaximumDynamicRange()

def Conversions_amplitudeToDecibels(*args):
  """Conversions_amplitudeToDecibels(double amplitude) -> double"""
  return _CsoundAC.Conversions_amplitudeToDecibels(*args)

def Conversions_amplitudeToGain(*args):
  """Conversions_amplitudeToGain(double Amplitude) -> double"""
  return _CsoundAC.Conversions_amplitudeToGain(*args)

def Conversions_decibelsToAmplitude(*args):
  """Conversions_decibelsToAmplitude(double decibels) -> double"""
  return _CsoundAC.Conversions_decibelsToAmplitude(*args)

def Conversions_decibelsToMidi(*args):
  """Conversions_decibelsToMidi(double decibels) -> double"""
  return _CsoundAC.Conversions_decibelsToMidi(*args)

def Conversions_gainToAmplitude(*args):
  """Conversions_gainToAmplitude(double Gain) -> double"""
  return _CsoundAC.Conversions_gainToAmplitude(*args)

def Conversions_midiToDecibels(*args):
  """Conversions_midiToDecibels(double Midi) -> double"""
  return _CsoundAC.Conversions_midiToDecibels(*args)

def Conversions_midiToAmplitude(*args):
  """Conversions_midiToAmplitude(double Midi) -> double"""
  return _CsoundAC.Conversions_midiToAmplitude(*args)

def Conversions_amplitudeToMidi(*args):
  """Conversions_amplitudeToMidi(double Amplitude) -> double"""
  return _CsoundAC.Conversions_amplitudeToMidi(*args)

def Conversions_midiToGain(*args):
  """Conversions_midiToGain(double Midi) -> double"""
  return _CsoundAC.Conversions_midiToGain(*args)

def Conversions_leftPan(*args):
  """Conversions_leftPan(double x) -> double"""
  return _CsoundAC.Conversions_leftPan(*args)

def Conversions_round(*args):
  """Conversions_round(double value) -> double"""
  return _CsoundAC.Conversions_round(*args)

def Conversions_temper(*args):
  """Conversions_temper(double octave, double tonesPerOctave) -> double"""
  return _CsoundAC.Conversions_temper(*args)

def Conversions_phaseToTableLengths(*args):
  """Conversions_phaseToTableLengths(double Phase, double TableSampleCount) -> double"""
  return _CsoundAC.Conversions_phaseToTableLengths(*args)

def Conversions_hzToMidi(*args):
  """Conversions_hzToMidi(double Hz, bool rounded) -> double"""
  return _CsoundAC.Conversions_hzToMidi(*args)

def Conversions_hzToOctave(*args):
  """Conversions_hzToOctave(double Hz) -> double"""
  return _CsoundAC.Conversions_hzToOctave(*args)

def Conversions_hzToSamplingIncrement(*args):
  """Conversions_hzToSamplingIncrement(double Hz, double SR, double SamplesPerCycle) -> double"""
  return _CsoundAC.Conversions_hzToSamplingIncrement(*args)

def Conversions_midiToHz(*args):
  """Conversions_midiToHz(double Midi) -> double"""
  return _CsoundAC.Conversions_midiToHz(*args)

def Conversions_midiToOctave(*args):
  """Conversions_midiToOctave(double Midi) -> double"""
  return _CsoundAC.Conversions_midiToOctave(*args)

def Conversions_midiToSamplingIncrement(*args):
  """Conversions_midiToSamplingIncrement(double Midi, double SR, double SamplesPerCycle) -> double"""
  return _CsoundAC.Conversions_midiToSamplingIncrement(*args)

def Conversions_octaveToHz(*args):
  """Conversions_octaveToHz(double Octave) -> double"""
  return _CsoundAC.Conversions_octaveToHz(*args)

def Conversions_octaveToMidi(*args):
  """Conversions_octaveToMidi(double Octave, bool rounded) -> double"""
  return _CsoundAC.Conversions_octaveToMidi(*args)

def Conversions_octaveToSamplingIncrement(*args):
  """Conversions_octaveToSamplingIncrement(double Octave, double SR, double SamplesPerCycle) -> double"""
  return _CsoundAC.Conversions_octaveToSamplingIncrement(*args)

def Conversions_rightPan(*args):
  """Conversions_rightPan(double x) -> double"""
  return _CsoundAC.Conversions_rightPan(*args)

def Conversions_swapInt(*args):
  """Conversions_swapInt(int Source) -> int"""
  return _CsoundAC.Conversions_swapInt(*args)

def Conversions_swapShort(*args):
  """Conversions_swapShort(short Source) -> short"""
  return _CsoundAC.Conversions_swapShort(*args)

def Conversions_stringToBool(*args):
  """
    stringToBool(std::string value, bool default_=False) -> bool
    Conversions_stringToBool(std::string value) -> bool
    """
  return _CsoundAC.Conversions_stringToBool(*args)

def Conversions_boolToString(*args):
  """Conversions_boolToString(bool value) -> std::string"""
  return _CsoundAC.Conversions_boolToString(*args)

def Conversions_stringToInt(*args):
  """
    stringToInt(std::string value, int default_=0) -> int
    Conversions_stringToInt(std::string value) -> int
    """
  return _CsoundAC.Conversions_stringToInt(*args)

def Conversions_intToString(*args):
  """Conversions_intToString(int value) -> std::string"""
  return _CsoundAC.Conversions_intToString(*args)

def Conversions_stringToDouble(*args):
  """
    stringToDouble(std::string value, double default_=0.0) -> double
    Conversions_stringToDouble(std::string value) -> double
    """
  return _CsoundAC.Conversions_stringToDouble(*args)

def Conversions_doubleToString(*args):
  """Conversions_doubleToString(double value) -> std::string"""
  return _CsoundAC.Conversions_doubleToString(*args)

def Conversions_stringToVector(*args):
  """Conversions_stringToVector(std::string const & text, DoubleVector vector)"""
  return _CsoundAC.Conversions_stringToVector(*args)

def Conversions_midiToPitchClass(*args):
  """Conversions_midiToPitchClass(double midiKey) -> double"""
  return _CsoundAC.Conversions_midiToPitchClass(*args)

def Conversions_pitchClassSetToMidi(*args):
  """Conversions_pitchClassSetToMidi(double pitchClassSet) -> double"""
  return _CsoundAC.Conversions_pitchClassSetToMidi(*args)

def Conversions_midiToPitchClassSet(*args):
  """Conversions_midiToPitchClassSet(double midiKey) -> double"""
  return _CsoundAC.Conversions_midiToPitchClassSet(*args)

def Conversions_pitchClassToMidi(*args):
  """Conversions_pitchClassToMidi(double pitchClass) -> double"""
  return _CsoundAC.Conversions_pitchClassToMidi(*args)

def Conversions_findClosestPitchClass(*args):
  """
    findClosestPitchClass(double M, double pitchClass, double tones=12.0) -> double
    Conversions_findClosestPitchClass(double M, double pitchClass) -> double
    """
  return _CsoundAC.Conversions_findClosestPitchClass(*args)

def Conversions_midiToRoundedOctave(*args):
  """Conversions_midiToRoundedOctave(double midiKey) -> double"""
  return _CsoundAC.Conversions_midiToRoundedOctave(*args)

def Conversions_trim(*args):
  """Conversions_trim(std::string & value) -> std::string &"""
  return _CsoundAC.Conversions_trim(*args)

def Conversions_trimQuotes(*args):
  """Conversions_trimQuotes(std::string & value) -> std::string &"""
  return _CsoundAC.Conversions_trimQuotes(*args)

def Conversions_modulus(*args):
  """Conversions_modulus(double a, double b) -> double"""
  return _CsoundAC.Conversions_modulus(*args)

def Conversions_nameToPitches(*args):
  """Conversions_nameToPitches(std::string name) -> DoubleVector"""
  return _CsoundAC.Conversions_nameToPitches(*args)

def Conversions_nameToM(*args):
  """Conversions_nameToM(std::string name) -> double"""
  return _CsoundAC.Conversions_nameToM(*args)

def Conversions_mToName(*args):
  """Conversions_mToName(double pitchClassSet) -> std::string"""
  return _CsoundAC.Conversions_mToName(*args)

def Conversions_dupstr(*args):
  """Conversions_dupstr(char const * string) -> char *"""
  return _CsoundAC.Conversions_dupstr(*args)

def Conversions_gainToDb(*args):
  """
    gainToDb(double inputDb, double gain, bool odbfs=False) -> double
    Conversions_gainToDb(double inputDb, double gain) -> double
    """
  return _CsoundAC.Conversions_gainToDb(*args)

def Conversions_EPSILON():
  """Conversions_EPSILON() -> double"""
  return _CsoundAC.Conversions_EPSILON()

def Conversions_epsilonFactor():
  """Conversions_epsilonFactor() -> double &"""
  return _CsoundAC.Conversions_epsilonFactor()

def Conversions_eq_epsilon(*args):
  """Conversions_eq_epsilon(double a, double b) -> bool"""
  return _CsoundAC.Conversions_eq_epsilon(*args)

def Conversions_gt_epsilon(*args):
  """Conversions_gt_epsilon(double a, double b) -> bool"""
  return _CsoundAC.Conversions_gt_epsilon(*args)

def Conversions_lt_epsilon(*args):
  """Conversions_lt_epsilon(double a, double b) -> bool"""
  return _CsoundAC.Conversions_lt_epsilon(*args)

def Conversions_ge_epsilon(*args):
  """Conversions_ge_epsilon(double a, double b) -> bool"""
  return _CsoundAC.Conversions_ge_epsilon(*args)

def Conversions_le_epsilon(*args):
  """Conversions_le_epsilon(double a, double b) -> bool"""
  return _CsoundAC.Conversions_le_epsilon(*args)

class Logger(_object):
    """Proxy of C++ csound::Logger class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Logger self) -> Logger"""
        this = _CsoundAC.new_Logger()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Logger
    __del__ = lambda self : None;
    def write(self, *args):
        """write(Logger self, char const * text)"""
        return _CsoundAC.Logger_write(self, *args)

Logger_swigregister = _CsoundAC.Logger_swigregister
Logger_swigregister(Logger)

class System(_object):
    """Proxy of C++ csound::System class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr
    ERROR_LEVEL = _CsoundAC.System_ERROR_LEVEL
    WARNING_LEVEL = _CsoundAC.System_WARNING_LEVEL
    INFORMATION_LEVEL = _CsoundAC.System_INFORMATION_LEVEL
    DEBUGGING_LEVEL = _CsoundAC.System_DEBUGGING_LEVEL
    def parsePathname(*args):
        """
        parsePathname(std::string const pathname, std::string & drive, std::string & base, std::string & file, 
            std::string & extension)
        """
        return _CsoundAC.System_parsePathname(*args)

    if _newclass:parsePathname = staticmethod(parsePathname)
    __swig_getmethods__["parsePathname"] = lambda x: parsePathname
    def openLibrary(*args):
        """openLibrary(void ** library, std::string filename) -> int"""
        return _CsoundAC.System_openLibrary(*args)

    if _newclass:openLibrary = staticmethod(openLibrary)
    __swig_getmethods__["openLibrary"] = lambda x: openLibrary
    def getSymbol(*args):
        """getSymbol(void * library, std::string name) -> void *"""
        return _CsoundAC.System_getSymbol(*args)

    if _newclass:getSymbol = staticmethod(getSymbol)
    __swig_getmethods__["getSymbol"] = lambda x: getSymbol
    def closeLibrary(*args):
        """closeLibrary(void * library)"""
        return _CsoundAC.System_closeLibrary(*args)

    if _newclass:closeLibrary = staticmethod(closeLibrary)
    __swig_getmethods__["closeLibrary"] = lambda x: closeLibrary
    def getFilenames(*args):
        """getFilenames(std::string directoryName) -> std::vector< std::string,std::allocator< std::string > >"""
        return _CsoundAC.System_getFilenames(*args)

    if _newclass:getFilenames = staticmethod(getFilenames)
    __swig_getmethods__["getFilenames"] = lambda x: getFilenames
    def getDirectoryNames(*args):
        """getDirectoryNames(std::string directoryName) -> std::vector< std::string,std::allocator< std::string > >"""
        return _CsoundAC.System_getDirectoryNames(*args)

    if _newclass:getDirectoryNames = staticmethod(getDirectoryNames)
    __swig_getmethods__["getDirectoryNames"] = lambda x: getDirectoryNames
    def createThread(*args):
        """createThread(void (*)(void *) threadRoutine, void * data, int priority) -> void *"""
        return _CsoundAC.System_createThread(*args)

    if _newclass:createThread = staticmethod(createThread)
    __swig_getmethods__["createThread"] = lambda x: createThread
    def createThreadLock():
        """createThreadLock() -> void *"""
        return _CsoundAC.System_createThreadLock()

    if _newclass:createThreadLock = staticmethod(createThreadLock)
    __swig_getmethods__["createThreadLock"] = lambda x: createThreadLock
    def waitThreadLock(*args):
        """
        waitThreadLock(void * lock, size_t timeoutMilliseconds=0)
        waitThreadLock(void * lock)
        """
        return _CsoundAC.System_waitThreadLock(*args)

    if _newclass:waitThreadLock = staticmethod(waitThreadLock)
    __swig_getmethods__["waitThreadLock"] = lambda x: waitThreadLock
    def notifyThreadLock(*args):
        """notifyThreadLock(void * lock)"""
        return _CsoundAC.System_notifyThreadLock(*args)

    if _newclass:notifyThreadLock = staticmethod(notifyThreadLock)
    __swig_getmethods__["notifyThreadLock"] = lambda x: notifyThreadLock
    def destroyThreadLock(*args):
        """destroyThreadLock(void * lock)"""
        return _CsoundAC.System_destroyThreadLock(*args)

    if _newclass:destroyThreadLock = staticmethod(destroyThreadLock)
    __swig_getmethods__["destroyThreadLock"] = lambda x: destroyThreadLock
    def setMessageLevel(*args):
        """setMessageLevel(int messageLevel) -> int"""
        return _CsoundAC.System_setMessageLevel(*args)

    if _newclass:setMessageLevel = staticmethod(setMessageLevel)
    __swig_getmethods__["setMessageLevel"] = lambda x: setMessageLevel
    def yieldThread():
        """yieldThread()"""
        return _CsoundAC.System_yieldThread()

    if _newclass:yieldThread = staticmethod(yieldThread)
    __swig_getmethods__["yieldThread"] = lambda x: yieldThread
    def getMessageLevel():
        """getMessageLevel() -> int"""
        return _CsoundAC.System_getMessageLevel()

    if _newclass:getMessageLevel = staticmethod(getMessageLevel)
    __swig_getmethods__["getMessageLevel"] = lambda x: getMessageLevel
    def setUserdata(*args):
        """setUserdata(void * userdata)"""
        return _CsoundAC.System_setUserdata(*args)

    if _newclass:setUserdata = staticmethod(setUserdata)
    __swig_getmethods__["setUserdata"] = lambda x: setUserdata
    def getUserdata():
        """getUserdata() -> void *"""
        return _CsoundAC.System_getUserdata()

    if _newclass:getUserdata = staticmethod(getUserdata)
    __swig_getmethods__["getUserdata"] = lambda x: getUserdata
    def setLogfile(*args):
        """setLogfile(FILE * logfile)"""
        return _CsoundAC.System_setLogfile(*args)

    if _newclass:setLogfile = staticmethod(setLogfile)
    __swig_getmethods__["setLogfile"] = lambda x: setLogfile
    def getLogfile():
        """getLogfile() -> FILE *"""
        return _CsoundAC.System_getLogfile()

    if _newclass:getLogfile = staticmethod(getLogfile)
    __swig_getmethods__["getLogfile"] = lambda x: getLogfile
    def execute(*args):
        """execute(char const * command) -> int"""
        return _CsoundAC.System_execute(*args)

    if _newclass:execute = staticmethod(execute)
    __swig_getmethods__["execute"] = lambda x: execute
    def shellOpen(*args):
        """
        shellOpen(char const * filename, char const * command="open") -> int
        shellOpen(char const * filename) -> int
        """
        return _CsoundAC.System_shellOpen(*args)

    if _newclass:shellOpen = staticmethod(shellOpen)
    __swig_getmethods__["shellOpen"] = lambda x: shellOpen
    def getSharedLibraryExtension():
        """getSharedLibraryExtension() -> std::string"""
        return _CsoundAC.System_getSharedLibraryExtension()

    if _newclass:getSharedLibraryExtension = staticmethod(getSharedLibraryExtension)
    __swig_getmethods__["getSharedLibraryExtension"] = lambda x: getSharedLibraryExtension
    def startTiming():
        """startTiming() -> clock_t"""
        return _CsoundAC.System_startTiming()

    if _newclass:startTiming = staticmethod(startTiming)
    __swig_getmethods__["startTiming"] = lambda x: startTiming
    def stopTiming(*args):
        """stopTiming(clock_t startedAt) -> double"""
        return _CsoundAC.System_stopTiming(*args)

    if _newclass:stopTiming = staticmethod(stopTiming)
    __swig_getmethods__["stopTiming"] = lambda x: stopTiming
    def sleep(*args):
        """sleep(double milliseconds)"""
        return _CsoundAC.System_sleep(*args)

    if _newclass:sleep = staticmethod(sleep)
    __swig_getmethods__["sleep"] = lambda x: sleep
    def beep():
        """beep()"""
        return _CsoundAC.System_beep()

    if _newclass:beep = staticmethod(beep)
    __swig_getmethods__["beep"] = lambda x: beep
    def __init__(self): 
        """__init__(csound::System self) -> System"""
        this = _CsoundAC.new_System()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_System
    __del__ = lambda self : None;
System_swigregister = _CsoundAC.System_swigregister
System_swigregister(System)

def System_parsePathname(*args):
  """
    System_parsePathname(std::string const pathname, std::string & drive, std::string & base, std::string & file, 
        std::string & extension)
    """
  return _CsoundAC.System_parsePathname(*args)

def System_openLibrary(*args):
  """System_openLibrary(void ** library, std::string filename) -> int"""
  return _CsoundAC.System_openLibrary(*args)

def System_getSymbol(*args):
  """System_getSymbol(void * library, std::string name) -> void *"""
  return _CsoundAC.System_getSymbol(*args)

def System_closeLibrary(*args):
  """System_closeLibrary(void * library)"""
  return _CsoundAC.System_closeLibrary(*args)

def System_getFilenames(*args):
  """System_getFilenames(std::string directoryName) -> std::vector< std::string,std::allocator< std::string > >"""
  return _CsoundAC.System_getFilenames(*args)

def System_getDirectoryNames(*args):
  """System_getDirectoryNames(std::string directoryName) -> std::vector< std::string,std::allocator< std::string > >"""
  return _CsoundAC.System_getDirectoryNames(*args)

def System_createThread(*args):
  """System_createThread(void (*)(void *) threadRoutine, void * data, int priority) -> void *"""
  return _CsoundAC.System_createThread(*args)

def System_createThreadLock():
  """System_createThreadLock() -> void *"""
  return _CsoundAC.System_createThreadLock()

def System_waitThreadLock(*args):
  """
    waitThreadLock(void * lock, size_t timeoutMilliseconds=0)
    System_waitThreadLock(void * lock)
    """
  return _CsoundAC.System_waitThreadLock(*args)

def System_notifyThreadLock(*args):
  """System_notifyThreadLock(void * lock)"""
  return _CsoundAC.System_notifyThreadLock(*args)

def System_destroyThreadLock(*args):
  """System_destroyThreadLock(void * lock)"""
  return _CsoundAC.System_destroyThreadLock(*args)

def System_setMessageLevel(*args):
  """System_setMessageLevel(int messageLevel) -> int"""
  return _CsoundAC.System_setMessageLevel(*args)

def System_yieldThread():
  """System_yieldThread()"""
  return _CsoundAC.System_yieldThread()

def System_getMessageLevel():
  """System_getMessageLevel() -> int"""
  return _CsoundAC.System_getMessageLevel()

def System_setUserdata(*args):
  """System_setUserdata(void * userdata)"""
  return _CsoundAC.System_setUserdata(*args)

def System_getUserdata():
  """System_getUserdata() -> void *"""
  return _CsoundAC.System_getUserdata()

def System_setLogfile(*args):
  """System_setLogfile(FILE * logfile)"""
  return _CsoundAC.System_setLogfile(*args)

def System_getLogfile():
  """System_getLogfile() -> FILE *"""
  return _CsoundAC.System_getLogfile()

def System_execute(*args):
  """System_execute(char const * command) -> int"""
  return _CsoundAC.System_execute(*args)

def System_shellOpen(*args):
  """
    shellOpen(char const * filename, char const * command="open") -> int
    System_shellOpen(char const * filename) -> int
    """
  return _CsoundAC.System_shellOpen(*args)

def System_getSharedLibraryExtension():
  """System_getSharedLibraryExtension() -> std::string"""
  return _CsoundAC.System_getSharedLibraryExtension()

def System_startTiming():
  """System_startTiming() -> clock_t"""
  return _CsoundAC.System_startTiming()

def System_stopTiming(*args):
  """System_stopTiming(clock_t startedAt) -> double"""
  return _CsoundAC.System_stopTiming(*args)

def System_sleep(*args):
  """System_sleep(double milliseconds)"""
  return _CsoundAC.System_sleep(*args)

def System_beep():
  """System_beep()"""
  return _CsoundAC.System_beep()

class ThreadLock(_object):
    """Proxy of C++ csound::ThreadLock class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadLock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::ThreadLock self) -> ThreadLock"""
        this = _CsoundAC.new_ThreadLock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_ThreadLock
    __del__ = lambda self : None;
    def open(self):
        """open(ThreadLock self)"""
        return _CsoundAC.ThreadLock_open(self)

    def close(self):
        """close(ThreadLock self)"""
        return _CsoundAC.ThreadLock_close(self)

    def isOpen(self):
        """isOpen(ThreadLock self) -> bool"""
        return _CsoundAC.ThreadLock_isOpen(self)

    def startWait(self, timeoutMilliseconds=0):
        """
        startWait(ThreadLock self, size_t timeoutMilliseconds=0)
        startWait(ThreadLock self)
        """
        return _CsoundAC.ThreadLock_startWait(self, timeoutMilliseconds)

    def endWait(self):
        """endWait(ThreadLock self)"""
        return _CsoundAC.ThreadLock_endWait(self)

ThreadLock_swigregister = _CsoundAC.ThreadLock_swigregister
ThreadLock_swigregister(ThreadLock)

class EventVector(_object):
    """Proxy of C++ std::vector<(csound::Event)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(EventVector self) -> SwigPyIterator"""
        return _CsoundAC.EventVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(EventVector self) -> bool"""
        return _CsoundAC.EventVector___nonzero__(self)

    def __bool__(self):
        """__bool__(EventVector self) -> bool"""
        return _CsoundAC.EventVector___bool__(self)

    def __len__(self):
        """__len__(EventVector self) -> std::vector< csound::Event >::size_type"""
        return _CsoundAC.EventVector___len__(self)

    def pop(self):
        """pop(EventVector self) -> Event"""
        return _CsoundAC.EventVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(EventVector self, std::vector< csound::Event >::difference_type i, std::vector< csound::Event >::difference_type j) -> EventVector"""
        return _CsoundAC.EventVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(EventVector self, std::vector< csound::Event >::difference_type i, std::vector< csound::Event >::difference_type j, 
            EventVector v=std::vector< csound::Event,std::allocator< csound::Event > >())
        __setslice__(EventVector self, std::vector< csound::Event >::difference_type i, std::vector< csound::Event >::difference_type j)
        """
        return _CsoundAC.EventVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(EventVector self, std::vector< csound::Event >::difference_type i, std::vector< csound::Event >::difference_type j)"""
        return _CsoundAC.EventVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(EventVector self, std::vector< csound::Event >::difference_type i)
        __delitem__(EventVector self, PySliceObject * slice)
        """
        return _CsoundAC.EventVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(EventVector self, PySliceObject * slice) -> EventVector
        __getitem__(EventVector self, std::vector< csound::Event >::difference_type i) -> Event
        """
        return _CsoundAC.EventVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(EventVector self, PySliceObject * slice, EventVector v)
        __setitem__(EventVector self, PySliceObject * slice)
        __setitem__(EventVector self, std::vector< csound::Event >::difference_type i, Event x)
        """
        return _CsoundAC.EventVector___setitem__(self, *args)

    def append(self, *args):
        """append(EventVector self, Event x)"""
        return _CsoundAC.EventVector_append(self, *args)

    def empty(self):
        """empty(EventVector self) -> bool"""
        return _CsoundAC.EventVector_empty(self)

    def size(self):
        """size(EventVector self) -> std::vector< csound::Event >::size_type"""
        return _CsoundAC.EventVector_size(self)

    def clear(self):
        """clear(EventVector self)"""
        return _CsoundAC.EventVector_clear(self)

    def swap(self, *args):
        """swap(EventVector self, EventVector v)"""
        return _CsoundAC.EventVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(EventVector self) -> std::vector< csound::Event >::allocator_type"""
        return _CsoundAC.EventVector_get_allocator(self)

    def begin(self):
        """begin(EventVector self) -> std::vector< csound::Event >::iterator"""
        return _CsoundAC.EventVector_begin(self)

    def end(self):
        """end(EventVector self) -> std::vector< csound::Event >::iterator"""
        return _CsoundAC.EventVector_end(self)

    def rbegin(self):
        """rbegin(EventVector self) -> std::vector< csound::Event >::reverse_iterator"""
        return _CsoundAC.EventVector_rbegin(self)

    def rend(self):
        """rend(EventVector self) -> std::vector< csound::Event >::reverse_iterator"""
        return _CsoundAC.EventVector_rend(self)

    def pop_back(self):
        """pop_back(EventVector self)"""
        return _CsoundAC.EventVector_pop_back(self)

    def erase(self, *args):
        """
        erase(EventVector self, std::vector< csound::Event >::iterator pos) -> std::vector< csound::Event >::iterator
        erase(EventVector self, std::vector< csound::Event >::iterator first, std::vector< csound::Event >::iterator last) -> std::vector< csound::Event >::iterator
        """
        return _CsoundAC.EventVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(csound::Event)> self) -> EventVector
        __init__(std::vector<(csound::Event)> self, EventVector arg2) -> EventVector
        __init__(std::vector<(csound::Event)> self, std::vector< csound::Event >::size_type size) -> EventVector
        __init__(std::vector<(csound::Event)> self, std::vector< csound::Event >::size_type size, Event value) -> EventVector
        """
        this = _CsoundAC.new_EventVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(EventVector self, Event x)"""
        return _CsoundAC.EventVector_push_back(self, *args)

    def front(self):
        """front(EventVector self) -> Event"""
        return _CsoundAC.EventVector_front(self)

    def back(self):
        """back(EventVector self) -> Event"""
        return _CsoundAC.EventVector_back(self)

    def assign(self, *args):
        """assign(EventVector self, std::vector< csound::Event >::size_type n, Event x)"""
        return _CsoundAC.EventVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(EventVector self, std::vector< csound::Event >::size_type new_size)
        resize(EventVector self, std::vector< csound::Event >::size_type new_size, Event x)
        """
        return _CsoundAC.EventVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(EventVector self, std::vector< csound::Event >::iterator pos, Event x) -> std::vector< csound::Event >::iterator
        insert(EventVector self, std::vector< csound::Event >::iterator pos, std::vector< csound::Event >::size_type n, 
            Event x)
        """
        return _CsoundAC.EventVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(EventVector self, std::vector< csound::Event >::size_type n)"""
        return _CsoundAC.EventVector_reserve(self, *args)

    def capacity(self):
        """capacity(EventVector self) -> std::vector< csound::Event >::size_type"""
        return _CsoundAC.EventVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_EventVector
    __del__ = lambda self : None;
EventVector_swigregister = _CsoundAC.EventVector_swigregister
EventVector_swigregister(EventVector)

class Event(_object):
    """Proxy of C++ csound::Event class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    TIME = _CsoundAC.Event_TIME
    DURATION = _CsoundAC.Event_DURATION
    STATUS = _CsoundAC.Event_STATUS
    INSTRUMENT = _CsoundAC.Event_INSTRUMENT
    KEY = _CsoundAC.Event_KEY
    VELOCITY = _CsoundAC.Event_VELOCITY
    PHASE = _CsoundAC.Event_PHASE
    PAN = _CsoundAC.Event_PAN
    DEPTH = _CsoundAC.Event_DEPTH
    HEIGHT = _CsoundAC.Event_HEIGHT
    PITCHES = _CsoundAC.Event_PITCHES
    HOMOGENEITY = _CsoundAC.Event_HOMOGENEITY
    ELEMENT_COUNT = _CsoundAC.Event_ELEMENT_COUNT
    INDEFINITE = _CsoundAC.Event_INDEFINITE
    __swig_setmethods__["properties"] = _CsoundAC.Event_properties_set
    __swig_getmethods__["properties"] = _CsoundAC.Event_properties_get
    if _newclass:properties = _swig_property(_CsoundAC.Event_properties_get, _CsoundAC.Event_properties_set)
    def __init__(self, *args): 
        """
        __init__(csound::Event self) -> Event
        __init__(csound::Event self, Event a) -> Event
        __init__(csound::Event self, std::string text) -> Event
        __init__(csound::Event self, Eigen::VectorXd const & a) -> Event
        __init__(csound::Event self, double time, double duration, double status, double instrument, double key, double velocity, 
            double phase, double pan, double depth, double height, double pitches) -> Event
        __init__(csound::Event self, DoubleVector v) -> Event
        """
        this = _CsoundAC.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Event
    __del__ = lambda self : None;
    def initialize(self):
        """initialize(Event self)"""
        return _CsoundAC.Event_initialize(self)

    def isMidiEvent(self):
        """isMidiEvent(Event self) -> bool"""
        return _CsoundAC.Event_isMidiEvent(self)

    def isNoteOn(self):
        """isNoteOn(Event self) -> bool"""
        return _CsoundAC.Event_isNoteOn(self)

    def isNoteOff(self):
        """isNoteOff(Event self) -> bool"""
        return _CsoundAC.Event_isNoteOff(self)

    def isNote(self):
        """isNote(Event self) -> bool"""
        return _CsoundAC.Event_isNote(self)

    def isMatchingNoteOff(self, *args):
        """isMatchingNoteOff(Event self, Event event) -> bool"""
        return _CsoundAC.Event_isMatchingNoteOff(self, *args)

    def isMatchingEvent(self, *args):
        """isMatchingEvent(Event self, Event event) -> bool"""
        return _CsoundAC.Event_isMatchingEvent(self, *args)

    def set(self, *args):
        """
        set(Event self, double time, double duration, double status, double instrument, double key, double velocity, 
            double phase=0, double pan=0, double depth=0, double height=0, 
            double pitches=4095)
        set(Event self, double time, double duration, double status, double instrument, double key, double velocity, 
            double phase=0, double pan=0, double depth=0, double height=0)
        set(Event self, double time, double duration, double status, double instrument, double key, double velocity, 
            double phase=0, double pan=0, double depth=0)
        set(Event self, double time, double duration, double status, double instrument, double key, double velocity, 
            double phase=0, double pan=0)
        set(Event self, double time, double duration, double status, double instrument, double key, double velocity, 
            double phase=0)
        set(Event self, double time, double duration, double status, double instrument, double key, double velocity)
        """
        return _CsoundAC.Event_set(self, *args)

    def setMidi(self, *args):
        """setMidi(Event self, double time, char status, char key, char velocity)"""
        return _CsoundAC.Event_setMidi(self, *args)

    def getMidiStatus(self):
        """getMidiStatus(Event self) -> int"""
        return _CsoundAC.Event_getMidiStatus(self)

    def getStatusNumber(self):
        """getStatusNumber(Event self) -> int"""
        return _CsoundAC.Event_getStatusNumber(self)

    def getStatus(self):
        """getStatus(Event self) -> double"""
        return _CsoundAC.Event_getStatus(self)

    def setStatus(self, *args):
        """setStatus(Event self, double status)"""
        return _CsoundAC.Event_setStatus(self, *args)

    def getChannel(self):
        """getChannel(Event self) -> int"""
        return _CsoundAC.Event_getChannel(self)

    def getInstrument(self):
        """getInstrument(Event self) -> double"""
        return _CsoundAC.Event_getInstrument(self)

    def setInstrument(self, *args):
        """setInstrument(Event self, double instrument)"""
        return _CsoundAC.Event_setInstrument(self, *args)

    def getTime(self):
        """getTime(Event self) -> double"""
        return _CsoundAC.Event_getTime(self)

    def setTime(self, *args):
        """setTime(Event self, double time)"""
        return _CsoundAC.Event_setTime(self, *args)

    def getDuration(self):
        """getDuration(Event self) -> double"""
        return _CsoundAC.Event_getDuration(self)

    def setDuration(self, *args):
        """setDuration(Event self, double duration)"""
        return _CsoundAC.Event_setDuration(self, *args)

    def getOffTime(self):
        """getOffTime(Event self) -> double"""
        return _CsoundAC.Event_getOffTime(self)

    def setOffTime(self, *args):
        """setOffTime(Event self, double offTime)"""
        return _CsoundAC.Event_setOffTime(self, *args)

    def getKeyNumber(self):
        """getKeyNumber(Event self) -> int"""
        return _CsoundAC.Event_getKeyNumber(self)

    def getKey(self, *args):
        """
        getKey(Event self) -> double
        getKey(Event self, double tonesPerOctave) -> double
        """
        return _CsoundAC.Event_getKey(self, *args)

    def setKey(self, *args):
        """setKey(Event self, double key)"""
        return _CsoundAC.Event_setKey(self, *args)

    def getFrequency(self):
        """getFrequency(Event self) -> double"""
        return _CsoundAC.Event_getFrequency(self)

    def setFrequency(self, *args):
        """setFrequency(Event self, double frequency)"""
        return _CsoundAC.Event_setFrequency(self, *args)

    def getVelocityNumber(self):
        """getVelocityNumber(Event self) -> int"""
        return _CsoundAC.Event_getVelocityNumber(self)

    def getVelocity(self):
        """getVelocity(Event self) -> double"""
        return _CsoundAC.Event_getVelocity(self)

    def setVelocity(self, *args):
        """setVelocity(Event self, double velocity)"""
        return _CsoundAC.Event_setVelocity(self, *args)

    def getGain(self):
        """getGain(Event self) -> double"""
        return _CsoundAC.Event_getGain(self)

    def getPan(self):
        """getPan(Event self) -> double"""
        return _CsoundAC.Event_getPan(self)

    def setPan(self, *args):
        """setPan(Event self, double pan)"""
        return _CsoundAC.Event_setPan(self, *args)

    def getDepth(self):
        """getDepth(Event self) -> double"""
        return _CsoundAC.Event_getDepth(self)

    def setDepth(self, *args):
        """setDepth(Event self, double depth)"""
        return _CsoundAC.Event_setDepth(self, *args)

    def getHeight(self):
        """getHeight(Event self) -> double"""
        return _CsoundAC.Event_getHeight(self)

    def setHeight(self, *args):
        """setHeight(Event self, double height)"""
        return _CsoundAC.Event_setHeight(self, *args)

    def getPitches(self):
        """getPitches(Event self) -> double"""
        return _CsoundAC.Event_getPitches(self)

    def setPitches(self, *args):
        """setPitches(Event self, double pitches)"""
        return _CsoundAC.Event_setPitches(self, *args)

    def getAmplitude(self):
        """getAmplitude(Event self) -> double"""
        return _CsoundAC.Event_getAmplitude(self)

    def setAmplitude(self, *args):
        """setAmplitude(Event self, double amplitude)"""
        return _CsoundAC.Event_setAmplitude(self, *args)

    def getPhase(self):
        """getPhase(Event self) -> double"""
        return _CsoundAC.Event_getPhase(self)

    def setPhase(self, *args):
        """setPhase(Event self, double phase)"""
        return _CsoundAC.Event_setPhase(self, *args)

    def getLeftGain(self):
        """getLeftGain(Event self) -> double"""
        return _CsoundAC.Event_getLeftGain(self)

    def getRightGain(self):
        """getRightGain(Event self) -> double"""
        return _CsoundAC.Event_getRightGain(self)

    def dump(self, *args):
        """dump(Event self, std::ostream & stream)"""
        return _CsoundAC.Event_dump(self, *args)

    def toString(self):
        """toString(Event self) -> std::string"""
        return _CsoundAC.Event_toString(self)

    def toCsoundIStatement(self, tempering=12.0):
        """
        toCsoundIStatement(Event self, double tempering=12.0) -> std::string
        toCsoundIStatement(Event self) -> std::string
        """
        return _CsoundAC.Event_toCsoundIStatement(self, tempering)

    def toCsoundIStatementHeld(self, *args):
        """
        toCsoundIStatementHeld(Event self, int tag, double tempering=12.0) -> std::string
        toCsoundIStatementHeld(Event self, int tag) -> std::string
        """
        return _CsoundAC.Event_toCsoundIStatementHeld(self, *args)

    def toCsoundIStatementRelease(self, *args):
        """
        toCsoundIStatementRelease(Event self, int tag, double tempering=12.0) -> std::string
        toCsoundIStatementRelease(Event self, int tag) -> std::string
        """
        return _CsoundAC.Event_toCsoundIStatementRelease(self, *args)

    def conformToPitchClassSet(self):
        """conformToPitchClassSet(Event self)"""
        return _CsoundAC.Event_conformToPitchClassSet(self)

    def temper(self, *args):
        """temper(Event self, double divisionsPerOctave)"""
        return _CsoundAC.Event_temper(self, *args)

    def getProperty(self, *args):
        """getProperty(Event self, std::string name) -> std::string"""
        return _CsoundAC.Event_getProperty(self, *args)

    def setProperty(self, *args):
        """setProperty(Event self, std::string name, std::string value)"""
        return _CsoundAC.Event_setProperty(self, *args)

    def removeProperty(self, *args):
        """removeProperty(Event self, std::string nameO)"""
        return _CsoundAC.Event_removeProperty(self, *args)

    def clearProperties(self):
        """clearProperties(Event self)"""
        return _CsoundAC.Event_clearProperties(self)

    def createNoteOffEvent(self, *args):
        """createNoteOffEvent(Event self, Event event)"""
        return _CsoundAC.Event_createNoteOffEvent(self, *args)

Event_swigregister = _CsoundAC.Event_swigregister
Event_swigregister(Event)

class MidiEventVector(_object):
    """Proxy of C++ std::vector<(csound::MidiEvent)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiEventVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MidiEventVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(MidiEventVector self) -> SwigPyIterator"""
        return _CsoundAC.MidiEventVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(MidiEventVector self) -> bool"""
        return _CsoundAC.MidiEventVector___nonzero__(self)

    def __bool__(self):
        """__bool__(MidiEventVector self) -> bool"""
        return _CsoundAC.MidiEventVector___bool__(self)

    def __len__(self):
        """__len__(MidiEventVector self) -> std::vector< csound::MidiEvent >::size_type"""
        return _CsoundAC.MidiEventVector___len__(self)

    def pop(self):
        """pop(MidiEventVector self) -> MidiEvent"""
        return _CsoundAC.MidiEventVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i, std::vector< csound::MidiEvent >::difference_type j) -> MidiEventVector"""
        return _CsoundAC.MidiEventVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i, std::vector< csound::MidiEvent >::difference_type j, 
            MidiEventVector v=std::vector< csound::MidiEvent,std::allocator< csound::MidiEvent > >())
        __setslice__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i, std::vector< csound::MidiEvent >::difference_type j)
        """
        return _CsoundAC.MidiEventVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i, std::vector< csound::MidiEvent >::difference_type j)"""
        return _CsoundAC.MidiEventVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i)
        __delitem__(MidiEventVector self, PySliceObject * slice)
        """
        return _CsoundAC.MidiEventVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(MidiEventVector self, PySliceObject * slice) -> MidiEventVector
        __getitem__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i) -> MidiEvent
        """
        return _CsoundAC.MidiEventVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(MidiEventVector self, PySliceObject * slice, MidiEventVector v)
        __setitem__(MidiEventVector self, PySliceObject * slice)
        __setitem__(MidiEventVector self, std::vector< csound::MidiEvent >::difference_type i, MidiEvent x)
        """
        return _CsoundAC.MidiEventVector___setitem__(self, *args)

    def append(self, *args):
        """append(MidiEventVector self, MidiEvent x)"""
        return _CsoundAC.MidiEventVector_append(self, *args)

    def empty(self):
        """empty(MidiEventVector self) -> bool"""
        return _CsoundAC.MidiEventVector_empty(self)

    def size(self):
        """size(MidiEventVector self) -> std::vector< csound::MidiEvent >::size_type"""
        return _CsoundAC.MidiEventVector_size(self)

    def clear(self):
        """clear(MidiEventVector self)"""
        return _CsoundAC.MidiEventVector_clear(self)

    def swap(self, *args):
        """swap(MidiEventVector self, MidiEventVector v)"""
        return _CsoundAC.MidiEventVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(MidiEventVector self) -> std::vector< csound::MidiEvent >::allocator_type"""
        return _CsoundAC.MidiEventVector_get_allocator(self)

    def begin(self):
        """begin(MidiEventVector self) -> std::vector< csound::MidiEvent >::iterator"""
        return _CsoundAC.MidiEventVector_begin(self)

    def end(self):
        """end(MidiEventVector self) -> std::vector< csound::MidiEvent >::iterator"""
        return _CsoundAC.MidiEventVector_end(self)

    def rbegin(self):
        """rbegin(MidiEventVector self) -> std::vector< csound::MidiEvent >::reverse_iterator"""
        return _CsoundAC.MidiEventVector_rbegin(self)

    def rend(self):
        """rend(MidiEventVector self) -> std::vector< csound::MidiEvent >::reverse_iterator"""
        return _CsoundAC.MidiEventVector_rend(self)

    def pop_back(self):
        """pop_back(MidiEventVector self)"""
        return _CsoundAC.MidiEventVector_pop_back(self)

    def erase(self, *args):
        """
        erase(MidiEventVector self, std::vector< csound::MidiEvent >::iterator pos) -> std::vector< csound::MidiEvent >::iterator
        erase(MidiEventVector self, std::vector< csound::MidiEvent >::iterator first, std::vector< csound::MidiEvent >::iterator last) -> std::vector< csound::MidiEvent >::iterator
        """
        return _CsoundAC.MidiEventVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(csound::MidiEvent)> self) -> MidiEventVector
        __init__(std::vector<(csound::MidiEvent)> self, MidiEventVector arg2) -> MidiEventVector
        __init__(std::vector<(csound::MidiEvent)> self, std::vector< csound::MidiEvent >::size_type size) -> MidiEventVector
        __init__(std::vector<(csound::MidiEvent)> self, std::vector< csound::MidiEvent >::size_type size, MidiEvent value) -> MidiEventVector
        """
        this = _CsoundAC.new_MidiEventVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(MidiEventVector self, MidiEvent x)"""
        return _CsoundAC.MidiEventVector_push_back(self, *args)

    def front(self):
        """front(MidiEventVector self) -> MidiEvent"""
        return _CsoundAC.MidiEventVector_front(self)

    def back(self):
        """back(MidiEventVector self) -> MidiEvent"""
        return _CsoundAC.MidiEventVector_back(self)

    def assign(self, *args):
        """assign(MidiEventVector self, std::vector< csound::MidiEvent >::size_type n, MidiEvent x)"""
        return _CsoundAC.MidiEventVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(MidiEventVector self, std::vector< csound::MidiEvent >::size_type new_size)
        resize(MidiEventVector self, std::vector< csound::MidiEvent >::size_type new_size, MidiEvent x)
        """
        return _CsoundAC.MidiEventVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(MidiEventVector self, std::vector< csound::MidiEvent >::iterator pos, MidiEvent x) -> std::vector< csound::MidiEvent >::iterator
        insert(MidiEventVector self, std::vector< csound::MidiEvent >::iterator pos, std::vector< csound::MidiEvent >::size_type n, 
            MidiEvent x)
        """
        return _CsoundAC.MidiEventVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(MidiEventVector self, std::vector< csound::MidiEvent >::size_type n)"""
        return _CsoundAC.MidiEventVector_reserve(self, *args)

    def capacity(self):
        """capacity(MidiEventVector self) -> std::vector< csound::MidiEvent >::size_type"""
        return _CsoundAC.MidiEventVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_MidiEventVector
    __del__ = lambda self : None;
MidiEventVector_swigregister = _CsoundAC.MidiEventVector_swigregister
MidiEventVector_swigregister(MidiEventVector)

class MidiByteVector(_object):
    """Proxy of C++ std::vector<(unsigned char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiByteVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MidiByteVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(MidiByteVector self) -> SwigPyIterator"""
        return _CsoundAC.MidiByteVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(MidiByteVector self) -> bool"""
        return _CsoundAC.MidiByteVector___nonzero__(self)

    def __bool__(self):
        """__bool__(MidiByteVector self) -> bool"""
        return _CsoundAC.MidiByteVector___bool__(self)

    def __len__(self):
        """__len__(MidiByteVector self) -> std::vector< unsigned char >::size_type"""
        return _CsoundAC.MidiByteVector___len__(self)

    def pop(self):
        """pop(MidiByteVector self) -> std::vector< unsigned char >::value_type"""
        return _CsoundAC.MidiByteVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(MidiByteVector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> MidiByteVector"""
        return _CsoundAC.MidiByteVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(MidiByteVector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, 
            MidiByteVector v=std::vector< unsigned char,std::allocator< unsigned char > >())
        __setslice__(MidiByteVector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)
        """
        return _CsoundAC.MidiByteVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(MidiByteVector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)"""
        return _CsoundAC.MidiByteVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MidiByteVector self, std::vector< unsigned char >::difference_type i)
        __delitem__(MidiByteVector self, PySliceObject * slice)
        """
        return _CsoundAC.MidiByteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(MidiByteVector self, PySliceObject * slice) -> MidiByteVector
        __getitem__(MidiByteVector self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &
        """
        return _CsoundAC.MidiByteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(MidiByteVector self, PySliceObject * slice, MidiByteVector v)
        __setitem__(MidiByteVector self, PySliceObject * slice)
        __setitem__(MidiByteVector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)
        """
        return _CsoundAC.MidiByteVector___setitem__(self, *args)

    def append(self, *args):
        """append(MidiByteVector self, std::vector< unsigned char >::value_type const & x)"""
        return _CsoundAC.MidiByteVector_append(self, *args)

    def empty(self):
        """empty(MidiByteVector self) -> bool"""
        return _CsoundAC.MidiByteVector_empty(self)

    def size(self):
        """size(MidiByteVector self) -> std::vector< unsigned char >::size_type"""
        return _CsoundAC.MidiByteVector_size(self)

    def clear(self):
        """clear(MidiByteVector self)"""
        return _CsoundAC.MidiByteVector_clear(self)

    def swap(self, *args):
        """swap(MidiByteVector self, MidiByteVector v)"""
        return _CsoundAC.MidiByteVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(MidiByteVector self) -> std::vector< unsigned char >::allocator_type"""
        return _CsoundAC.MidiByteVector_get_allocator(self)

    def begin(self):
        """begin(MidiByteVector self) -> std::vector< unsigned char >::iterator"""
        return _CsoundAC.MidiByteVector_begin(self)

    def end(self):
        """end(MidiByteVector self) -> std::vector< unsigned char >::iterator"""
        return _CsoundAC.MidiByteVector_end(self)

    def rbegin(self):
        """rbegin(MidiByteVector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _CsoundAC.MidiByteVector_rbegin(self)

    def rend(self):
        """rend(MidiByteVector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _CsoundAC.MidiByteVector_rend(self)

    def pop_back(self):
        """pop_back(MidiByteVector self)"""
        return _CsoundAC.MidiByteVector_pop_back(self)

    def erase(self, *args):
        """
        erase(MidiByteVector self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator
        erase(MidiByteVector self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator
        """
        return _CsoundAC.MidiByteVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(unsigned char)> self) -> MidiByteVector
        __init__(std::vector<(unsigned char)> self, MidiByteVector arg2) -> MidiByteVector
        __init__(std::vector<(unsigned char)> self, std::vector< unsigned char >::size_type size) -> MidiByteVector
        __init__(std::vector<(unsigned char)> self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> MidiByteVector
        """
        this = _CsoundAC.new_MidiByteVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(MidiByteVector self, std::vector< unsigned char >::value_type const & x)"""
        return _CsoundAC.MidiByteVector_push_back(self, *args)

    def front(self):
        """front(MidiByteVector self) -> std::vector< unsigned char >::value_type const &"""
        return _CsoundAC.MidiByteVector_front(self)

    def back(self):
        """back(MidiByteVector self) -> std::vector< unsigned char >::value_type const &"""
        return _CsoundAC.MidiByteVector_back(self)

    def assign(self, *args):
        """assign(MidiByteVector self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)"""
        return _CsoundAC.MidiByteVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(MidiByteVector self, std::vector< unsigned char >::size_type new_size)
        resize(MidiByteVector self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)
        """
        return _CsoundAC.MidiByteVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(MidiByteVector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator
        insert(MidiByteVector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, 
            std::vector< unsigned char >::value_type const & x)
        """
        return _CsoundAC.MidiByteVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(MidiByteVector self, std::vector< unsigned char >::size_type n)"""
        return _CsoundAC.MidiByteVector_reserve(self, *args)

    def capacity(self):
        """capacity(MidiByteVector self) -> std::vector< unsigned char >::size_type"""
        return _CsoundAC.MidiByteVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_MidiByteVector
    __del__ = lambda self : None;
MidiByteVector_swigregister = _CsoundAC.MidiByteVector_swigregister
MidiByteVector_swigregister(MidiByteVector)

class Chunk(_object):
    """Proxy of C++ csound::Chunk class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _CsoundAC.Chunk_id_set
    __swig_getmethods__["id"] = _CsoundAC.Chunk_id_get
    if _newclass:id = _swig_property(_CsoundAC.Chunk_id_get, _CsoundAC.Chunk_id_set)
    __swig_setmethods__["chunkSize"] = _CsoundAC.Chunk_chunkSize_set
    __swig_getmethods__["chunkSize"] = _CsoundAC.Chunk_chunkSize_get
    if _newclass:chunkSize = _swig_property(_CsoundAC.Chunk_chunkSize_get, _CsoundAC.Chunk_chunkSize_set)
    __swig_setmethods__["chunkSizePosition"] = _CsoundAC.Chunk_chunkSizePosition_set
    __swig_getmethods__["chunkSizePosition"] = _CsoundAC.Chunk_chunkSizePosition_get
    if _newclass:chunkSizePosition = _swig_property(_CsoundAC.Chunk_chunkSizePosition_get, _CsoundAC.Chunk_chunkSizePosition_set)
    __swig_setmethods__["chunkStart"] = _CsoundAC.Chunk_chunkStart_set
    __swig_getmethods__["chunkStart"] = _CsoundAC.Chunk_chunkStart_get
    if _newclass:chunkStart = _swig_property(_CsoundAC.Chunk_chunkStart_get, _CsoundAC.Chunk_chunkStart_set)
    __swig_setmethods__["chunkEnd"] = _CsoundAC.Chunk_chunkEnd_set
    __swig_getmethods__["chunkEnd"] = _CsoundAC.Chunk_chunkEnd_get
    if _newclass:chunkEnd = _swig_property(_CsoundAC.Chunk_chunkEnd_get, _CsoundAC.Chunk_chunkEnd_set)
    def __init__(self, *args): 
        """
        __init__(csound::Chunk self) -> Chunk
        __init__(csound::Chunk self, char const * _id) -> Chunk
        __init__(csound::Chunk self, Chunk a) -> Chunk
        """
        this = _CsoundAC.new_Chunk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Chunk
    __del__ = lambda self : None;
    def read(self, *args):
        """read(Chunk self, std::istream & stream)"""
        return _CsoundAC.Chunk_read(self, *args)

    def write(self, *args):
        """write(Chunk self, std::ostream & stream)"""
        return _CsoundAC.Chunk_write(self, *args)

    def markChunkSize(self, *args):
        """markChunkSize(Chunk self, std::ostream & stream)"""
        return _CsoundAC.Chunk_markChunkSize(self, *args)

    def markChunkStart(self, *args):
        """markChunkStart(Chunk self, std::ostream & stream)"""
        return _CsoundAC.Chunk_markChunkStart(self, *args)

    def markChunkEnd(self, *args):
        """markChunkEnd(Chunk self, std::ostream & stream)"""
        return _CsoundAC.Chunk_markChunkEnd(self, *args)

Chunk_swigregister = _CsoundAC.Chunk_swigregister
Chunk_swigregister(Chunk)

class MidiHeader(Chunk):
    """Proxy of C++ csound::MidiHeader class"""
    __swig_setmethods__ = {}
    for _s in [Chunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [Chunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidiHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _CsoundAC.MidiHeader_type_set
    __swig_getmethods__["type"] = _CsoundAC.MidiHeader_type_get
    if _newclass:type = _swig_property(_CsoundAC.MidiHeader_type_get, _CsoundAC.MidiHeader_type_set)
    __swig_setmethods__["trackCount"] = _CsoundAC.MidiHeader_trackCount_set
    __swig_getmethods__["trackCount"] = _CsoundAC.MidiHeader_trackCount_get
    if _newclass:trackCount = _swig_property(_CsoundAC.MidiHeader_trackCount_get, _CsoundAC.MidiHeader_trackCount_set)
    __swig_setmethods__["timeFormat"] = _CsoundAC.MidiHeader_timeFormat_set
    __swig_getmethods__["timeFormat"] = _CsoundAC.MidiHeader_timeFormat_get
    if _newclass:timeFormat = _swig_property(_CsoundAC.MidiHeader_timeFormat_get, _CsoundAC.MidiHeader_timeFormat_set)
    def __init__(self, *args): 
        """
        __init__(csound::MidiHeader self) -> MidiHeader
        __init__(csound::MidiHeader self, MidiHeader a) -> MidiHeader
        """
        this = _CsoundAC.new_MidiHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MidiHeader
    __del__ = lambda self : None;
    def clear(self):
        """clear(MidiHeader self)"""
        return _CsoundAC.MidiHeader_clear(self)

    def read(self, *args):
        """read(MidiHeader self, std::istream & stream)"""
        return _CsoundAC.MidiHeader_read(self, *args)

    def write(self, *args):
        """write(MidiHeader self, std::ostream & stream)"""
        return _CsoundAC.MidiHeader_write(self, *args)

MidiHeader_swigregister = _CsoundAC.MidiHeader_swigregister
MidiHeader_swigregister(MidiHeader)

class MidiEvent(MidiByteVector):
    """Proxy of C++ csound::MidiEvent class"""
    __swig_setmethods__ = {}
    for _s in [MidiByteVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [MidiByteVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidiEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ticks"] = _CsoundAC.MidiEvent_ticks_set
    __swig_getmethods__["ticks"] = _CsoundAC.MidiEvent_ticks_get
    if _newclass:ticks = _swig_property(_CsoundAC.MidiEvent_ticks_get, _CsoundAC.MidiEvent_ticks_set)
    __swig_setmethods__["time"] = _CsoundAC.MidiEvent_time_set
    __swig_getmethods__["time"] = _CsoundAC.MidiEvent_time_get
    if _newclass:time = _swig_property(_CsoundAC.MidiEvent_time_get, _CsoundAC.MidiEvent_time_set)
    def __init__(self, *args): 
        """
        __init__(csound::MidiEvent self) -> MidiEvent
        __init__(csound::MidiEvent self, MidiEvent a) -> MidiEvent
        """
        this = _CsoundAC.new_MidiEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MidiEvent
    __del__ = lambda self : None;
    def write(self, *args):
        """write(MidiEvent self, std::ostream & stream, MidiFile midiFile, int lastTick)"""
        return _CsoundAC.MidiEvent_write(self, *args)

    def getStatus(self):
        """getStatus(MidiEvent self) -> int"""
        return _CsoundAC.MidiEvent_getStatus(self)

    def getStatusNybble(self):
        """getStatusNybble(MidiEvent self) -> int"""
        return _CsoundAC.MidiEvent_getStatusNybble(self)

    def getChannelNybble(self):
        """getChannelNybble(MidiEvent self) -> int"""
        return _CsoundAC.MidiEvent_getChannelNybble(self)

    def getKey(self):
        """getKey(MidiEvent self) -> int"""
        return _CsoundAC.MidiEvent_getKey(self)

    def getVelocity(self):
        """getVelocity(MidiEvent self) -> int"""
        return _CsoundAC.MidiEvent_getVelocity(self)

    def getMetaType(self):
        """getMetaType(MidiEvent self) -> int"""
        return _CsoundAC.MidiEvent_getMetaType(self)

    def getMetaData(self, *args):
        """getMetaData(MidiEvent self, int i) -> unsigned char"""
        return _CsoundAC.MidiEvent_getMetaData(self, *args)

    def getMetaSize(self):
        """getMetaSize(MidiEvent self) -> size_t"""
        return _CsoundAC.MidiEvent_getMetaSize(self)

    def read(self, *args):
        """
        read(MidiEvent self, std::istream & stream, MidiFile midiFile)
        read(MidiEvent self, std::istream & stream) -> unsigned char
        """
        return _CsoundAC.MidiEvent_read(self, *args)

    def isChannelVoiceMessage(self):
        """isChannelVoiceMessage(MidiEvent self) -> bool"""
        return _CsoundAC.MidiEvent_isChannelVoiceMessage(self)

    def isNoteOn(self):
        """isNoteOn(MidiEvent self) -> bool"""
        return _CsoundAC.MidiEvent_isNoteOn(self)

    def isNoteOff(self):
        """isNoteOff(MidiEvent self) -> bool"""
        return _CsoundAC.MidiEvent_isNoteOff(self)

    def matchesNoteOffEvent(self, *args):
        """matchesNoteOffEvent(MidiEvent self, MidiEvent offEvent) -> bool"""
        return _CsoundAC.MidiEvent_matchesNoteOffEvent(self, *args)

    def toString(self):
        """toString(MidiEvent self) -> std::string"""
        return _CsoundAC.MidiEvent_toString(self)

MidiEvent_swigregister = _CsoundAC.MidiEvent_swigregister
MidiEvent_swigregister(MidiEvent)

class MidiTrack(Chunk,MidiEventVector):
    """Proxy of C++ csound::MidiTrack class"""
    __swig_setmethods__ = {}
    for _s in [Chunk,MidiEventVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiTrack, name, value)
    __swig_getmethods__ = {}
    for _s in [Chunk,MidiEventVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidiTrack, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::MidiTrack self) -> MidiTrack"""
        this = _CsoundAC.new_MidiTrack()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MidiTrack
    __del__ = lambda self : None;
    def read(self, *args):
        """read(MidiTrack self, std::istream & stream, MidiFile midiFile)"""
        return _CsoundAC.MidiTrack_read(self, *args)

    def write(self, *args):
        """write(MidiTrack self, std::ostream & stream, MidiFile midiFile)"""
        return _CsoundAC.MidiTrack_write(self, *args)

MidiTrack_swigregister = _CsoundAC.MidiTrack_swigregister
MidiTrack_swigregister(MidiTrack)

class TempoMap(_object):
    """Proxy of C++ csound::TempoMap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TempoMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TempoMap, name)
    __repr__ = _swig_repr
    def getCurrentSecondsPerTick(self, *args):
        """getCurrentSecondsPerTick(TempoMap self, int tick) -> double"""
        return _CsoundAC.TempoMap_getCurrentSecondsPerTick(self, *args)

    def __init__(self): 
        """__init__(csound::TempoMap self) -> TempoMap"""
        this = _CsoundAC.new_TempoMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_TempoMap
    __del__ = lambda self : None;
TempoMap_swigregister = _CsoundAC.TempoMap_swigregister
TempoMap_swigregister(TempoMap)

class MidiFile(_object):
    """Proxy of C++ csound::MidiFile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MidiFile, name)
    __repr__ = _swig_repr
    CHANNEL_NOTE_OFF = _CsoundAC.MidiFile_CHANNEL_NOTE_OFF
    CHANNEL_NOTE_ON = _CsoundAC.MidiFile_CHANNEL_NOTE_ON
    CHANNEL_KEY_PRESSURE = _CsoundAC.MidiFile_CHANNEL_KEY_PRESSURE
    CHANNEL_CONTROL_CHANGE = _CsoundAC.MidiFile_CHANNEL_CONTROL_CHANGE
    CHANNEL_PROGRAM_CHANGE = _CsoundAC.MidiFile_CHANNEL_PROGRAM_CHANGE
    CHANNEL_AFTER_TOUCH = _CsoundAC.MidiFile_CHANNEL_AFTER_TOUCH
    CHANNEL_PITCH_BEND = _CsoundAC.MidiFile_CHANNEL_PITCH_BEND
    SYSTEM_EXCLUSIVE = _CsoundAC.MidiFile_SYSTEM_EXCLUSIVE
    SYSTEM_MIDI_TIME_CODE = _CsoundAC.MidiFile_SYSTEM_MIDI_TIME_CODE
    SYSTEM_SONG_POSITION_POINTER = _CsoundAC.MidiFile_SYSTEM_SONG_POSITION_POINTER
    SYSTEM_SONG_SELECT = _CsoundAC.MidiFile_SYSTEM_SONG_SELECT
    SYSTEM_TUNE_REQUEST = _CsoundAC.MidiFile_SYSTEM_TUNE_REQUEST
    SYSTEM_END_OF_EXCLUSIVE = _CsoundAC.MidiFile_SYSTEM_END_OF_EXCLUSIVE
    SYSTEM_TIMING_CLOCK = _CsoundAC.MidiFile_SYSTEM_TIMING_CLOCK
    SYSTEM_START = _CsoundAC.MidiFile_SYSTEM_START
    SYSTEM_CONTINUE = _CsoundAC.MidiFile_SYSTEM_CONTINUE
    SYSTEM_STOP = _CsoundAC.MidiFile_SYSTEM_STOP
    SYSTEM_ACTIVE_SENSING = _CsoundAC.MidiFile_SYSTEM_ACTIVE_SENSING
    META_EVENT = _CsoundAC.MidiFile_META_EVENT
    META_SEQUENCE_NUMBER = _CsoundAC.MidiFile_META_SEQUENCE_NUMBER
    META_TEXT_EVENT = _CsoundAC.MidiFile_META_TEXT_EVENT
    META_COPYRIGHT_NOTICE = _CsoundAC.MidiFile_META_COPYRIGHT_NOTICE
    META_SEQUENCE_NAME = _CsoundAC.MidiFile_META_SEQUENCE_NAME
    META_INSTRUMENT_NAME = _CsoundAC.MidiFile_META_INSTRUMENT_NAME
    META_LYRIC = _CsoundAC.MidiFile_META_LYRIC
    META_MARKER = _CsoundAC.MidiFile_META_MARKER
    META_CUE_POINT = _CsoundAC.MidiFile_META_CUE_POINT
    META_CHANNEL_PREFIX = _CsoundAC.MidiFile_META_CHANNEL_PREFIX
    META_END_OF_TRACK = _CsoundAC.MidiFile_META_END_OF_TRACK
    META_SET_TEMPO = _CsoundAC.MidiFile_META_SET_TEMPO
    META_SMPTE_OFFSET = _CsoundAC.MidiFile_META_SMPTE_OFFSET
    META_TIME_SIGNATURE = _CsoundAC.MidiFile_META_TIME_SIGNATURE
    META_KEY_SIGNATURE = _CsoundAC.MidiFile_META_KEY_SIGNATURE
    META_SEQUENCER_SPECIFIC = _CsoundAC.MidiFile_META_SEQUENCER_SPECIFIC
    CONTROLLER_MOD_WHEEL = _CsoundAC.MidiFile_CONTROLLER_MOD_WHEEL
    CONTROLLER_BREATH = _CsoundAC.MidiFile_CONTROLLER_BREATH
    CONTROLLER_FOOT = _CsoundAC.MidiFile_CONTROLLER_FOOT
    CONTROLLER_BALANCE = _CsoundAC.MidiFile_CONTROLLER_BALANCE
    CONTROLLER_PAN = _CsoundAC.MidiFile_CONTROLLER_PAN
    CONTROLLER_EXPRESSION = _CsoundAC.MidiFile_CONTROLLER_EXPRESSION
    CONTROLLER_DAMPER_PEDAL = _CsoundAC.MidiFile_CONTROLLER_DAMPER_PEDAL
    CONTROLLER_PORTAMENTO = _CsoundAC.MidiFile_CONTROLLER_PORTAMENTO
    CONTROLLER_SOSTENUTO = _CsoundAC.MidiFile_CONTROLLER_SOSTENUTO
    CONTROLLER_SOFT_PEDAL = _CsoundAC.MidiFile_CONTROLLER_SOFT_PEDAL
    CONTROLLER_GENERAL_4 = _CsoundAC.MidiFile_CONTROLLER_GENERAL_4
    CONTROLLER_HOLD_2 = _CsoundAC.MidiFile_CONTROLLER_HOLD_2
    CONTROLLER_7GENERAL_5 = _CsoundAC.MidiFile_CONTROLLER_7GENERAL_5
    CONTROLLER_GENERAL_6 = _CsoundAC.MidiFile_CONTROLLER_GENERAL_6
    CONTROLLER_GENERAL_7 = _CsoundAC.MidiFile_CONTROLLER_GENERAL_7
    CONTROLLER_GENERAL_8 = _CsoundAC.MidiFile_CONTROLLER_GENERAL_8
    CONTROLLER_TREMOLO_DEPTH = _CsoundAC.MidiFile_CONTROLLER_TREMOLO_DEPTH
    CONTROLLER_CHORUS_DEPTH = _CsoundAC.MidiFile_CONTROLLER_CHORUS_DEPTH
    CONTROLLER_DETUNE = _CsoundAC.MidiFile_CONTROLLER_DETUNE
    CONTROLLER_PHASER_DEPTH = _CsoundAC.MidiFile_CONTROLLER_PHASER_DEPTH
    CONTROLLER_DATA_INC = _CsoundAC.MidiFile_CONTROLLER_DATA_INC
    CONTROLLER_DATA_DEC = _CsoundAC.MidiFile_CONTROLLER_DATA_DEC
    CONTROLLER_NON_REG_LSB = _CsoundAC.MidiFile_CONTROLLER_NON_REG_LSB
    CONTROLLER_NON_REG_MSB = _CsoundAC.MidiFile_CONTROLLER_NON_REG_MSB
    CONTROLLER_REG_LSB = _CsoundAC.MidiFile_CONTROLLER_REG_LSB
    CONTROLLER_REG_MSG = _CsoundAC.MidiFile_CONTROLLER_REG_MSG
    CONTROLLER_CONTINUOUS_AFTERTOUCH = _CsoundAC.MidiFile_CONTROLLER_CONTINUOUS_AFTERTOUCH
    def readVariableLength(*args):
        """readVariableLength(std::istream & stream) -> int"""
        return _CsoundAC.MidiFile_readVariableLength(*args)

    if _newclass:readVariableLength = staticmethod(readVariableLength)
    __swig_getmethods__["readVariableLength"] = lambda x: readVariableLength
    def writeVariableLength(*args):
        """writeVariableLength(std::ostream & stream, int value)"""
        return _CsoundAC.MidiFile_writeVariableLength(*args)

    if _newclass:writeVariableLength = staticmethod(writeVariableLength)
    __swig_getmethods__["writeVariableLength"] = lambda x: writeVariableLength
    def toInt(*args):
        """toInt(int c1, int c2, int c3, int c4) -> int"""
        return _CsoundAC.MidiFile_toInt(*args)

    if _newclass:toInt = staticmethod(toInt)
    __swig_getmethods__["toInt"] = lambda x: toInt
    def toShort(*args):
        """toShort(int c1, int c2) -> short"""
        return _CsoundAC.MidiFile_toShort(*args)

    if _newclass:toShort = staticmethod(toShort)
    __swig_getmethods__["toShort"] = lambda x: toShort
    def readInt(*args):
        """readInt(std::istream & stream) -> int"""
        return _CsoundAC.MidiFile_readInt(*args)

    if _newclass:readInt = staticmethod(readInt)
    __swig_getmethods__["readInt"] = lambda x: readInt
    def writeInt(*args):
        """writeInt(std::ostream & stream, int value)"""
        return _CsoundAC.MidiFile_writeInt(*args)

    if _newclass:writeInt = staticmethod(writeInt)
    __swig_getmethods__["writeInt"] = lambda x: writeInt
    def readShort(*args):
        """readShort(std::istream & stream) -> short"""
        return _CsoundAC.MidiFile_readShort(*args)

    if _newclass:readShort = staticmethod(readShort)
    __swig_getmethods__["readShort"] = lambda x: readShort
    def writeShort(*args):
        """writeShort(std::ostream & stream, short value)"""
        return _CsoundAC.MidiFile_writeShort(*args)

    if _newclass:writeShort = staticmethod(writeShort)
    __swig_getmethods__["writeShort"] = lambda x: writeShort
    def chunkName(*args):
        """chunkName(int a, int b, int c, int d) -> int"""
        return _CsoundAC.MidiFile_chunkName(*args)

    if _newclass:chunkName = staticmethod(chunkName)
    __swig_getmethods__["chunkName"] = lambda x: chunkName
    def computeTimes(self):
        """computeTimes(MidiFile self)"""
        return _CsoundAC.MidiFile_computeTimes(self)

    __swig_setmethods__["currentTick"] = _CsoundAC.MidiFile_currentTick_set
    __swig_getmethods__["currentTick"] = _CsoundAC.MidiFile_currentTick_get
    if _newclass:currentTick = _swig_property(_CsoundAC.MidiFile_currentTick_get, _CsoundAC.MidiFile_currentTick_set)
    __swig_setmethods__["currentTime"] = _CsoundAC.MidiFile_currentTime_set
    __swig_getmethods__["currentTime"] = _CsoundAC.MidiFile_currentTime_get
    if _newclass:currentTime = _swig_property(_CsoundAC.MidiFile_currentTime_get, _CsoundAC.MidiFile_currentTime_set)
    __swig_setmethods__["currentSecondsPerTick"] = _CsoundAC.MidiFile_currentSecondsPerTick_set
    __swig_getmethods__["currentSecondsPerTick"] = _CsoundAC.MidiFile_currentSecondsPerTick_get
    if _newclass:currentSecondsPerTick = _swig_property(_CsoundAC.MidiFile_currentSecondsPerTick_get, _CsoundAC.MidiFile_currentSecondsPerTick_set)
    __swig_setmethods__["microsecondsPerQuarterNote"] = _CsoundAC.MidiFile_microsecondsPerQuarterNote_set
    __swig_getmethods__["microsecondsPerQuarterNote"] = _CsoundAC.MidiFile_microsecondsPerQuarterNote_get
    if _newclass:microsecondsPerQuarterNote = _swig_property(_CsoundAC.MidiFile_microsecondsPerQuarterNote_get, _CsoundAC.MidiFile_microsecondsPerQuarterNote_set)
    __swig_setmethods__["lastStatus"] = _CsoundAC.MidiFile_lastStatus_set
    __swig_getmethods__["lastStatus"] = _CsoundAC.MidiFile_lastStatus_get
    if _newclass:lastStatus = _swig_property(_CsoundAC.MidiFile_lastStatus_get, _CsoundAC.MidiFile_lastStatus_set)
    __swig_setmethods__["midiHeader"] = _CsoundAC.MidiFile_midiHeader_set
    __swig_getmethods__["midiHeader"] = _CsoundAC.MidiFile_midiHeader_get
    if _newclass:midiHeader = _swig_property(_CsoundAC.MidiFile_midiHeader_get, _CsoundAC.MidiFile_midiHeader_set)
    __swig_setmethods__["tempoMap"] = _CsoundAC.MidiFile_tempoMap_set
    __swig_getmethods__["tempoMap"] = _CsoundAC.MidiFile_tempoMap_get
    if _newclass:tempoMap = _swig_property(_CsoundAC.MidiFile_tempoMap_get, _CsoundAC.MidiFile_tempoMap_set)
    __swig_setmethods__["midiTracks"] = _CsoundAC.MidiFile_midiTracks_set
    __swig_getmethods__["midiTracks"] = _CsoundAC.MidiFile_midiTracks_get
    if _newclass:midiTracks = _swig_property(_CsoundAC.MidiFile_midiTracks_get, _CsoundAC.MidiFile_midiTracks_set)
    def __init__(self): 
        """__init__(csound::MidiFile self) -> MidiFile"""
        this = _CsoundAC.new_MidiFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MidiFile
    __del__ = lambda self : None;
    def clear(self):
        """clear(MidiFile self)"""
        return _CsoundAC.MidiFile_clear(self)

    def read(self, *args):
        """read(MidiFile self, std::istream & stream)"""
        return _CsoundAC.MidiFile_read(self, *args)

    def write(self, *args):
        """write(MidiFile self, std::ostream & stream)"""
        return _CsoundAC.MidiFile_write(self, *args)

    def load(self, *args):
        """load(MidiFile self, std::string filename)"""
        return _CsoundAC.MidiFile_load(self, *args)

    def save(self, *args):
        """save(MidiFile self, std::string filename)"""
        return _CsoundAC.MidiFile_save(self, *args)

    def dump(self, *args):
        """dump(MidiFile self, std::ostream & stream)"""
        return _CsoundAC.MidiFile_dump(self, *args)

MidiFile_swigregister = _CsoundAC.MidiFile_swigregister
MidiFile_swigregister(MidiFile)

def MidiFile_readVariableLength(*args):
  """MidiFile_readVariableLength(std::istream & stream) -> int"""
  return _CsoundAC.MidiFile_readVariableLength(*args)

def MidiFile_writeVariableLength(*args):
  """MidiFile_writeVariableLength(std::ostream & stream, int value)"""
  return _CsoundAC.MidiFile_writeVariableLength(*args)

def MidiFile_toInt(*args):
  """MidiFile_toInt(int c1, int c2, int c3, int c4) -> int"""
  return _CsoundAC.MidiFile_toInt(*args)

def MidiFile_toShort(*args):
  """MidiFile_toShort(int c1, int c2) -> short"""
  return _CsoundAC.MidiFile_toShort(*args)

def MidiFile_readInt(*args):
  """MidiFile_readInt(std::istream & stream) -> int"""
  return _CsoundAC.MidiFile_readInt(*args)

def MidiFile_writeInt(*args):
  """MidiFile_writeInt(std::ostream & stream, int value)"""
  return _CsoundAC.MidiFile_writeInt(*args)

def MidiFile_readShort(*args):
  """MidiFile_readShort(std::istream & stream) -> short"""
  return _CsoundAC.MidiFile_readShort(*args)

def MidiFile_writeShort(*args):
  """MidiFile_writeShort(std::ostream & stream, short value)"""
  return _CsoundAC.MidiFile_writeShort(*args)

def MidiFile_chunkName(*args):
  """MidiFile_chunkName(int a, int b, int c, int d) -> int"""
  return _CsoundAC.MidiFile_chunkName(*args)


def __lt__(*args):
  """
    __lt__(Event a, Event b) -> bool
    __lt__(MidiEvent a, MidiEvent b) -> bool
    """
  return _CsoundAC.__lt__(*args)
class MidiEventComparator(_object):
    """Proxy of C++ csound::MidiEventComparator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiEventComparator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MidiEventComparator, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(MidiEventComparator self, MidiEvent a, MidiEvent b) -> bool"""
        return _CsoundAC.MidiEventComparator___call__(self, *args)

    def __init__(self): 
        """__init__(csound::MidiEventComparator self) -> MidiEventComparator"""
        this = _CsoundAC.new_MidiEventComparator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MidiEventComparator
    __del__ = lambda self : None;
MidiEventComparator_swigregister = _CsoundAC.MidiEventComparator_swigregister
MidiEventComparator_swigregister(MidiEventComparator)

class Score(EventVector):
    """Proxy of C++ csound::Score class"""
    __swig_setmethods__ = {}
    for _s in [EventVector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Score, name, value)
    __swig_getmethods__ = {}
    for _s in [EventVector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Score, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scaleTargetMinima"] = _CsoundAC.Score_scaleTargetMinima_set
    __swig_getmethods__["scaleTargetMinima"] = _CsoundAC.Score_scaleTargetMinima_get
    if _newclass:scaleTargetMinima = _swig_property(_CsoundAC.Score_scaleTargetMinima_get, _CsoundAC.Score_scaleTargetMinima_set)
    __swig_setmethods__["rescaleMinima"] = _CsoundAC.Score_rescaleMinima_set
    __swig_getmethods__["rescaleMinima"] = _CsoundAC.Score_rescaleMinima_get
    if _newclass:rescaleMinima = _swig_property(_CsoundAC.Score_rescaleMinima_get, _CsoundAC.Score_rescaleMinima_set)
    __swig_setmethods__["scaleTargetRanges"] = _CsoundAC.Score_scaleTargetRanges_set
    __swig_getmethods__["scaleTargetRanges"] = _CsoundAC.Score_scaleTargetRanges_get
    if _newclass:scaleTargetRanges = _swig_property(_CsoundAC.Score_scaleTargetRanges_get, _CsoundAC.Score_scaleTargetRanges_set)
    __swig_setmethods__["rescaleRanges"] = _CsoundAC.Score_rescaleRanges_set
    __swig_getmethods__["rescaleRanges"] = _CsoundAC.Score_rescaleRanges_get
    if _newclass:rescaleRanges = _swig_property(_CsoundAC.Score_rescaleRanges_get, _CsoundAC.Score_rescaleRanges_set)
    __swig_setmethods__["scaleActualMinima"] = _CsoundAC.Score_scaleActualMinima_set
    __swig_getmethods__["scaleActualMinima"] = _CsoundAC.Score_scaleActualMinima_get
    if _newclass:scaleActualMinima = _swig_property(_CsoundAC.Score_scaleActualMinima_get, _CsoundAC.Score_scaleActualMinima_set)
    __swig_setmethods__["scaleActualRanges"] = _CsoundAC.Score_scaleActualRanges_set
    __swig_getmethods__["scaleActualRanges"] = _CsoundAC.Score_scaleActualRanges_get
    if _newclass:scaleActualRanges = _swig_property(_CsoundAC.Score_scaleActualRanges_get, _CsoundAC.Score_scaleActualRanges_set)
    __swig_setmethods__["midifile"] = _CsoundAC.Score_midifile_set
    __swig_getmethods__["midifile"] = _CsoundAC.Score_midifile_get
    if _newclass:midifile = _swig_property(_CsoundAC.Score_midifile_get, _CsoundAC.Score_midifile_set)
    __swig_setmethods__["reassignments"] = _CsoundAC.Score_reassignments_set
    __swig_getmethods__["reassignments"] = _CsoundAC.Score_reassignments_get
    if _newclass:reassignments = _swig_property(_CsoundAC.Score_reassignments_get, _CsoundAC.Score_reassignments_set)
    __swig_setmethods__["gains"] = _CsoundAC.Score_gains_set
    __swig_getmethods__["gains"] = _CsoundAC.Score_gains_get
    if _newclass:gains = _swig_property(_CsoundAC.Score_gains_get, _CsoundAC.Score_gains_set)
    __swig_setmethods__["pans"] = _CsoundAC.Score_pans_set
    __swig_getmethods__["pans"] = _CsoundAC.Score_pans_get
    if _newclass:pans = _swig_property(_CsoundAC.Score_pans_get, _CsoundAC.Score_pans_set)
    def __init__(self): 
        """__init__(csound::Score self) -> Score"""
        this = _CsoundAC.new_Score()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Score
    __del__ = lambda self : None;
    def initialize(self):
        """initialize(Score self)"""
        return _CsoundAC.Score_initialize(self)

    def append(self, *args):
        """
        append(Score self, Event event)
        append(Score self, double time, double duration, double status, double channel, double key, double velocity, 
            double phase=0, double pan=0, double depth=0, double height=0, double pitches=4095)
        append(Score self, double time, double duration, double status, double channel, double key, double velocity, 
            double phase=0, double pan=0, double depth=0, double height=0)
        append(Score self, double time, double duration, double status, double channel, double key, double velocity, 
            double phase=0, double pan=0, double depth=0)
        append(Score self, double time, double duration, double status, double channel, double key, double velocity, 
            double phase=0, double pan=0)
        append(Score self, double time, double duration, double status, double channel, double key, double velocity, 
            double phase=0)
        append(Score self, double time, double duration, double status, double channel, double key, double velocity)
        """
        return _CsoundAC.Score_append(self, *args)

    def remove(self, *args):
        """remove(Score self, size_t index)"""
        return _CsoundAC.Score_remove(self, *args)

    def load(self, *args):
        """
        load(Score self, std::string filename)
        load(Score self, std::istream & stream)
        """
        return _CsoundAC.Score_load(self, *args)

    def save(self, *args):
        """
        save(Score self, std::string filename)
        save(Score self, std::ostream & stream)
        """
        return _CsoundAC.Score_save(self, *args)

    def getScale(*args):
        """
        getScale(EventVector score, int dimension, size_t beginAt, size_t endAt, double & minimum, 
            double & range)
        """
        return _CsoundAC.Score_getScale(*args)

    if _newclass:getScale = staticmethod(getScale)
    __swig_getmethods__["getScale"] = lambda x: getScale
    def setScale(*args):
        """
        setScale(EventVector score, int dimension, bool rescaleMinimum, bool rescaleRange, size_t beginAt, 
            size_t endAt, double targetMinimum, double targetRange)
        """
        return _CsoundAC.Score_setScale(*args)

    if _newclass:setScale = staticmethod(setScale)
    __swig_getmethods__["setScale"] = lambda x: setScale
    def findScale(self):
        """findScale(Score self)"""
        return _CsoundAC.Score_findScale(self)

    def sort(self):
        """sort(Score self)"""
        return _CsoundAC.Score_sort(self)

    def dump(self, *args):
        """dump(Score self, std::ostream & stream)"""
        return _CsoundAC.Score_dump(self, *args)

    def toString(self):
        """toString(Score self) -> std::string"""
        return _CsoundAC.Score_toString(self)

    def getDuration(self):
        """getDuration(Score self) -> double"""
        return _CsoundAC.Score_getDuration(self)

    def rescale(self, *args):
        """
        rescale(Score self)
        rescale(Score self, Event event)
        rescale(Score self, int dimension, bool rescaleMinimum, double minimum, bool rescaleRange=False, double range=0.0)
        rescale(Score self, int dimension, bool rescaleMinimum, double minimum, bool rescaleRange=False)
        rescale(Score self, int dimension, bool rescaleMinimum, double minimum)
        """
        return _CsoundAC.Score_rescale(self, *args)

    def getCsoundScore(self, tonesPerOctave=12.0, conformPitches=False):
        """
        getCsoundScore(Score self, double tonesPerOctave=12.0, bool conformPitches=False) -> std::string
        getCsoundScore(Score self, double tonesPerOctave=12.0) -> std::string
        getCsoundScore(Score self) -> std::string
        """
        return _CsoundAC.Score_getCsoundScore(self, tonesPerOctave, conformPitches)

    def arrange(self, *args):
        """
        arrange(Score self, int oldInstrumentNumber, int newInstrumentNumber)
        arrange(Score self, int oldInstrumentNumber, int newInstrumentNumber, double gain)
        arrange(Score self, int oldInstrumentNumber, int newInstrumentNumber, double gain, double pan)
        """
        return _CsoundAC.Score_arrange(self, *args)

    def removeArrangement(self):
        """removeArrangement(Score self)"""
        return _CsoundAC.Score_removeArrangement(self)

    def getPitches(self, *args):
        """
        getPitches(Score self, size_t begin, size_t end, size_t divisionsPerOctave=12) -> DoubleVector
        getPitches(Score self, size_t begin, size_t end) -> DoubleVector
        """
        return _CsoundAC.Score_getPitches(self, *args)

    def setPitches(self, *args):
        """setPitches(Score self, size_t begin, size_t end, DoubleVector pitches)"""
        return _CsoundAC.Score_setPitches(self, *args)

    def setPitchClassSet(self, *args):
        """
        setPitchClassSet(Score self, size_t begin, size_t end, DoubleVector pcs, size_t divisionsPerOctave=12)
        setPitchClassSet(Score self, size_t begin, size_t end, DoubleVector pcs)
        """
        return _CsoundAC.Score_setPitchClassSet(self, *args)

    def getPTV(self, *args):
        """
        getPTV(Score self, size_t begin, size_t end, double lowest, double range, size_t divisionsPerOctave=12) -> DoubleVector
        getPTV(Score self, size_t begin, size_t end, double lowest, double range) -> DoubleVector
        """
        return _CsoundAC.Score_getPTV(self, *args)

    def setPTV(self, *args):
        """
        setPTV(Score self, size_t begin, size_t end, double prime, double transposition, double voicing, double lowest, 
            double range, size_t divisionsPerOctave=12)
        setPTV(Score self, size_t begin, size_t end, double prime, double transposition, double voicing, double lowest, 
            double range)
        """
        return _CsoundAC.Score_setPTV(self, *args)

    def getPT(self, *args):
        """
        getPT(Score self, size_t begin, size_t end, double lowest, double range, size_t divisionsPerOctave=12) -> DoubleVector
        getPT(Score self, size_t begin, size_t end, double lowest, double range) -> DoubleVector
        """
        return _CsoundAC.Score_getPT(self, *args)

    def setPT(self, *args):
        """
        setPT(Score self, size_t begin, size_t end, double prime, double transposition, double lowest, double range, 
            size_t divisionsPerOctave=12)
        setPT(Score self, size_t begin, size_t end, double prime, double transposition, double lowest, double range)
        """
        return _CsoundAC.Score_setPT(self, *args)

    def voicelead(self, *args):
        """
        voicelead(Score self, size_t beginSource, size_t endSource, size_t beginTarget, size_t endTarget, double lowest, 
            double range, bool avoidParallelFifths, size_t divisionsPerOctave=12)
        voicelead(Score self, size_t beginSource, size_t endSource, size_t beginTarget, size_t endTarget, double lowest, 
            double range, bool avoidParallelFifths)
        voicelead(Score self, size_t beginSource, size_t endSource, size_t beginTarget, size_t endTarget, DoubleVector targetPitches, 
            double lowest, double range, bool avoidParallelFifths, 
            size_t divisionsPerOctave=12)
        voicelead(Score self, size_t beginSource, size_t endSource, size_t beginTarget, size_t endTarget, DoubleVector targetPitches, 
            double lowest, double range, bool avoidParallelFifths)
        """
        return _CsoundAC.Score_voicelead(self, *args)

    def indexAtTime(self, *args):
        """indexAtTime(Score self, double time) -> int"""
        return _CsoundAC.Score_indexAtTime(self, *args)

    def indexAfterTime(self, *args):
        """indexAfterTime(Score self, double time) -> int"""
        return _CsoundAC.Score_indexAfterTime(self, *args)

    def indexToTime(self, *args):
        """indexToTime(Score self, size_t index) -> double"""
        return _CsoundAC.Score_indexToTime(self, *args)

    def getVoicing(self, *args):
        """
        getVoicing(Score self, size_t begin, size_t end, size_t divisionsPerOctave=12) -> DoubleVector
        getVoicing(Score self, size_t begin, size_t end) -> DoubleVector
        """
        return _CsoundAC.Score_getVoicing(self, *args)

    def setVoicing(self, *args):
        """
        setVoicing(Score self, size_t begin, size_t end, DoubleVector voicing, double range, size_t divisionsPerOctave=12)
        setVoicing(Score self, size_t begin, size_t end, DoubleVector voicing, double range)
        """
        return _CsoundAC.Score_setVoicing(self, *args)

    def setK(self, *args):
        """setK(Score self, size_t priorBegin, size_t begin, size_t end, double base, double range)"""
        return _CsoundAC.Score_setK(self, *args)

    def setKV(self, *args):
        """setKV(Score self, size_t priorBegin, size_t begin, size_t end, double V, double base, double range)"""
        return _CsoundAC.Score_setKV(self, *args)

    def setKL(self, *args):
        """
        setKL(Score self, size_t priorBegin, size_t begin, size_t end, double base, double range, bool avoidParallels=True)
        setKL(Score self, size_t priorBegin, size_t begin, size_t end, double base, double range)
        """
        return _CsoundAC.Score_setKL(self, *args)

    def setQ(self, *args):
        """
        setQ(Score self, size_t priorBegin, size_t begin, size_t end, double Q, DoubleVector context, double base, 
            double range)
        """
        return _CsoundAC.Score_setQ(self, *args)

    def setQV(self, *args):
        """
        setQV(Score self, size_t priorBegin, size_t begin, size_t end, double Q, DoubleVector context, double V, 
            double base, double range)
        """
        return _CsoundAC.Score_setQV(self, *args)

    def setQL(self, *args):
        """
        setQL(Score self, size_t priorBegin, size_t begin, size_t end, double Q, DoubleVector context, double base, 
            double range, bool avoidParallels=True)
        setQL(Score self, size_t priorBegin, size_t begin, size_t end, double Q, DoubleVector context, double base, 
            double range)
        """
        return _CsoundAC.Score_setQL(self, *args)

    def setDuration(self, *args):
        """setDuration(Score self, double targetDuration)"""
        return _CsoundAC.Score_setDuration(self, *args)

    def tieOverlappingNotes(self, considerInstrumentNumber=False):
        """
        tieOverlappingNotes(Score self, bool considerInstrumentNumber=False)
        tieOverlappingNotes(Score self)
        """
        return _CsoundAC.Score_tieOverlappingNotes(self, considerInstrumentNumber)

    def temper(self, tonesPerOctave=12.0):
        """
        temper(Score self, double tonesPerOctave=12.0)
        temper(Score self)
        """
        return _CsoundAC.Score_temper(self, tonesPerOctave)

Score_swigregister = _CsoundAC.Score_swigregister
Score_swigregister(Score)

def Score_getScale(*args):
  """
    Score_getScale(EventVector score, int dimension, size_t beginAt, size_t endAt, double & minimum, 
        double & range)
    """
  return _CsoundAC.Score_getScale(*args)

def Score_setScale(*args):
  """
    Score_setScale(EventVector score, int dimension, bool rescaleMinimum, bool rescaleRange, size_t beginAt, 
        size_t endAt, double targetMinimum, double targetRange)
    """
  return _CsoundAC.Score_setScale(*args)

class Composition(_object):
    """Proxy of C++ csound::Composition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Composition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Composition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Composition self) -> Composition"""
        this = _CsoundAC.new_Composition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Composition
    __del__ = lambda self : None;
    def getOutputDirectory(self):
        """getOutputDirectory(Composition self) -> std::string"""
        return _CsoundAC.Composition_getOutputDirectory(self)

    def setOutputDirectory(self, *args):
        """setOutputDirectory(Composition self, std::string directory)"""
        return _CsoundAC.Composition_setOutputDirectory(self, *args)

    def getFilename(self):
        """getFilename(Composition self) -> std::string"""
        return _CsoundAC.Composition_getFilename(self)

    def setFilename(self, *args):
        """setFilename(Composition self, std::string filename)"""
        return _CsoundAC.Composition_setFilename(self, *args)

    def getFilePathname(self):
        """getFilePathname(Composition self) -> std::string"""
        return _CsoundAC.Composition_getFilePathname(self)

    def generateFilename():
        """generateFilename() -> std::string"""
        return _CsoundAC.Composition_generateFilename()

    if _newclass:generateFilename = staticmethod(generateFilename)
    __swig_getmethods__["generateFilename"] = lambda x: generateFilename
    def makeTimestamp():
        """makeTimestamp() -> std::string"""
        return _CsoundAC.Composition_makeTimestamp()

    if _newclass:makeTimestamp = staticmethod(makeTimestamp)
    __swig_getmethods__["makeTimestamp"] = lambda x: makeTimestamp
    def getTimestamp(self):
        """getTimestamp(Composition self) -> std::string"""
        return _CsoundAC.Composition_getTimestamp(self)

    def getOutputSoundfileName(self):
        """getOutputSoundfileName(Composition self) -> std::string"""
        return _CsoundAC.Composition_getOutputSoundfileName(self)

    def getNormalizedSoundfileName(self):
        """getNormalizedSoundfileName(Composition self) -> std::string"""
        return _CsoundAC.Composition_getNormalizedSoundfileName(self)

    def getCdSoundfileName(self):
        """getCdSoundfileName(Composition self) -> std::string"""
        return _CsoundAC.Composition_getCdSoundfileName(self)

    def getMp3SoundfileName(self):
        """getMp3SoundfileName(Composition self) -> std::string"""
        return _CsoundAC.Composition_getMp3SoundfileName(self)

    def getMidiFilename(self):
        """getMidiFilename(Composition self) -> std::string"""
        return _CsoundAC.Composition_getMidiFilename(self)

    def getMusicXmlFilename(self):
        """getMusicXmlFilename(Composition self) -> std::string"""
        return _CsoundAC.Composition_getMusicXmlFilename(self)

    def getFomusFilename(self):
        """getFomusFilename(Composition self) -> std::string"""
        return _CsoundAC.Composition_getFomusFilename(self)

    def getLilypondFilename(self):
        """getLilypondFilename(Composition self) -> std::string"""
        return _CsoundAC.Composition_getLilypondFilename(self)

    def generate(self):
        """generate(Composition self) -> int"""
        return _CsoundAC.Composition_generate(self)

    def render(self):
        """render(Composition self) -> int"""
        return _CsoundAC.Composition_render(self)

    def renderAll(self):
        """renderAll(Composition self) -> int"""
        return _CsoundAC.Composition_renderAll(self)

    def perform(self):
        """perform(Composition self) -> int"""
        return _CsoundAC.Composition_perform(self)

    def performMaster(self):
        """performMaster(Composition self) -> int"""
        return _CsoundAC.Composition_performMaster(self)

    def translateMaster(self):
        """translateMaster(Composition self) -> int"""
        return _CsoundAC.Composition_translateMaster(self)

    def performAll(self):
        """performAll(Composition self) -> int"""
        return _CsoundAC.Composition_performAll(self)

    def normalizeOutputSoundfile(self, *args):
        """
        normalizeOutputSoundfile(Composition self, double levelDb=-3.0) -> int
        normalizeOutputSoundfile(Composition self) -> int
        """
        return _CsoundAC.Composition_normalizeOutputSoundfile(self, *args)

    def translateToCdAudio(self, *args):
        """
        translateToCdAudio(Composition self, double levelDb=-3.0) -> int
        translateToCdAudio(Composition self) -> int
        """
        return _CsoundAC.Composition_translateToCdAudio(self, *args)

    def translateToMp3(self, *args):
        """
        translateToMp3(Composition self, double bitrate=256.01, double levelDb=-3.0) -> int
        translateToMp3(Composition self, double bitrate=256.01) -> int
        translateToMp3(Composition self) -> int
        """
        return _CsoundAC.Composition_translateToMp3(self, *args)

    def clear(self):
        """clear(Composition self)"""
        return _CsoundAC.Composition_clear(self)

    def getScore(self):
        """getScore(Composition self) -> Score"""
        return _CsoundAC.Composition_getScore(self)

    def write(self, *args):
        """write(Composition self, char const * text)"""
        return _CsoundAC.Composition_write(self, *args)

    def setTonesPerOctave(self, *args):
        """setTonesPerOctave(Composition self, double tonesPerOctave)"""
        return _CsoundAC.Composition_setTonesPerOctave(self, *args)

    def getTonesPerOctave(self):
        """getTonesPerOctave(Composition self) -> double"""
        return _CsoundAC.Composition_getTonesPerOctave(self)

    def setConformPitches(self, *args):
        """setConformPitches(Composition self, bool conformPitches)"""
        return _CsoundAC.Composition_setConformPitches(self, *args)

    def getConformPitches(self):
        """getConformPitches(Composition self) -> bool"""
        return _CsoundAC.Composition_getConformPitches(self)

    def translateToNotation(self, *args):
        """
        translateToNotation(Composition self, std::vector< std::string,std::allocator< std::string > > const partNames=std::vector< std::string >(), 
            std::string header="") -> int
        translateToNotation(Composition self, std::vector< std::string,std::allocator< std::string > > const partNames=std::vector< std::string >()) -> int
        translateToNotation(Composition self) -> int
        """
        return _CsoundAC.Composition_translateToNotation(self, *args)

    def getArtist(self):
        """getArtist(Composition self) -> std::string"""
        return _CsoundAC.Composition_getArtist(self)

    def setArtist(self, *args):
        """setArtist(Composition self, std::string value)"""
        return _CsoundAC.Composition_setArtist(self, *args)

    def getTitle(self):
        """getTitle(Composition self) -> std::string"""
        return _CsoundAC.Composition_getTitle(self)

    def setTitle(self, *args):
        """setTitle(Composition self, std::string value)"""
        return _CsoundAC.Composition_setTitle(self, *args)

    def getCopyright(self):
        """getCopyright(Composition self) -> std::string"""
        return _CsoundAC.Composition_getCopyright(self)

    def setCopyright(self, *args):
        """setCopyright(Composition self, std::string value)"""
        return _CsoundAC.Composition_setCopyright(self, *args)

    def getAlbum(self):
        """getAlbum(Composition self) -> std::string"""
        return _CsoundAC.Composition_getAlbum(self)

    def setAlbum(self, *args):
        """setAlbum(Composition self, std::string value)"""
        return _CsoundAC.Composition_setAlbum(self, *args)

    def getLicense(self):
        """getLicense(Composition self) -> std::string"""
        return _CsoundAC.Composition_getLicense(self)

    def setLicense(self, *args):
        """setLicense(Composition self, std::string value)"""
        return _CsoundAC.Composition_setLicense(self, *args)

    def tagFile(self, *args):
        """tagFile(Composition self, std::string filename) -> int"""
        return _CsoundAC.Composition_tagFile(self, *args)

    def processArgv(self, *args):
        """processArgv(Composition self, int argc, char const ** argv) -> int"""
        return _CsoundAC.Composition_processArgv(self, *args)

    def processArgs(self, *args):
        """processArgs(Composition self, std::vector< std::string,std::allocator< std::string > > const & args) -> int"""
        return _CsoundAC.Composition_processArgs(self, *args)

    def setOutputSoundfileName(self, *args):
        """setOutputSoundfileName(Composition self, std::string name)"""
        return _CsoundAC.Composition_setOutputSoundfileName(self, *args)

    def clearOutputSoundfileName(self):
        """clearOutputSoundfileName(Composition self)"""
        return _CsoundAC.Composition_clearOutputSoundfileName(self)

Composition_swigregister = _CsoundAC.Composition_swigregister
Composition_swigregister(Composition)

def Composition_generateFilename():
  """Composition_generateFilename() -> std::string"""
  return _CsoundAC.Composition_generateFilename()

def Composition_makeTimestamp():
  """Composition_makeTimestamp() -> std::string"""
  return _CsoundAC.Composition_makeTimestamp()

class NodeVector(_object):
    """Proxy of C++ std::vector<(p.csound::Node)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(NodeVector self) -> SwigPyIterator"""
        return _CsoundAC.NodeVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(NodeVector self) -> bool"""
        return _CsoundAC.NodeVector___nonzero__(self)

    def __bool__(self):
        """__bool__(NodeVector self) -> bool"""
        return _CsoundAC.NodeVector___bool__(self)

    def __len__(self):
        """__len__(NodeVector self) -> std::vector< csound::Node * >::size_type"""
        return _CsoundAC.NodeVector___len__(self)

    def pop(self):
        """pop(NodeVector self) -> Node"""
        return _CsoundAC.NodeVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(NodeVector self, std::vector< csound::Node * >::difference_type i, std::vector< csound::Node * >::difference_type j) -> NodeVector"""
        return _CsoundAC.NodeVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(NodeVector self, std::vector< csound::Node * >::difference_type i, std::vector< csound::Node * >::difference_type j, 
            NodeVector v=std::vector< csound::Node *,std::allocator< csound::Node * > >())
        __setslice__(NodeVector self, std::vector< csound::Node * >::difference_type i, std::vector< csound::Node * >::difference_type j)
        """
        return _CsoundAC.NodeVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(NodeVector self, std::vector< csound::Node * >::difference_type i, std::vector< csound::Node * >::difference_type j)"""
        return _CsoundAC.NodeVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(NodeVector self, std::vector< csound::Node * >::difference_type i)
        __delitem__(NodeVector self, PySliceObject * slice)
        """
        return _CsoundAC.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(NodeVector self, PySliceObject * slice) -> NodeVector
        __getitem__(NodeVector self, std::vector< csound::Node * >::difference_type i) -> Node
        """
        return _CsoundAC.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(NodeVector self, PySliceObject * slice, NodeVector v)
        __setitem__(NodeVector self, PySliceObject * slice)
        __setitem__(NodeVector self, std::vector< csound::Node * >::difference_type i, Node x)
        """
        return _CsoundAC.NodeVector___setitem__(self, *args)

    def append(self, *args):
        """append(NodeVector self, Node x)"""
        return _CsoundAC.NodeVector_append(self, *args)

    def empty(self):
        """empty(NodeVector self) -> bool"""
        return _CsoundAC.NodeVector_empty(self)

    def size(self):
        """size(NodeVector self) -> std::vector< csound::Node * >::size_type"""
        return _CsoundAC.NodeVector_size(self)

    def clear(self):
        """clear(NodeVector self)"""
        return _CsoundAC.NodeVector_clear(self)

    def swap(self, *args):
        """swap(NodeVector self, NodeVector v)"""
        return _CsoundAC.NodeVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(NodeVector self) -> std::vector< csound::Node * >::allocator_type"""
        return _CsoundAC.NodeVector_get_allocator(self)

    def begin(self):
        """begin(NodeVector self) -> std::vector< csound::Node * >::iterator"""
        return _CsoundAC.NodeVector_begin(self)

    def end(self):
        """end(NodeVector self) -> std::vector< csound::Node * >::iterator"""
        return _CsoundAC.NodeVector_end(self)

    def rbegin(self):
        """rbegin(NodeVector self) -> std::vector< csound::Node * >::reverse_iterator"""
        return _CsoundAC.NodeVector_rbegin(self)

    def rend(self):
        """rend(NodeVector self) -> std::vector< csound::Node * >::reverse_iterator"""
        return _CsoundAC.NodeVector_rend(self)

    def pop_back(self):
        """pop_back(NodeVector self)"""
        return _CsoundAC.NodeVector_pop_back(self)

    def erase(self, *args):
        """
        erase(NodeVector self, std::vector< csound::Node * >::iterator pos) -> std::vector< csound::Node * >::iterator
        erase(NodeVector self, std::vector< csound::Node * >::iterator first, std::vector< csound::Node * >::iterator last) -> std::vector< csound::Node * >::iterator
        """
        return _CsoundAC.NodeVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.csound::Node)> self) -> NodeVector
        __init__(std::vector<(p.csound::Node)> self, NodeVector arg2) -> NodeVector
        __init__(std::vector<(p.csound::Node)> self, std::vector< csound::Node * >::size_type size) -> NodeVector
        __init__(std::vector<(p.csound::Node)> self, std::vector< csound::Node * >::size_type size, Node value) -> NodeVector
        """
        this = _CsoundAC.new_NodeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(NodeVector self, Node x)"""
        return _CsoundAC.NodeVector_push_back(self, *args)

    def front(self):
        """front(NodeVector self) -> Node"""
        return _CsoundAC.NodeVector_front(self)

    def back(self):
        """back(NodeVector self) -> Node"""
        return _CsoundAC.NodeVector_back(self)

    def assign(self, *args):
        """assign(NodeVector self, std::vector< csound::Node * >::size_type n, Node x)"""
        return _CsoundAC.NodeVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(NodeVector self, std::vector< csound::Node * >::size_type new_size)
        resize(NodeVector self, std::vector< csound::Node * >::size_type new_size, Node x)
        """
        return _CsoundAC.NodeVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(NodeVector self, std::vector< csound::Node * >::iterator pos, Node x) -> std::vector< csound::Node * >::iterator
        insert(NodeVector self, std::vector< csound::Node * >::iterator pos, std::vector< csound::Node * >::size_type n, 
            Node x)
        """
        return _CsoundAC.NodeVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(NodeVector self, std::vector< csound::Node * >::size_type n)"""
        return _CsoundAC.NodeVector_reserve(self, *args)

    def capacity(self):
        """capacity(NodeVector self) -> std::vector< csound::Node * >::size_type"""
        return _CsoundAC.NodeVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_NodeVector
    __del__ = lambda self : None;
NodeVector_swigregister = _CsoundAC.NodeVector_swigregister
NodeVector_swigregister(NodeVector)

class Node(_object):
    """Proxy of C++ csound::Node class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["children"] = _CsoundAC.Node_children_set
    __swig_getmethods__["children"] = _CsoundAC.Node_children_get
    if _newclass:children = _swig_property(_CsoundAC.Node_children_get, _CsoundAC.Node_children_set)
    def __init__(self): 
        """__init__(csound::Node self) -> Node"""
        if self.__class__ == Node:
            _self = None
        else:
            _self = self
        this = _CsoundAC.new_Node(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Node
    __del__ = lambda self : None;
    def getLocalCoordinates(self):
        """getLocalCoordinates(Node self) -> Eigen::MatrixXd"""
        return _CsoundAC.Node_getLocalCoordinates(self)

    def traverse(self, *args):
        """traverse(Node self, Eigen::MatrixXd const & globalCoordinates, Score score) -> Eigen::MatrixXd"""
        return _CsoundAC.Node_traverse(self, *args)

    def produceOrTransform(self, *args):
        """produceOrTransform(Node self, Score collectingScore, size_t beginAt, size_t endAt, Eigen::MatrixXd const & compositeCordinates)"""
        return _CsoundAC.Node_produceOrTransform(self, *args)

    def createTransform(self):
        """createTransform(Node self) -> Eigen::MatrixXd"""
        return _CsoundAC.Node_createTransform(self)

    def clear(self):
        """clear(Node self)"""
        return _CsoundAC.Node_clear(self)

    def element(self, *args):
        """element(Node self, size_t row, size_t column) -> double &"""
        return _CsoundAC.Node_element(self, *args)

    def setElement(self, *args):
        """setElement(Node self, size_t row, size_t column, double value)"""
        return _CsoundAC.Node_setElement(self, *args)

    def addChild(self, *args):
        """addChild(Node self, Node node)"""
        return _CsoundAC.Node_addChild(self, *args)

    def __disown__(self):
        self.this.disown()
        _CsoundAC.disown_Node(self)
        return weakref_proxy(self)
Node_swigregister = _CsoundAC.Node_swigregister
Node_swigregister(Node)

class RemoveDuplicates(Node):
    """Proxy of C++ csound::RemoveDuplicates class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoveDuplicates, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RemoveDuplicates, name)
    __repr__ = _swig_repr
    def produceOrTransform(self, *args):
        """produceOrTransform(RemoveDuplicates self, Score score, size_t beginAt, size_t endAt, Eigen::MatrixXd const & compositeCordinates)"""
        return _CsoundAC.RemoveDuplicates_produceOrTransform(self, *args)

    def __init__(self): 
        """__init__(csound::RemoveDuplicates self) -> RemoveDuplicates"""
        this = _CsoundAC.new_RemoveDuplicates()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_RemoveDuplicates
    __del__ = lambda self : None;
RemoveDuplicates_swigregister = _CsoundAC.RemoveDuplicates_swigregister
RemoveDuplicates_swigregister(RemoveDuplicates)

class Counterpoint(_object):
    """Proxy of C++ Counterpoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Counterpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Counterpoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["messageCallback"] = _CsoundAC.Counterpoint_messageCallback_set
    __swig_getmethods__["messageCallback"] = _CsoundAC.Counterpoint_messageCallback_get
    if _newclass:messageCallback = _swig_property(_CsoundAC.Counterpoint_messageCallback_get, _CsoundAC.Counterpoint_messageCallback_set)
    def message(self, *args):
        """message(Counterpoint self, char const * format)"""
        return _CsoundAC.Counterpoint_message(self, *args)

    __swig_setmethods__["MostNotes"] = _CsoundAC.Counterpoint_MostNotes_set
    __swig_getmethods__["MostNotes"] = _CsoundAC.Counterpoint_MostNotes_get
    if _newclass:MostNotes = _swig_property(_CsoundAC.Counterpoint_MostNotes_get, _CsoundAC.Counterpoint_MostNotes_set)
    __swig_setmethods__["MostVoices"] = _CsoundAC.Counterpoint_MostVoices_set
    __swig_getmethods__["MostVoices"] = _CsoundAC.Counterpoint_MostVoices_get
    if _newclass:MostVoices = _swig_property(_CsoundAC.Counterpoint_MostVoices_get, _CsoundAC.Counterpoint_MostVoices_set)
    MostNotes_ = _CsoundAC.Counterpoint_MostNotes_
    MostVoices_ = _CsoundAC.Counterpoint_MostVoices_
    __swig_setmethods__["randx"] = _CsoundAC.Counterpoint_randx_set
    __swig_getmethods__["randx"] = _CsoundAC.Counterpoint_randx_get
    if _newclass:randx = _swig_property(_CsoundAC.Counterpoint_randx_get, _CsoundAC.Counterpoint_randx_set)
    __swig_setmethods__["Ctrpt"] = _CsoundAC.Counterpoint_Ctrpt_set
    __swig_getmethods__["Ctrpt"] = _CsoundAC.Counterpoint_Ctrpt_get
    if _newclass:Ctrpt = _swig_property(_CsoundAC.Counterpoint_Ctrpt_get, _CsoundAC.Counterpoint_Ctrpt_set)
    __swig_setmethods__["Onset"] = _CsoundAC.Counterpoint_Onset_set
    __swig_getmethods__["Onset"] = _CsoundAC.Counterpoint_Onset_get
    if _newclass:Onset = _swig_property(_CsoundAC.Counterpoint_Onset_get, _CsoundAC.Counterpoint_Onset_set)
    __swig_setmethods__["Dur"] = _CsoundAC.Counterpoint_Dur_set
    __swig_getmethods__["Dur"] = _CsoundAC.Counterpoint_Dur_get
    if _newclass:Dur = _swig_property(_CsoundAC.Counterpoint_Dur_get, _CsoundAC.Counterpoint_Dur_set)
    __swig_setmethods__["TotalNotes"] = _CsoundAC.Counterpoint_TotalNotes_set
    __swig_getmethods__["TotalNotes"] = _CsoundAC.Counterpoint_TotalNotes_get
    if _newclass:TotalNotes = _swig_property(_CsoundAC.Counterpoint_TotalNotes_get, _CsoundAC.Counterpoint_TotalNotes_set)
    __swig_setmethods__["BestFit"] = _CsoundAC.Counterpoint_BestFit_set
    __swig_getmethods__["BestFit"] = _CsoundAC.Counterpoint_BestFit_get
    if _newclass:BestFit = _swig_property(_CsoundAC.Counterpoint_BestFit_get, _CsoundAC.Counterpoint_BestFit_set)
    __swig_setmethods__["BestFit1"] = _CsoundAC.Counterpoint_BestFit1_set
    __swig_getmethods__["BestFit1"] = _CsoundAC.Counterpoint_BestFit1_get
    if _newclass:BestFit1 = _swig_property(_CsoundAC.Counterpoint_BestFit1_get, _CsoundAC.Counterpoint_BestFit1_set)
    __swig_setmethods__["BestFit2"] = _CsoundAC.Counterpoint_BestFit2_set
    __swig_getmethods__["BestFit2"] = _CsoundAC.Counterpoint_BestFit2_get
    if _newclass:BestFit2 = _swig_property(_CsoundAC.Counterpoint_BestFit2_get, _CsoundAC.Counterpoint_BestFit2_set)
    __swig_setmethods__["vbs"] = _CsoundAC.Counterpoint_vbs_set
    __swig_getmethods__["vbs"] = _CsoundAC.Counterpoint_vbs_get
    if _newclass:vbs = _swig_property(_CsoundAC.Counterpoint_vbs_get, _CsoundAC.Counterpoint_vbs_set)
    __swig_setmethods__["RhyPat"] = _CsoundAC.Counterpoint_RhyPat_set
    __swig_getmethods__["RhyPat"] = _CsoundAC.Counterpoint_RhyPat_get
    if _newclass:RhyPat = _swig_property(_CsoundAC.Counterpoint_RhyPat_get, _CsoundAC.Counterpoint_RhyPat_set)
    __swig_setmethods__["RhyNotes"] = _CsoundAC.Counterpoint_RhyNotes_set
    __swig_getmethods__["RhyNotes"] = _CsoundAC.Counterpoint_RhyNotes_get
    if _newclass:RhyNotes = _swig_property(_CsoundAC.Counterpoint_RhyNotes_get, _CsoundAC.Counterpoint_RhyNotes_set)
    __swig_setmethods__["Fits"] = _CsoundAC.Counterpoint_Fits_set
    __swig_getmethods__["Fits"] = _CsoundAC.Counterpoint_Fits_get
    if _newclass:Fits = _swig_property(_CsoundAC.Counterpoint_Fits_get, _CsoundAC.Counterpoint_Fits_set)
    def initialize(self, *args):
        """initialize(Counterpoint self, int mostnotes, int mostvoices)"""
        return _CsoundAC.Counterpoint_initialize(self, *args)

    def clear(self):
        """clear(Counterpoint self)"""
        return _CsoundAC.Counterpoint_clear(self)

    def __init__(self): 
        """__init__(Counterpoint self) -> Counterpoint"""
        this = _CsoundAC.new_Counterpoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Counterpoint
    __del__ = lambda self : None;
    def ABS(self, *args):
        """ABS(Counterpoint self, int i) -> int"""
        return _CsoundAC.Counterpoint_ABS(self, *args)

    def MIN(self, *args):
        """MIN(Counterpoint self, int a, int b) -> int"""
        return _CsoundAC.Counterpoint_MIN(self, *args)

    def MAX(self, *args):
        """MAX(Counterpoint self, int a, int b) -> int"""
        return _CsoundAC.Counterpoint_MAX(self, *args)

    def ARRBLT(self, *args):
        """ARRBLT(Counterpoint self, int * dest, int * source, int num)"""
        return _CsoundAC.Counterpoint_ARRBLT(self, *args)

    Unison = _CsoundAC.Counterpoint_Unison
    MinorSecond = _CsoundAC.Counterpoint_MinorSecond
    MajorSecond = _CsoundAC.Counterpoint_MajorSecond
    MinorThird = _CsoundAC.Counterpoint_MinorThird
    MajorThird = _CsoundAC.Counterpoint_MajorThird
    Fourth = _CsoundAC.Counterpoint_Fourth
    Tritone = _CsoundAC.Counterpoint_Tritone
    Fifth = _CsoundAC.Counterpoint_Fifth
    MinorSixth = _CsoundAC.Counterpoint_MinorSixth
    MajorSixth = _CsoundAC.Counterpoint_MajorSixth
    MinorSeventh = _CsoundAC.Counterpoint_MinorSeventh
    MajorSeventh = _CsoundAC.Counterpoint_MajorSeventh
    Octave = _CsoundAC.Counterpoint_Octave
    Aeolian = _CsoundAC.Counterpoint_Aeolian
    Dorian = _CsoundAC.Counterpoint_Dorian
    Phrygian = _CsoundAC.Counterpoint_Phrygian
    Lydian = _CsoundAC.Counterpoint_Lydian
    Mixolydian = _CsoundAC.Counterpoint_Mixolydian
    Ionian = _CsoundAC.Counterpoint_Ionian
    Locrian = _CsoundAC.Counterpoint_Locrian
    def InMode(self, *args):
        """InMode(Counterpoint self, int Pitch, int Mode) -> int"""
        return _CsoundAC.Counterpoint_InMode(self, *args)

    def BadMelody(self, *args):
        """BadMelody(Counterpoint self, int Intv) -> int"""
        return _CsoundAC.Counterpoint_BadMelody(self, *args)

    def ASkip(self, *args):
        """ASkip(Counterpoint self, int Interval) -> int"""
        return _CsoundAC.Counterpoint_ASkip(self, *args)

    def AStep(self, *args):
        """AStep(Counterpoint self, int Interval) -> int"""
        return _CsoundAC.Counterpoint_AStep(self, *args)

    def AThird(self, *args):
        """AThird(Counterpoint self, int Interval) -> int"""
        return _CsoundAC.Counterpoint_AThird(self, *args)

    def ASeventh(self, *args):
        """ASeventh(Counterpoint self, int Interval) -> int"""
        return _CsoundAC.Counterpoint_ASeventh(self, *args)

    def AnOctave(self, *args):
        """AnOctave(Counterpoint self, int Interval) -> int"""
        return _CsoundAC.Counterpoint_AnOctave(self, *args)

    def ATenth(self, *args):
        """ATenth(Counterpoint self, int Interval) -> int"""
        return _CsoundAC.Counterpoint_ATenth(self, *args)

    DirectMotion = _CsoundAC.Counterpoint_DirectMotion
    ContraryMotion = _CsoundAC.Counterpoint_ContraryMotion
    ObliqueMotion = _CsoundAC.Counterpoint_ObliqueMotion
    NoMotion = _CsoundAC.Counterpoint_NoMotion
    def MotionType(self, *args):
        """MotionType(Counterpoint self, int Pitch1, int Pitch2, int Pitch3, int Pitch4) -> int"""
        return _CsoundAC.Counterpoint_MotionType(self, *args)

    def DirectMotionToPerfectConsonance(self, *args):
        """DirectMotionToPerfectConsonance(Counterpoint self, int Pitch1, int Pitch2, int Pitch3, int Pitch4) -> int"""
        return _CsoundAC.Counterpoint_DirectMotionToPerfectConsonance(self, *args)

    def ConsecutiveSkipsInSameDirection(self, *args):
        """ConsecutiveSkipsInSameDirection(Counterpoint self, int Pitch1, int Pitch2, int Pitch3) -> int"""
        return _CsoundAC.Counterpoint_ConsecutiveSkipsInSameDirection(self, *args)

    __swig_setmethods__["LowestSemitone"] = _CsoundAC.Counterpoint_LowestSemitone_set
    __swig_getmethods__["LowestSemitone"] = _CsoundAC.Counterpoint_LowestSemitone_get
    if _newclass:LowestSemitone = _swig_property(_CsoundAC.Counterpoint_LowestSemitone_get, _CsoundAC.Counterpoint_LowestSemitone_set)
    __swig_setmethods__["HighestSemitone"] = _CsoundAC.Counterpoint_HighestSemitone_set
    __swig_getmethods__["HighestSemitone"] = _CsoundAC.Counterpoint_HighestSemitone_get
    if _newclass:HighestSemitone = _swig_property(_CsoundAC.Counterpoint_HighestSemitone_get, _CsoundAC.Counterpoint_HighestSemitone_set)
    def OutOfRange(self, *args):
        """OutOfRange(Counterpoint self, int Pitch) -> int"""
        return _CsoundAC.Counterpoint_OutOfRange(self, *args)

    def ExtremeRange(self, *args):
        """ExtremeRange(Counterpoint self, int Pitch) -> int"""
        return _CsoundAC.Counterpoint_ExtremeRange(self, *args)

    __swig_setmethods__["BasePitch"] = _CsoundAC.Counterpoint_BasePitch_set
    __swig_getmethods__["BasePitch"] = _CsoundAC.Counterpoint_BasePitch_get
    if _newclass:BasePitch = _swig_property(_CsoundAC.Counterpoint_BasePitch_get, _CsoundAC.Counterpoint_BasePitch_set)
    __swig_setmethods__["Mode"] = _CsoundAC.Counterpoint_Mode_set
    __swig_getmethods__["Mode"] = _CsoundAC.Counterpoint_Mode_get
    if _newclass:Mode = _swig_property(_CsoundAC.Counterpoint_Mode_get, _CsoundAC.Counterpoint_Mode_set)
    __swig_setmethods__["TotalTime"] = _CsoundAC.Counterpoint_TotalTime_set
    __swig_getmethods__["TotalTime"] = _CsoundAC.Counterpoint_TotalTime_get
    if _newclass:TotalTime = _swig_property(_CsoundAC.Counterpoint_TotalTime_get, _CsoundAC.Counterpoint_TotalTime_set)
    def Us(self, *args):
        """Us(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_Us(self, *args)

    def LastNote(self, *args):
        """LastNote(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_LastNote(self, *args)

    def FirstNote(self, *args):
        """FirstNote(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_FirstNote(self, *args)

    def NextToLastNote(self, *args):
        """NextToLastNote(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_NextToLastNote(self, *args)

    def SetUs(self, *args):
        """SetUs(Counterpoint self, int n, int p, int v)"""
        return _CsoundAC.Counterpoint_SetUs(self, *args)

    def TotalRange(self, *args):
        """TotalRange(Counterpoint self, int Cn, int Cp, int v) -> int"""
        return _CsoundAC.Counterpoint_TotalRange(self, *args)

    def Cantus(self, *args):
        """Cantus(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_Cantus(self, *args)

    def VIndex(self, *args):
        """VIndex(Counterpoint self, int Time, int VNum) -> int"""
        return _CsoundAC.Counterpoint_VIndex(self, *args)

    def Other(self, *args):
        """Other(Counterpoint self, int Cn, int v, int v1) -> int"""
        return _CsoundAC.Counterpoint_Other(self, *args)

    def Bass(self, *args):
        """Bass(Counterpoint self, int Cn, int v) -> int"""
        return _CsoundAC.Counterpoint_Bass(self, *args)

    WholeNote = _CsoundAC.Counterpoint_WholeNote
    HalfNote = _CsoundAC.Counterpoint_HalfNote
    DottedHalfNote = _CsoundAC.Counterpoint_DottedHalfNote
    QuarterNote = _CsoundAC.Counterpoint_QuarterNote
    DottedQuarterNote = _CsoundAC.Counterpoint_DottedQuarterNote
    EighthNote = _CsoundAC.Counterpoint_EighthNote
    def Beat8(self, *args):
        """Beat8(Counterpoint self, int n) -> int"""
        return _CsoundAC.Counterpoint_Beat8(self, *args)

    def DownBeat(self, *args):
        """DownBeat(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_DownBeat(self, *args)

    def UpBeat(self, *args):
        """UpBeat(Counterpoint self, int n, int v) -> int"""
        return _CsoundAC.Counterpoint_UpBeat(self, *args)

    def PitchRepeats(self, *args):
        """PitchRepeats(Counterpoint self, int Cn, int Cp, int v) -> int"""
        return _CsoundAC.Counterpoint_PitchRepeats(self, *args)

    One = _CsoundAC.Counterpoint_One
    Two = _CsoundAC.Counterpoint_Two
    Three = _CsoundAC.Counterpoint_Three
    Four = _CsoundAC.Counterpoint_Four
    Five = _CsoundAC.Counterpoint_Five
    Six = _CsoundAC.Counterpoint_Six
    Eight = _CsoundAC.Counterpoint_Eight
    def Size(self, *args):
        """Size(Counterpoint self, int MelInt) -> int"""
        return _CsoundAC.Counterpoint_Size(self, *args)

    def TooMuchOfInterval(self, *args):
        """TooMuchOfInterval(Counterpoint self, int Cn, int Cp, int v) -> int"""
        return _CsoundAC.Counterpoint_TooMuchOfInterval(self, *args)

    def ADissonance(self, *args):
        """ADissonance(Counterpoint self, int Interval, int Cn, int Cp, int v, int Species) -> int"""
        return _CsoundAC.Counterpoint_ADissonance(self, *args)

    def Doubled(self, *args):
        """Doubled(Counterpoint self, int Pitch, int Cn, int v) -> int"""
        return _CsoundAC.Counterpoint_Doubled(self, *args)

    infinity = _CsoundAC.Counterpoint_infinity
    Bad = _CsoundAC.Counterpoint_Bad
    RealBad = _CsoundAC.Counterpoint_RealBad
    __swig_setmethods__["UnisonPenalty"] = _CsoundAC.Counterpoint_UnisonPenalty_set
    __swig_getmethods__["UnisonPenalty"] = _CsoundAC.Counterpoint_UnisonPenalty_get
    if _newclass:UnisonPenalty = _swig_property(_CsoundAC.Counterpoint_UnisonPenalty_get, _CsoundAC.Counterpoint_UnisonPenalty_set)
    __swig_setmethods__["DirectToFifthPenalty"] = _CsoundAC.Counterpoint_DirectToFifthPenalty_set
    __swig_getmethods__["DirectToFifthPenalty"] = _CsoundAC.Counterpoint_DirectToFifthPenalty_get
    if _newclass:DirectToFifthPenalty = _swig_property(_CsoundAC.Counterpoint_DirectToFifthPenalty_get, _CsoundAC.Counterpoint_DirectToFifthPenalty_set)
    __swig_setmethods__["DirectToOctavePenalty"] = _CsoundAC.Counterpoint_DirectToOctavePenalty_set
    __swig_getmethods__["DirectToOctavePenalty"] = _CsoundAC.Counterpoint_DirectToOctavePenalty_get
    if _newclass:DirectToOctavePenalty = _swig_property(_CsoundAC.Counterpoint_DirectToOctavePenalty_get, _CsoundAC.Counterpoint_DirectToOctavePenalty_set)
    __swig_setmethods__["ParallelFifthPenalty"] = _CsoundAC.Counterpoint_ParallelFifthPenalty_set
    __swig_getmethods__["ParallelFifthPenalty"] = _CsoundAC.Counterpoint_ParallelFifthPenalty_get
    if _newclass:ParallelFifthPenalty = _swig_property(_CsoundAC.Counterpoint_ParallelFifthPenalty_get, _CsoundAC.Counterpoint_ParallelFifthPenalty_set)
    __swig_setmethods__["ParallelUnisonPenalty"] = _CsoundAC.Counterpoint_ParallelUnisonPenalty_set
    __swig_getmethods__["ParallelUnisonPenalty"] = _CsoundAC.Counterpoint_ParallelUnisonPenalty_get
    if _newclass:ParallelUnisonPenalty = _swig_property(_CsoundAC.Counterpoint_ParallelUnisonPenalty_get, _CsoundAC.Counterpoint_ParallelUnisonPenalty_set)
    __swig_setmethods__["EndOnPerfectPenalty"] = _CsoundAC.Counterpoint_EndOnPerfectPenalty_set
    __swig_getmethods__["EndOnPerfectPenalty"] = _CsoundAC.Counterpoint_EndOnPerfectPenalty_get
    if _newclass:EndOnPerfectPenalty = _swig_property(_CsoundAC.Counterpoint_EndOnPerfectPenalty_get, _CsoundAC.Counterpoint_EndOnPerfectPenalty_set)
    __swig_setmethods__["NoLeadingTonePenalty"] = _CsoundAC.Counterpoint_NoLeadingTonePenalty_set
    __swig_getmethods__["NoLeadingTonePenalty"] = _CsoundAC.Counterpoint_NoLeadingTonePenalty_get
    if _newclass:NoLeadingTonePenalty = _swig_property(_CsoundAC.Counterpoint_NoLeadingTonePenalty_get, _CsoundAC.Counterpoint_NoLeadingTonePenalty_set)
    __swig_setmethods__["DissonancePenalty"] = _CsoundAC.Counterpoint_DissonancePenalty_set
    __swig_getmethods__["DissonancePenalty"] = _CsoundAC.Counterpoint_DissonancePenalty_get
    if _newclass:DissonancePenalty = _swig_property(_CsoundAC.Counterpoint_DissonancePenalty_get, _CsoundAC.Counterpoint_DissonancePenalty_set)
    __swig_setmethods__["OutOfRangePenalty"] = _CsoundAC.Counterpoint_OutOfRangePenalty_set
    __swig_getmethods__["OutOfRangePenalty"] = _CsoundAC.Counterpoint_OutOfRangePenalty_get
    if _newclass:OutOfRangePenalty = _swig_property(_CsoundAC.Counterpoint_OutOfRangePenalty_get, _CsoundAC.Counterpoint_OutOfRangePenalty_set)
    __swig_setmethods__["OutOfModePenalty"] = _CsoundAC.Counterpoint_OutOfModePenalty_set
    __swig_getmethods__["OutOfModePenalty"] = _CsoundAC.Counterpoint_OutOfModePenalty_get
    if _newclass:OutOfModePenalty = _swig_property(_CsoundAC.Counterpoint_OutOfModePenalty_get, _CsoundAC.Counterpoint_OutOfModePenalty_set)
    __swig_setmethods__["TwoSkipsPenalty"] = _CsoundAC.Counterpoint_TwoSkipsPenalty_set
    __swig_getmethods__["TwoSkipsPenalty"] = _CsoundAC.Counterpoint_TwoSkipsPenalty_get
    if _newclass:TwoSkipsPenalty = _swig_property(_CsoundAC.Counterpoint_TwoSkipsPenalty_get, _CsoundAC.Counterpoint_TwoSkipsPenalty_set)
    __swig_setmethods__["DirectMotionPenalty"] = _CsoundAC.Counterpoint_DirectMotionPenalty_set
    __swig_getmethods__["DirectMotionPenalty"] = _CsoundAC.Counterpoint_DirectMotionPenalty_get
    if _newclass:DirectMotionPenalty = _swig_property(_CsoundAC.Counterpoint_DirectMotionPenalty_get, _CsoundAC.Counterpoint_DirectMotionPenalty_set)
    __swig_setmethods__["PerfectConsonancePenalty"] = _CsoundAC.Counterpoint_PerfectConsonancePenalty_set
    __swig_getmethods__["PerfectConsonancePenalty"] = _CsoundAC.Counterpoint_PerfectConsonancePenalty_get
    if _newclass:PerfectConsonancePenalty = _swig_property(_CsoundAC.Counterpoint_PerfectConsonancePenalty_get, _CsoundAC.Counterpoint_PerfectConsonancePenalty_set)
    __swig_setmethods__["CompoundPenalty"] = _CsoundAC.Counterpoint_CompoundPenalty_set
    __swig_getmethods__["CompoundPenalty"] = _CsoundAC.Counterpoint_CompoundPenalty_get
    if _newclass:CompoundPenalty = _swig_property(_CsoundAC.Counterpoint_CompoundPenalty_get, _CsoundAC.Counterpoint_CompoundPenalty_set)
    __swig_setmethods__["TenthToOctavePenalty"] = _CsoundAC.Counterpoint_TenthToOctavePenalty_set
    __swig_getmethods__["TenthToOctavePenalty"] = _CsoundAC.Counterpoint_TenthToOctavePenalty_get
    if _newclass:TenthToOctavePenalty = _swig_property(_CsoundAC.Counterpoint_TenthToOctavePenalty_get, _CsoundAC.Counterpoint_TenthToOctavePenalty_set)
    __swig_setmethods__["SkipTo8vePenalty"] = _CsoundAC.Counterpoint_SkipTo8vePenalty_set
    __swig_getmethods__["SkipTo8vePenalty"] = _CsoundAC.Counterpoint_SkipTo8vePenalty_get
    if _newclass:SkipTo8vePenalty = _swig_property(_CsoundAC.Counterpoint_SkipTo8vePenalty_get, _CsoundAC.Counterpoint_SkipTo8vePenalty_set)
    __swig_setmethods__["SkipFromUnisonPenalty"] = _CsoundAC.Counterpoint_SkipFromUnisonPenalty_set
    __swig_getmethods__["SkipFromUnisonPenalty"] = _CsoundAC.Counterpoint_SkipFromUnisonPenalty_get
    if _newclass:SkipFromUnisonPenalty = _swig_property(_CsoundAC.Counterpoint_SkipFromUnisonPenalty_get, _CsoundAC.Counterpoint_SkipFromUnisonPenalty_set)
    __swig_setmethods__["SkipPrecededBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SkipPrecededBySameDirectionPenalty_set
    __swig_getmethods__["SkipPrecededBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SkipPrecededBySameDirectionPenalty_get
    if _newclass:SkipPrecededBySameDirectionPenalty = _swig_property(_CsoundAC.Counterpoint_SkipPrecededBySameDirectionPenalty_get, _CsoundAC.Counterpoint_SkipPrecededBySameDirectionPenalty_set)
    __swig_setmethods__["FifthPrecededBySameDirectionPenalty"] = _CsoundAC.Counterpoint_FifthPrecededBySameDirectionPenalty_set
    __swig_getmethods__["FifthPrecededBySameDirectionPenalty"] = _CsoundAC.Counterpoint_FifthPrecededBySameDirectionPenalty_get
    if _newclass:FifthPrecededBySameDirectionPenalty = _swig_property(_CsoundAC.Counterpoint_FifthPrecededBySameDirectionPenalty_get, _CsoundAC.Counterpoint_FifthPrecededBySameDirectionPenalty_set)
    __swig_setmethods__["SixthPrecededBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SixthPrecededBySameDirectionPenalty_set
    __swig_getmethods__["SixthPrecededBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SixthPrecededBySameDirectionPenalty_get
    if _newclass:SixthPrecededBySameDirectionPenalty = _swig_property(_CsoundAC.Counterpoint_SixthPrecededBySameDirectionPenalty_get, _CsoundAC.Counterpoint_SixthPrecededBySameDirectionPenalty_set)
    __swig_setmethods__["SkipFollowedBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SkipFollowedBySameDirectionPenalty_set
    __swig_getmethods__["SkipFollowedBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SkipFollowedBySameDirectionPenalty_get
    if _newclass:SkipFollowedBySameDirectionPenalty = _swig_property(_CsoundAC.Counterpoint_SkipFollowedBySameDirectionPenalty_get, _CsoundAC.Counterpoint_SkipFollowedBySameDirectionPenalty_set)
    __swig_setmethods__["FifthFollowedBySameDirectionPenalty"] = _CsoundAC.Counterpoint_FifthFollowedBySameDirectionPenalty_set
    __swig_getmethods__["FifthFollowedBySameDirectionPenalty"] = _CsoundAC.Counterpoint_FifthFollowedBySameDirectionPenalty_get
    if _newclass:FifthFollowedBySameDirectionPenalty = _swig_property(_CsoundAC.Counterpoint_FifthFollowedBySameDirectionPenalty_get, _CsoundAC.Counterpoint_FifthFollowedBySameDirectionPenalty_set)
    __swig_setmethods__["SixthFollowedBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SixthFollowedBySameDirectionPenalty_set
    __swig_getmethods__["SixthFollowedBySameDirectionPenalty"] = _CsoundAC.Counterpoint_SixthFollowedBySameDirectionPenalty_get
    if _newclass:SixthFollowedBySameDirectionPenalty = _swig_property(_CsoundAC.Counterpoint_SixthFollowedBySameDirectionPenalty_get, _CsoundAC.Counterpoint_SixthFollowedBySameDirectionPenalty_set)
    __swig_setmethods__["TwoSkipsNotInTriadPenalty"] = _CsoundAC.Counterpoint_TwoSkipsNotInTriadPenalty_set
    __swig_getmethods__["TwoSkipsNotInTriadPenalty"] = _CsoundAC.Counterpoint_TwoSkipsNotInTriadPenalty_get
    if _newclass:TwoSkipsNotInTriadPenalty = _swig_property(_CsoundAC.Counterpoint_TwoSkipsNotInTriadPenalty_get, _CsoundAC.Counterpoint_TwoSkipsNotInTriadPenalty_set)
    __swig_setmethods__["BadMelodyPenalty"] = _CsoundAC.Counterpoint_BadMelodyPenalty_set
    __swig_getmethods__["BadMelodyPenalty"] = _CsoundAC.Counterpoint_BadMelodyPenalty_get
    if _newclass:BadMelodyPenalty = _swig_property(_CsoundAC.Counterpoint_BadMelodyPenalty_get, _CsoundAC.Counterpoint_BadMelodyPenalty_set)
    __swig_setmethods__["ExtremeRangePenalty"] = _CsoundAC.Counterpoint_ExtremeRangePenalty_set
    __swig_getmethods__["ExtremeRangePenalty"] = _CsoundAC.Counterpoint_ExtremeRangePenalty_get
    if _newclass:ExtremeRangePenalty = _swig_property(_CsoundAC.Counterpoint_ExtremeRangePenalty_get, _CsoundAC.Counterpoint_ExtremeRangePenalty_set)
    __swig_setmethods__["LydianCadentialTritonePenalty"] = _CsoundAC.Counterpoint_LydianCadentialTritonePenalty_set
    __swig_getmethods__["LydianCadentialTritonePenalty"] = _CsoundAC.Counterpoint_LydianCadentialTritonePenalty_get
    if _newclass:LydianCadentialTritonePenalty = _swig_property(_CsoundAC.Counterpoint_LydianCadentialTritonePenalty_get, _CsoundAC.Counterpoint_LydianCadentialTritonePenalty_set)
    __swig_setmethods__["LowerNeighborPenalty"] = _CsoundAC.Counterpoint_LowerNeighborPenalty_set
    __swig_getmethods__["LowerNeighborPenalty"] = _CsoundAC.Counterpoint_LowerNeighborPenalty_get
    if _newclass:LowerNeighborPenalty = _swig_property(_CsoundAC.Counterpoint_LowerNeighborPenalty_get, _CsoundAC.Counterpoint_LowerNeighborPenalty_set)
    __swig_setmethods__["UpperNeighborPenalty"] = _CsoundAC.Counterpoint_UpperNeighborPenalty_set
    __swig_getmethods__["UpperNeighborPenalty"] = _CsoundAC.Counterpoint_UpperNeighborPenalty_get
    if _newclass:UpperNeighborPenalty = _swig_property(_CsoundAC.Counterpoint_UpperNeighborPenalty_get, _CsoundAC.Counterpoint_UpperNeighborPenalty_set)
    __swig_setmethods__["OverTwelfthPenalty"] = _CsoundAC.Counterpoint_OverTwelfthPenalty_set
    __swig_getmethods__["OverTwelfthPenalty"] = _CsoundAC.Counterpoint_OverTwelfthPenalty_get
    if _newclass:OverTwelfthPenalty = _swig_property(_CsoundAC.Counterpoint_OverTwelfthPenalty_get, _CsoundAC.Counterpoint_OverTwelfthPenalty_set)
    __swig_setmethods__["OverOctavePenalty"] = _CsoundAC.Counterpoint_OverOctavePenalty_set
    __swig_getmethods__["OverOctavePenalty"] = _CsoundAC.Counterpoint_OverOctavePenalty_get
    if _newclass:OverOctavePenalty = _swig_property(_CsoundAC.Counterpoint_OverOctavePenalty_get, _CsoundAC.Counterpoint_OverOctavePenalty_set)
    __swig_setmethods__["SixthLeapPenalty"] = _CsoundAC.Counterpoint_SixthLeapPenalty_set
    __swig_getmethods__["SixthLeapPenalty"] = _CsoundAC.Counterpoint_SixthLeapPenalty_get
    if _newclass:SixthLeapPenalty = _swig_property(_CsoundAC.Counterpoint_SixthLeapPenalty_get, _CsoundAC.Counterpoint_SixthLeapPenalty_set)
    __swig_setmethods__["OctaveLeapPenalty"] = _CsoundAC.Counterpoint_OctaveLeapPenalty_set
    __swig_getmethods__["OctaveLeapPenalty"] = _CsoundAC.Counterpoint_OctaveLeapPenalty_get
    if _newclass:OctaveLeapPenalty = _swig_property(_CsoundAC.Counterpoint_OctaveLeapPenalty_get, _CsoundAC.Counterpoint_OctaveLeapPenalty_set)
    __swig_setmethods__["BadCadencePenalty"] = _CsoundAC.Counterpoint_BadCadencePenalty_set
    __swig_getmethods__["BadCadencePenalty"] = _CsoundAC.Counterpoint_BadCadencePenalty_get
    if _newclass:BadCadencePenalty = _swig_property(_CsoundAC.Counterpoint_BadCadencePenalty_get, _CsoundAC.Counterpoint_BadCadencePenalty_set)
    __swig_setmethods__["DirectPerfectOnDownbeatPenalty"] = _CsoundAC.Counterpoint_DirectPerfectOnDownbeatPenalty_set
    __swig_getmethods__["DirectPerfectOnDownbeatPenalty"] = _CsoundAC.Counterpoint_DirectPerfectOnDownbeatPenalty_get
    if _newclass:DirectPerfectOnDownbeatPenalty = _swig_property(_CsoundAC.Counterpoint_DirectPerfectOnDownbeatPenalty_get, _CsoundAC.Counterpoint_DirectPerfectOnDownbeatPenalty_set)
    __swig_setmethods__["RepetitionOnUpbeatPenalty"] = _CsoundAC.Counterpoint_RepetitionOnUpbeatPenalty_set
    __swig_getmethods__["RepetitionOnUpbeatPenalty"] = _CsoundAC.Counterpoint_RepetitionOnUpbeatPenalty_get
    if _newclass:RepetitionOnUpbeatPenalty = _swig_property(_CsoundAC.Counterpoint_RepetitionOnUpbeatPenalty_get, _CsoundAC.Counterpoint_RepetitionOnUpbeatPenalty_set)
    __swig_setmethods__["DissonanceNotFillingThirdPenalty"] = _CsoundAC.Counterpoint_DissonanceNotFillingThirdPenalty_set
    __swig_getmethods__["DissonanceNotFillingThirdPenalty"] = _CsoundAC.Counterpoint_DissonanceNotFillingThirdPenalty_get
    if _newclass:DissonanceNotFillingThirdPenalty = _swig_property(_CsoundAC.Counterpoint_DissonanceNotFillingThirdPenalty_get, _CsoundAC.Counterpoint_DissonanceNotFillingThirdPenalty_set)
    __swig_setmethods__["UnisonDownbeatPenalty"] = _CsoundAC.Counterpoint_UnisonDownbeatPenalty_set
    __swig_getmethods__["UnisonDownbeatPenalty"] = _CsoundAC.Counterpoint_UnisonDownbeatPenalty_get
    if _newclass:UnisonDownbeatPenalty = _swig_property(_CsoundAC.Counterpoint_UnisonDownbeatPenalty_get, _CsoundAC.Counterpoint_UnisonDownbeatPenalty_set)
    __swig_setmethods__["TwoRepeatedNotesPenalty"] = _CsoundAC.Counterpoint_TwoRepeatedNotesPenalty_set
    __swig_getmethods__["TwoRepeatedNotesPenalty"] = _CsoundAC.Counterpoint_TwoRepeatedNotesPenalty_get
    if _newclass:TwoRepeatedNotesPenalty = _swig_property(_CsoundAC.Counterpoint_TwoRepeatedNotesPenalty_get, _CsoundAC.Counterpoint_TwoRepeatedNotesPenalty_set)
    __swig_setmethods__["ThreeRepeatedNotesPenalty"] = _CsoundAC.Counterpoint_ThreeRepeatedNotesPenalty_set
    __swig_getmethods__["ThreeRepeatedNotesPenalty"] = _CsoundAC.Counterpoint_ThreeRepeatedNotesPenalty_get
    if _newclass:ThreeRepeatedNotesPenalty = _swig_property(_CsoundAC.Counterpoint_ThreeRepeatedNotesPenalty_get, _CsoundAC.Counterpoint_ThreeRepeatedNotesPenalty_set)
    __swig_setmethods__["FourRepeatedNotesPenalty"] = _CsoundAC.Counterpoint_FourRepeatedNotesPenalty_set
    __swig_getmethods__["FourRepeatedNotesPenalty"] = _CsoundAC.Counterpoint_FourRepeatedNotesPenalty_get
    if _newclass:FourRepeatedNotesPenalty = _swig_property(_CsoundAC.Counterpoint_FourRepeatedNotesPenalty_get, _CsoundAC.Counterpoint_FourRepeatedNotesPenalty_set)
    __swig_setmethods__["LeapAtCadencePenalty"] = _CsoundAC.Counterpoint_LeapAtCadencePenalty_set
    __swig_getmethods__["LeapAtCadencePenalty"] = _CsoundAC.Counterpoint_LeapAtCadencePenalty_get
    if _newclass:LeapAtCadencePenalty = _swig_property(_CsoundAC.Counterpoint_LeapAtCadencePenalty_get, _CsoundAC.Counterpoint_LeapAtCadencePenalty_set)
    __swig_setmethods__["NotaCambiataPenalty"] = _CsoundAC.Counterpoint_NotaCambiataPenalty_set
    __swig_getmethods__["NotaCambiataPenalty"] = _CsoundAC.Counterpoint_NotaCambiataPenalty_get
    if _newclass:NotaCambiataPenalty = _swig_property(_CsoundAC.Counterpoint_NotaCambiataPenalty_get, _CsoundAC.Counterpoint_NotaCambiataPenalty_set)
    __swig_setmethods__["NotBestCadencePenalty"] = _CsoundAC.Counterpoint_NotBestCadencePenalty_set
    __swig_getmethods__["NotBestCadencePenalty"] = _CsoundAC.Counterpoint_NotBestCadencePenalty_get
    if _newclass:NotBestCadencePenalty = _swig_property(_CsoundAC.Counterpoint_NotBestCadencePenalty_get, _CsoundAC.Counterpoint_NotBestCadencePenalty_set)
    __swig_setmethods__["UnisonOnBeat4Penalty"] = _CsoundAC.Counterpoint_UnisonOnBeat4Penalty_set
    __swig_getmethods__["UnisonOnBeat4Penalty"] = _CsoundAC.Counterpoint_UnisonOnBeat4Penalty_get
    if _newclass:UnisonOnBeat4Penalty = _swig_property(_CsoundAC.Counterpoint_UnisonOnBeat4Penalty_get, _CsoundAC.Counterpoint_UnisonOnBeat4Penalty_set)
    __swig_setmethods__["NotaLigaturePenalty"] = _CsoundAC.Counterpoint_NotaLigaturePenalty_set
    __swig_getmethods__["NotaLigaturePenalty"] = _CsoundAC.Counterpoint_NotaLigaturePenalty_get
    if _newclass:NotaLigaturePenalty = _swig_property(_CsoundAC.Counterpoint_NotaLigaturePenalty_get, _CsoundAC.Counterpoint_NotaLigaturePenalty_set)
    __swig_setmethods__["LesserLigaturePenalty"] = _CsoundAC.Counterpoint_LesserLigaturePenalty_set
    __swig_getmethods__["LesserLigaturePenalty"] = _CsoundAC.Counterpoint_LesserLigaturePenalty_get
    if _newclass:LesserLigaturePenalty = _swig_property(_CsoundAC.Counterpoint_LesserLigaturePenalty_get, _CsoundAC.Counterpoint_LesserLigaturePenalty_set)
    __swig_setmethods__["UnresolvedLigaturePenalty"] = _CsoundAC.Counterpoint_UnresolvedLigaturePenalty_set
    __swig_getmethods__["UnresolvedLigaturePenalty"] = _CsoundAC.Counterpoint_UnresolvedLigaturePenalty_get
    if _newclass:UnresolvedLigaturePenalty = _swig_property(_CsoundAC.Counterpoint_UnresolvedLigaturePenalty_get, _CsoundAC.Counterpoint_UnresolvedLigaturePenalty_set)
    __swig_setmethods__["NoTimeForaLigaturePenalty"] = _CsoundAC.Counterpoint_NoTimeForaLigaturePenalty_set
    __swig_getmethods__["NoTimeForaLigaturePenalty"] = _CsoundAC.Counterpoint_NoTimeForaLigaturePenalty_get
    if _newclass:NoTimeForaLigaturePenalty = _swig_property(_CsoundAC.Counterpoint_NoTimeForaLigaturePenalty_get, _CsoundAC.Counterpoint_NoTimeForaLigaturePenalty_set)
    __swig_setmethods__["EighthJumpPenalty"] = _CsoundAC.Counterpoint_EighthJumpPenalty_set
    __swig_getmethods__["EighthJumpPenalty"] = _CsoundAC.Counterpoint_EighthJumpPenalty_get
    if _newclass:EighthJumpPenalty = _swig_property(_CsoundAC.Counterpoint_EighthJumpPenalty_get, _CsoundAC.Counterpoint_EighthJumpPenalty_set)
    __swig_setmethods__["HalfUntiedPenalty"] = _CsoundAC.Counterpoint_HalfUntiedPenalty_set
    __swig_getmethods__["HalfUntiedPenalty"] = _CsoundAC.Counterpoint_HalfUntiedPenalty_get
    if _newclass:HalfUntiedPenalty = _swig_property(_CsoundAC.Counterpoint_HalfUntiedPenalty_get, _CsoundAC.Counterpoint_HalfUntiedPenalty_set)
    __swig_setmethods__["UnisonUpbeatPenalty"] = _CsoundAC.Counterpoint_UnisonUpbeatPenalty_set
    __swig_getmethods__["UnisonUpbeatPenalty"] = _CsoundAC.Counterpoint_UnisonUpbeatPenalty_get
    if _newclass:UnisonUpbeatPenalty = _swig_property(_CsoundAC.Counterpoint_UnisonUpbeatPenalty_get, _CsoundAC.Counterpoint_UnisonUpbeatPenalty_set)
    __swig_setmethods__["MelodicBoredomPenalty"] = _CsoundAC.Counterpoint_MelodicBoredomPenalty_set
    __swig_getmethods__["MelodicBoredomPenalty"] = _CsoundAC.Counterpoint_MelodicBoredomPenalty_get
    if _newclass:MelodicBoredomPenalty = _swig_property(_CsoundAC.Counterpoint_MelodicBoredomPenalty_get, _CsoundAC.Counterpoint_MelodicBoredomPenalty_set)
    __swig_setmethods__["SkipToDownBeatPenalty"] = _CsoundAC.Counterpoint_SkipToDownBeatPenalty_set
    __swig_getmethods__["SkipToDownBeatPenalty"] = _CsoundAC.Counterpoint_SkipToDownBeatPenalty_get
    if _newclass:SkipToDownBeatPenalty = _swig_property(_CsoundAC.Counterpoint_SkipToDownBeatPenalty_get, _CsoundAC.Counterpoint_SkipToDownBeatPenalty_set)
    __swig_setmethods__["ThreeSkipsPenalty"] = _CsoundAC.Counterpoint_ThreeSkipsPenalty_set
    __swig_getmethods__["ThreeSkipsPenalty"] = _CsoundAC.Counterpoint_ThreeSkipsPenalty_get
    if _newclass:ThreeSkipsPenalty = _swig_property(_CsoundAC.Counterpoint_ThreeSkipsPenalty_get, _CsoundAC.Counterpoint_ThreeSkipsPenalty_set)
    __swig_setmethods__["DownBeatUnisonPenalty"] = _CsoundAC.Counterpoint_DownBeatUnisonPenalty_set
    __swig_getmethods__["DownBeatUnisonPenalty"] = _CsoundAC.Counterpoint_DownBeatUnisonPenalty_get
    if _newclass:DownBeatUnisonPenalty = _swig_property(_CsoundAC.Counterpoint_DownBeatUnisonPenalty_get, _CsoundAC.Counterpoint_DownBeatUnisonPenalty_set)
    __swig_setmethods__["VerticalTritonePenalty"] = _CsoundAC.Counterpoint_VerticalTritonePenalty_set
    __swig_getmethods__["VerticalTritonePenalty"] = _CsoundAC.Counterpoint_VerticalTritonePenalty_get
    if _newclass:VerticalTritonePenalty = _swig_property(_CsoundAC.Counterpoint_VerticalTritonePenalty_get, _CsoundAC.Counterpoint_VerticalTritonePenalty_set)
    __swig_setmethods__["MelodicTritonePenalty"] = _CsoundAC.Counterpoint_MelodicTritonePenalty_set
    __swig_getmethods__["MelodicTritonePenalty"] = _CsoundAC.Counterpoint_MelodicTritonePenalty_get
    if _newclass:MelodicTritonePenalty = _swig_property(_CsoundAC.Counterpoint_MelodicTritonePenalty_get, _CsoundAC.Counterpoint_MelodicTritonePenalty_set)
    __swig_setmethods__["AscendingSixthPenalty"] = _CsoundAC.Counterpoint_AscendingSixthPenalty_set
    __swig_getmethods__["AscendingSixthPenalty"] = _CsoundAC.Counterpoint_AscendingSixthPenalty_get
    if _newclass:AscendingSixthPenalty = _swig_property(_CsoundAC.Counterpoint_AscendingSixthPenalty_get, _CsoundAC.Counterpoint_AscendingSixthPenalty_set)
    __swig_setmethods__["RepeatedPitchPenalty"] = _CsoundAC.Counterpoint_RepeatedPitchPenalty_set
    __swig_getmethods__["RepeatedPitchPenalty"] = _CsoundAC.Counterpoint_RepeatedPitchPenalty_get
    if _newclass:RepeatedPitchPenalty = _swig_property(_CsoundAC.Counterpoint_RepeatedPitchPenalty_get, _CsoundAC.Counterpoint_RepeatedPitchPenalty_set)
    __swig_setmethods__["NotContraryToOthersPenalty"] = _CsoundAC.Counterpoint_NotContraryToOthersPenalty_set
    __swig_getmethods__["NotContraryToOthersPenalty"] = _CsoundAC.Counterpoint_NotContraryToOthersPenalty_get
    if _newclass:NotContraryToOthersPenalty = _swig_property(_CsoundAC.Counterpoint_NotContraryToOthersPenalty_get, _CsoundAC.Counterpoint_NotContraryToOthersPenalty_set)
    __swig_setmethods__["NotTriadPenalty"] = _CsoundAC.Counterpoint_NotTriadPenalty_set
    __swig_getmethods__["NotTriadPenalty"] = _CsoundAC.Counterpoint_NotTriadPenalty_get
    if _newclass:NotTriadPenalty = _swig_property(_CsoundAC.Counterpoint_NotTriadPenalty_get, _CsoundAC.Counterpoint_NotTriadPenalty_set)
    __swig_setmethods__["InnerVoicesInDirectToPerfectPenalty"] = _CsoundAC.Counterpoint_InnerVoicesInDirectToPerfectPenalty_set
    __swig_getmethods__["InnerVoicesInDirectToPerfectPenalty"] = _CsoundAC.Counterpoint_InnerVoicesInDirectToPerfectPenalty_get
    if _newclass:InnerVoicesInDirectToPerfectPenalty = _swig_property(_CsoundAC.Counterpoint_InnerVoicesInDirectToPerfectPenalty_get, _CsoundAC.Counterpoint_InnerVoicesInDirectToPerfectPenalty_set)
    __swig_setmethods__["InnerVoicesInDirectToTritonePenalty"] = _CsoundAC.Counterpoint_InnerVoicesInDirectToTritonePenalty_set
    __swig_getmethods__["InnerVoicesInDirectToTritonePenalty"] = _CsoundAC.Counterpoint_InnerVoicesInDirectToTritonePenalty_get
    if _newclass:InnerVoicesInDirectToTritonePenalty = _swig_property(_CsoundAC.Counterpoint_InnerVoicesInDirectToTritonePenalty_get, _CsoundAC.Counterpoint_InnerVoicesInDirectToTritonePenalty_set)
    __swig_setmethods__["SixFiveChordPenalty"] = _CsoundAC.Counterpoint_SixFiveChordPenalty_set
    __swig_getmethods__["SixFiveChordPenalty"] = _CsoundAC.Counterpoint_SixFiveChordPenalty_get
    if _newclass:SixFiveChordPenalty = _swig_property(_CsoundAC.Counterpoint_SixFiveChordPenalty_get, _CsoundAC.Counterpoint_SixFiveChordPenalty_set)
    __swig_setmethods__["UnpreparedSixFivePenalty"] = _CsoundAC.Counterpoint_UnpreparedSixFivePenalty_set
    __swig_getmethods__["UnpreparedSixFivePenalty"] = _CsoundAC.Counterpoint_UnpreparedSixFivePenalty_get
    if _newclass:UnpreparedSixFivePenalty = _swig_property(_CsoundAC.Counterpoint_UnpreparedSixFivePenalty_get, _CsoundAC.Counterpoint_UnpreparedSixFivePenalty_set)
    __swig_setmethods__["UnresolvedSixFivePenalty"] = _CsoundAC.Counterpoint_UnresolvedSixFivePenalty_set
    __swig_getmethods__["UnresolvedSixFivePenalty"] = _CsoundAC.Counterpoint_UnresolvedSixFivePenalty_get
    if _newclass:UnresolvedSixFivePenalty = _swig_property(_CsoundAC.Counterpoint_UnresolvedSixFivePenalty_get, _CsoundAC.Counterpoint_UnresolvedSixFivePenalty_set)
    __swig_setmethods__["AugmentedIntervalPenalty"] = _CsoundAC.Counterpoint_AugmentedIntervalPenalty_set
    __swig_getmethods__["AugmentedIntervalPenalty"] = _CsoundAC.Counterpoint_AugmentedIntervalPenalty_get
    if _newclass:AugmentedIntervalPenalty = _swig_property(_CsoundAC.Counterpoint_AugmentedIntervalPenalty_get, _CsoundAC.Counterpoint_AugmentedIntervalPenalty_set)
    __swig_setmethods__["ThirdDoubledPenalty"] = _CsoundAC.Counterpoint_ThirdDoubledPenalty_set
    __swig_getmethods__["ThirdDoubledPenalty"] = _CsoundAC.Counterpoint_ThirdDoubledPenalty_get
    if _newclass:ThirdDoubledPenalty = _swig_property(_CsoundAC.Counterpoint_ThirdDoubledPenalty_get, _CsoundAC.Counterpoint_ThirdDoubledPenalty_set)
    __swig_setmethods__["DoubledLeadingTonePenalty"] = _CsoundAC.Counterpoint_DoubledLeadingTonePenalty_set
    __swig_getmethods__["DoubledLeadingTonePenalty"] = _CsoundAC.Counterpoint_DoubledLeadingTonePenalty_get
    if _newclass:DoubledLeadingTonePenalty = _swig_property(_CsoundAC.Counterpoint_DoubledLeadingTonePenalty_get, _CsoundAC.Counterpoint_DoubledLeadingTonePenalty_set)
    __swig_setmethods__["DoubledSixthPenalty"] = _CsoundAC.Counterpoint_DoubledSixthPenalty_set
    __swig_getmethods__["DoubledSixthPenalty"] = _CsoundAC.Counterpoint_DoubledSixthPenalty_get
    if _newclass:DoubledSixthPenalty = _swig_property(_CsoundAC.Counterpoint_DoubledSixthPenalty_get, _CsoundAC.Counterpoint_DoubledSixthPenalty_set)
    __swig_setmethods__["DoubledFifthPenalty"] = _CsoundAC.Counterpoint_DoubledFifthPenalty_set
    __swig_getmethods__["DoubledFifthPenalty"] = _CsoundAC.Counterpoint_DoubledFifthPenalty_get
    if _newclass:DoubledFifthPenalty = _swig_property(_CsoundAC.Counterpoint_DoubledFifthPenalty_get, _CsoundAC.Counterpoint_DoubledFifthPenalty_set)
    __swig_setmethods__["TripledBassPenalty"] = _CsoundAC.Counterpoint_TripledBassPenalty_set
    __swig_getmethods__["TripledBassPenalty"] = _CsoundAC.Counterpoint_TripledBassPenalty_get
    if _newclass:TripledBassPenalty = _swig_property(_CsoundAC.Counterpoint_TripledBassPenalty_get, _CsoundAC.Counterpoint_TripledBassPenalty_set)
    __swig_setmethods__["UpperVoicesTooFarApartPenalty"] = _CsoundAC.Counterpoint_UpperVoicesTooFarApartPenalty_set
    __swig_getmethods__["UpperVoicesTooFarApartPenalty"] = _CsoundAC.Counterpoint_UpperVoicesTooFarApartPenalty_get
    if _newclass:UpperVoicesTooFarApartPenalty = _swig_property(_CsoundAC.Counterpoint_UpperVoicesTooFarApartPenalty_get, _CsoundAC.Counterpoint_UpperVoicesTooFarApartPenalty_set)
    __swig_setmethods__["UnresolvedLeadingTonePenalty"] = _CsoundAC.Counterpoint_UnresolvedLeadingTonePenalty_set
    __swig_getmethods__["UnresolvedLeadingTonePenalty"] = _CsoundAC.Counterpoint_UnresolvedLeadingTonePenalty_get
    if _newclass:UnresolvedLeadingTonePenalty = _swig_property(_CsoundAC.Counterpoint_UnresolvedLeadingTonePenalty_get, _CsoundAC.Counterpoint_UnresolvedLeadingTonePenalty_set)
    __swig_setmethods__["AllVoicesSkipPenalty"] = _CsoundAC.Counterpoint_AllVoicesSkipPenalty_set
    __swig_getmethods__["AllVoicesSkipPenalty"] = _CsoundAC.Counterpoint_AllVoicesSkipPenalty_get
    if _newclass:AllVoicesSkipPenalty = _swig_property(_CsoundAC.Counterpoint_AllVoicesSkipPenalty_get, _CsoundAC.Counterpoint_AllVoicesSkipPenalty_set)
    __swig_setmethods__["DirectToTritonePenalty"] = _CsoundAC.Counterpoint_DirectToTritonePenalty_set
    __swig_getmethods__["DirectToTritonePenalty"] = _CsoundAC.Counterpoint_DirectToTritonePenalty_get
    if _newclass:DirectToTritonePenalty = _swig_property(_CsoundAC.Counterpoint_DirectToTritonePenalty_get, _CsoundAC.Counterpoint_DirectToTritonePenalty_set)
    __swig_setmethods__["CrossBelowBassPenalty"] = _CsoundAC.Counterpoint_CrossBelowBassPenalty_set
    __swig_getmethods__["CrossBelowBassPenalty"] = _CsoundAC.Counterpoint_CrossBelowBassPenalty_get
    if _newclass:CrossBelowBassPenalty = _swig_property(_CsoundAC.Counterpoint_CrossBelowBassPenalty_get, _CsoundAC.Counterpoint_CrossBelowBassPenalty_set)
    __swig_setmethods__["CrossAboveCantusPenalty"] = _CsoundAC.Counterpoint_CrossAboveCantusPenalty_set
    __swig_getmethods__["CrossAboveCantusPenalty"] = _CsoundAC.Counterpoint_CrossAboveCantusPenalty_get
    if _newclass:CrossAboveCantusPenalty = _swig_property(_CsoundAC.Counterpoint_CrossAboveCantusPenalty_get, _CsoundAC.Counterpoint_CrossAboveCantusPenalty_set)
    __swig_setmethods__["NoMotionAgainstOctavePenalty"] = _CsoundAC.Counterpoint_NoMotionAgainstOctavePenalty_set
    __swig_getmethods__["NoMotionAgainstOctavePenalty"] = _CsoundAC.Counterpoint_NoMotionAgainstOctavePenalty_get
    if _newclass:NoMotionAgainstOctavePenalty = _swig_property(_CsoundAC.Counterpoint_NoMotionAgainstOctavePenalty_get, _CsoundAC.Counterpoint_NoMotionAgainstOctavePenalty_set)
    def SpecialSpeciesCheck(self, *args):
        """
        SpecialSpeciesCheck(Counterpoint self, int Cn, int Cp, int v, int Other0, int Other1, int Other2, int NumParts, int Species, 
            int MelInt, int Interval, int ActInt, int LastIntClass, int Pitch, int LastMelInt, 
            int CurLim) -> int
        """
        return _CsoundAC.Counterpoint_SpecialSpeciesCheck(self, *args)

    INTERVALS_WITH_BASS_SIZE = _CsoundAC.Counterpoint_INTERVALS_WITH_BASS_SIZE
    __swig_setmethods__["IntervalsWithBass"] = _CsoundAC.Counterpoint_IntervalsWithBass_set
    __swig_getmethods__["IntervalsWithBass"] = _CsoundAC.Counterpoint_IntervalsWithBass_get
    if _newclass:IntervalsWithBass = _swig_property(_CsoundAC.Counterpoint_IntervalsWithBass_get, _CsoundAC.Counterpoint_IntervalsWithBass_set)
    def AddInterval(self, *args):
        """AddInterval(Counterpoint self, int n)"""
        return _CsoundAC.Counterpoint_AddInterval(self, *args)

    def OtherVoiceCheck(self, *args):
        """OtherVoiceCheck(Counterpoint self, int Cn, int Cp, int v, int NumParts, int Species, int CurLim) -> int"""
        return _CsoundAC.Counterpoint_OtherVoiceCheck(self, *args)

    def Check(self, *args):
        """Check(Counterpoint self, int Cn, int Cp, int v, int NumParts, int Species, int CurLim) -> int"""
        return _CsoundAC.Counterpoint_Check(self, *args)

    __swig_setmethods__["BestFitPenalty"] = _CsoundAC.Counterpoint_BestFitPenalty_set
    __swig_getmethods__["BestFitPenalty"] = _CsoundAC.Counterpoint_BestFitPenalty_get
    if _newclass:BestFitPenalty = _swig_property(_CsoundAC.Counterpoint_BestFitPenalty_get, _CsoundAC.Counterpoint_BestFitPenalty_set)
    __swig_setmethods__["MaxPenalty"] = _CsoundAC.Counterpoint_MaxPenalty_set
    __swig_getmethods__["MaxPenalty"] = _CsoundAC.Counterpoint_MaxPenalty_get
    if _newclass:MaxPenalty = _swig_property(_CsoundAC.Counterpoint_MaxPenalty_get, _CsoundAC.Counterpoint_MaxPenalty_set)
    __swig_setmethods__["Branches"] = _CsoundAC.Counterpoint_Branches_set
    __swig_getmethods__["Branches"] = _CsoundAC.Counterpoint_Branches_get
    if _newclass:Branches = _swig_property(_CsoundAC.Counterpoint_Branches_get, _CsoundAC.Counterpoint_Branches_set)
    __swig_setmethods__["AllDone"] = _CsoundAC.Counterpoint_AllDone_set
    __swig_getmethods__["AllDone"] = _CsoundAC.Counterpoint_AllDone_get
    if _newclass:AllDone = _swig_property(_CsoundAC.Counterpoint_AllDone_get, _CsoundAC.Counterpoint_AllDone_set)
    __swig_setmethods__["PenaltyRatio"] = _CsoundAC.Counterpoint_PenaltyRatio_set
    __swig_getmethods__["PenaltyRatio"] = _CsoundAC.Counterpoint_PenaltyRatio_get
    if _newclass:PenaltyRatio = _swig_property(_CsoundAC.Counterpoint_PenaltyRatio_get, _CsoundAC.Counterpoint_PenaltyRatio_set)
    NumFields = _CsoundAC.Counterpoint_NumFields
    Field = _CsoundAC.Counterpoint_Field
    EndF = _CsoundAC.Counterpoint_EndF
    def SaveIndx(self, *args):
        """SaveIndx(Counterpoint self, int indx, int * Sp) -> int"""
        return _CsoundAC.Counterpoint_SaveIndx(self, *args)

    def SaveResults(self, *args):
        """SaveResults(Counterpoint self, int CurrentPenalty, int Penalty, int v1, int Species)"""
        return _CsoundAC.Counterpoint_SaveResults(self, *args)

    def Look(self, *args):
        """
        Look(Counterpoint self, int CurPen, int CurVoice, int NumParts, int Species, int Lim, int * Pens, int * Is, 
            int * CurNotes) -> int
        """
        return _CsoundAC.Counterpoint_Look(self, *args)

    def BestFitFirst(self, *args):
        """BestFitFirst(Counterpoint self, int CurTime, int CurrentPenalty, int NumParts, int Species, int BrLim)"""
        return _CsoundAC.Counterpoint_BestFitFirst(self, *args)

    def FillRhyPat(self):
        """FillRhyPat(Counterpoint self)"""
        return _CsoundAC.Counterpoint_FillRhyPat(self)

    def RANDOM(self, *args):
        """RANDOM(Counterpoint self, float amp) -> float"""
        return _CsoundAC.Counterpoint_RANDOM(self, *args)

    def UsedRhy(self, *args):
        """UsedRhy(Counterpoint self, int n)"""
        return _CsoundAC.Counterpoint_UsedRhy(self, *args)

    def CurRhy(self, *args):
        """CurRhy(Counterpoint self, int n) -> int"""
        return _CsoundAC.Counterpoint_CurRhy(self, *args)

    def CleanRhy(self):
        """CleanRhy(Counterpoint self)"""
        return _CsoundAC.Counterpoint_CleanRhy(self)

    def GoodRhy(self):
        """GoodRhy(Counterpoint self) -> int"""
        return _CsoundAC.Counterpoint_GoodRhy(self)

    def counterpoint(self, *args):
        """counterpoint(Counterpoint self, int OurMode, int * StartPitches, int CurV, int CantusFirmusLength, int Species, int * cantus)"""
        return _CsoundAC.Counterpoint_counterpoint(self, *args)

    def AnySpecies(self, *args):
        """AnySpecies(Counterpoint self, int OurMode, int * StartPitches, int CurV, int CantusFirmusLength, int Species)"""
        return _CsoundAC.Counterpoint_AnySpecies(self, *args)

    def fillCantus(self, *args):
        """
        fillCantus(Counterpoint self, int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, 
            int c11, int c12, int c13, int c14)
        """
        return _CsoundAC.Counterpoint_fillCantus(self, *args)

    def toCsoundScore(self, *args):
        """toCsoundScore(Counterpoint self, std::string filename, double secondsPerPulse)"""
        return _CsoundAC.Counterpoint_toCsoundScore(self, *args)

    def winners(self, *args):
        """winners(Counterpoint self, int v1, int * data, int * best, int * best1, int * best2, int * durs)"""
        return _CsoundAC.Counterpoint_winners(self, *args)

Counterpoint_swigregister = _CsoundAC.Counterpoint_swigregister
Counterpoint_swigregister(Counterpoint)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntVector self) -> SwigPyIterator"""
        return _CsoundAC.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntVector self) -> bool"""
        return _CsoundAC.IntVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntVector self) -> bool"""
        return _CsoundAC.IntVector___bool__(self)

    def __len__(self):
        """__len__(IntVector self) -> std::vector< int >::size_type"""
        return _CsoundAC.IntVector___len__(self)

    def pop(self):
        """pop(IntVector self) -> std::vector< int >::value_type"""
        return _CsoundAC.IntVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _CsoundAC.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v=std::vector< int,std::allocator< int > >())
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _CsoundAC.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _CsoundAC.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _CsoundAC.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _CsoundAC.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _CsoundAC.IntVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntVector self, std::vector< int >::value_type const & x)"""
        return _CsoundAC.IntVector_append(self, *args)

    def empty(self):
        """empty(IntVector self) -> bool"""
        return _CsoundAC.IntVector_empty(self)

    def size(self):
        """size(IntVector self) -> std::vector< int >::size_type"""
        return _CsoundAC.IntVector_size(self)

    def clear(self):
        """clear(IntVector self)"""
        return _CsoundAC.IntVector_clear(self)

    def swap(self, *args):
        """swap(IntVector self, IntVector v)"""
        return _CsoundAC.IntVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _CsoundAC.IntVector_get_allocator(self)

    def begin(self):
        """begin(IntVector self) -> std::vector< int >::iterator"""
        return _CsoundAC.IntVector_begin(self)

    def end(self):
        """end(IntVector self) -> std::vector< int >::iterator"""
        return _CsoundAC.IntVector_end(self)

    def rbegin(self):
        """rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _CsoundAC.IntVector_rbegin(self)

    def rend(self):
        """rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _CsoundAC.IntVector_rend(self)

    def pop_back(self):
        """pop_back(IntVector self)"""
        return _CsoundAC.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _CsoundAC.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        this = _CsoundAC.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _CsoundAC.IntVector_push_back(self, *args)

    def front(self):
        """front(IntVector self) -> std::vector< int >::value_type const &"""
        return _CsoundAC.IntVector_front(self)

    def back(self):
        """back(IntVector self) -> std::vector< int >::value_type const &"""
        return _CsoundAC.IntVector_back(self)

    def assign(self, *args):
        """assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _CsoundAC.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _CsoundAC.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _CsoundAC.IntVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntVector self, std::vector< int >::size_type n)"""
        return _CsoundAC.IntVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntVector self) -> std::vector< int >::size_type"""
        return _CsoundAC.IntVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _CsoundAC.IntVector_swigregister
IntVector_swigregister(IntVector)

class CounterpointNode(Node,Counterpoint):
    """Proxy of C++ csound::CounterpointNode class"""
    __swig_setmethods__ = {}
    for _s in [Node,Counterpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CounterpointNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node,Counterpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CounterpointNode, name)
    __repr__ = _swig_repr
    GenerateCounterpoint = _CsoundAC.CounterpointNode_GenerateCounterpoint
    CorrectCounterpoint = _CsoundAC.CounterpointNode_CorrectCounterpoint
    __swig_setmethods__["generationMode"] = _CsoundAC.CounterpointNode_generationMode_set
    __swig_getmethods__["generationMode"] = _CsoundAC.CounterpointNode_generationMode_get
    if _newclass:generationMode = _swig_property(_CsoundAC.CounterpointNode_generationMode_get, _CsoundAC.CounterpointNode_generationMode_set)
    __swig_setmethods__["musicMode"] = _CsoundAC.CounterpointNode_musicMode_set
    __swig_getmethods__["musicMode"] = _CsoundAC.CounterpointNode_musicMode_get
    if _newclass:musicMode = _swig_property(_CsoundAC.CounterpointNode_musicMode_get, _CsoundAC.CounterpointNode_musicMode_set)
    __swig_setmethods__["species"] = _CsoundAC.CounterpointNode_species_set
    __swig_getmethods__["species"] = _CsoundAC.CounterpointNode_species_get
    if _newclass:species = _swig_property(_CsoundAC.CounterpointNode_species_get, _CsoundAC.CounterpointNode_species_set)
    __swig_setmethods__["voices"] = _CsoundAC.CounterpointNode_voices_set
    __swig_getmethods__["voices"] = _CsoundAC.CounterpointNode_voices_get
    if _newclass:voices = _swig_property(_CsoundAC.CounterpointNode_voices_get, _CsoundAC.CounterpointNode_voices_set)
    __swig_setmethods__["secondsPerPulse"] = _CsoundAC.CounterpointNode_secondsPerPulse_set
    __swig_getmethods__["secondsPerPulse"] = _CsoundAC.CounterpointNode_secondsPerPulse_get
    if _newclass:secondsPerPulse = _swig_property(_CsoundAC.CounterpointNode_secondsPerPulse_get, _CsoundAC.CounterpointNode_secondsPerPulse_set)
    __swig_setmethods__["voiceBeginnings"] = _CsoundAC.CounterpointNode_voiceBeginnings_set
    __swig_getmethods__["voiceBeginnings"] = _CsoundAC.CounterpointNode_voiceBeginnings_get
    if _newclass:voiceBeginnings = _swig_property(_CsoundAC.CounterpointNode_voiceBeginnings_get, _CsoundAC.CounterpointNode_voiceBeginnings_set)
    def __init__(self): 
        """__init__(csound::CounterpointNode self) -> CounterpointNode"""
        this = _CsoundAC.new_CounterpointNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_CounterpointNode
    __del__ = lambda self : None;
    def produceOrTransform(self, *args):
        """produceOrTransform(CounterpointNode self, Score score, size_t beginAt, size_t endAt, Eigen::MatrixXd const & globalCoordinates)"""
        return _CsoundAC.CounterpointNode_produceOrTransform(self, *args)

CounterpointNode_swigregister = _CsoundAC.CounterpointNode_swigregister
CounterpointNode_swigregister(CounterpointNode)

class ScoreNode(Node):
    """Proxy of C++ csound::ScoreNode class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScoreNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScoreNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["duration"] = _CsoundAC.ScoreNode_duration_set
    __swig_getmethods__["duration"] = _CsoundAC.ScoreNode_duration_get
    if _newclass:duration = _swig_property(_CsoundAC.ScoreNode_duration_get, _CsoundAC.ScoreNode_duration_set)
    __swig_setmethods__["importFilename"] = _CsoundAC.ScoreNode_importFilename_set
    __swig_getmethods__["importFilename"] = _CsoundAC.ScoreNode_importFilename_get
    if _newclass:importFilename = _swig_property(_CsoundAC.ScoreNode_importFilename_get, _CsoundAC.ScoreNode_importFilename_set)
    def __init__(self): 
        """__init__(csound::ScoreNode self) -> ScoreNode"""
        this = _CsoundAC.new_ScoreNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_ScoreNode
    __del__ = lambda self : None;
    def produceOrTransform(self, *args):
        """produceOrTransform(ScoreNode self, Score collectingScore, size_t beginAt, size_t endAt, Eigen::MatrixXd const & coordinates)"""
        return _CsoundAC.ScoreNode_produceOrTransform(self, *args)

    def getScore(self):
        """getScore(ScoreNode self) -> Score"""
        return _CsoundAC.ScoreNode_getScore(self)

ScoreNode_swigregister = _CsoundAC.ScoreNode_swigregister
ScoreNode_swigregister(ScoreNode)

class Cell(ScoreNode):
    """Proxy of C++ csound::Cell class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repeatCount"] = _CsoundAC.Cell_repeatCount_set
    __swig_getmethods__["repeatCount"] = _CsoundAC.Cell_repeatCount_get
    if _newclass:repeatCount = _swig_property(_CsoundAC.Cell_repeatCount_get, _CsoundAC.Cell_repeatCount_set)
    __swig_setmethods__["relativeDuration"] = _CsoundAC.Cell_relativeDuration_set
    __swig_getmethods__["relativeDuration"] = _CsoundAC.Cell_relativeDuration_get
    if _newclass:relativeDuration = _swig_property(_CsoundAC.Cell_relativeDuration_get, _CsoundAC.Cell_relativeDuration_set)
    __swig_setmethods__["durationSeconds"] = _CsoundAC.Cell_durationSeconds_set
    __swig_getmethods__["durationSeconds"] = _CsoundAC.Cell_durationSeconds_get
    if _newclass:durationSeconds = _swig_property(_CsoundAC.Cell_durationSeconds_get, _CsoundAC.Cell_durationSeconds_set)
    def __init__(self): 
        """__init__(csound::Cell self) -> Cell"""
        this = _CsoundAC.new_Cell()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Cell
    __del__ = lambda self : None;
    def produceOrTransform(self, *args):
        """produceOrTransform(Cell self, Score collectingScore, size_t beginAt, size_t endAt, Eigen::MatrixXd const & coordinates)"""
        return _CsoundAC.Cell_produceOrTransform(self, *args)

Cell_swigregister = _CsoundAC.Cell_swigregister
Cell_swigregister(Cell)

class Intercut(ScoreNode):
    """Proxy of C++ csound::Intercut class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intercut, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Intercut, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Intercut self) -> Intercut"""
        this = _CsoundAC.new_Intercut()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Intercut
    __del__ = lambda self : None;
    def traverse(self, *args):
        """traverse(Intercut self, Eigen::MatrixXd const & globalCoordinates, Score collectingScore) -> Eigen::MatrixXd"""
        return _CsoundAC.Intercut_traverse(self, *args)

Intercut_swigregister = _CsoundAC.Intercut_swigregister
Intercut_swigregister(Intercut)

class Stack(ScoreNode):
    """Proxy of C++ csound::Stack class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stack, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["duration"] = _CsoundAC.Stack_duration_set
    __swig_getmethods__["duration"] = _CsoundAC.Stack_duration_get
    if _newclass:duration = _swig_property(_CsoundAC.Stack_duration_get, _CsoundAC.Stack_duration_set)
    def __init__(self): 
        """__init__(csound::Stack self) -> Stack"""
        this = _CsoundAC.new_Stack()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Stack
    __del__ = lambda self : None;
    def traverse(self, *args):
        """traverse(Stack self, Eigen::MatrixXd const & globalCoordinates, Score collectingScore) -> Eigen::MatrixXd"""
        return _CsoundAC.Stack_traverse(self, *args)

Stack_swigregister = _CsoundAC.Stack_swigregister
Stack_swigregister(Stack)

class Koch(ScoreNode):
    """Proxy of C++ csound::Koch class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Koch, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Koch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pitchOffsetsForLayers"] = _CsoundAC.Koch_pitchOffsetsForLayers_set
    __swig_getmethods__["pitchOffsetsForLayers"] = _CsoundAC.Koch_pitchOffsetsForLayers_get
    if _newclass:pitchOffsetsForLayers = _swig_property(_CsoundAC.Koch_pitchOffsetsForLayers_get, _CsoundAC.Koch_pitchOffsetsForLayers_set)
    def __init__(self): 
        """__init__(csound::Koch self) -> Koch"""
        this = _CsoundAC.new_Koch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Koch
    __del__ = lambda self : None;
    def traverse(self, *args):
        """traverse(Koch self, Eigen::MatrixXd const & globalCoordinates, Score collectingScore) -> Eigen::MatrixXd"""
        return _CsoundAC.Koch_traverse(self, *args)

    def setPitchOffsetForLayer(self, *args):
        """setPitchOffsetForLayer(Koch self, int layer, double pitch)"""
        return _CsoundAC.Koch_setPitchOffsetForLayer(self, *args)

Koch_swigregister = _CsoundAC.Koch_swigregister
Koch_swigregister(Koch)

class Hocket(ScoreNode):
    """Proxy of C++ csound::Hocket class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hocket, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hocket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["modulus"] = _CsoundAC.Hocket_modulus_set
    __swig_getmethods__["modulus"] = _CsoundAC.Hocket_modulus_get
    if _newclass:modulus = _swig_property(_CsoundAC.Hocket_modulus_get, _CsoundAC.Hocket_modulus_set)
    __swig_setmethods__["startingIndex"] = _CsoundAC.Hocket_startingIndex_set
    __swig_getmethods__["startingIndex"] = _CsoundAC.Hocket_startingIndex_get
    if _newclass:startingIndex = _swig_property(_CsoundAC.Hocket_startingIndex_get, _CsoundAC.Hocket_startingIndex_set)
    def __init__(self): 
        """__init__(csound::Hocket self) -> Hocket"""
        this = _CsoundAC.new_Hocket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Hocket
    __del__ = lambda self : None;
    def traverse(self, *args):
        """traverse(Hocket self, Eigen::MatrixXd const & globalCoordinates, Score collectingScore) -> Eigen::MatrixXd"""
        return _CsoundAC.Hocket_traverse(self, *args)

Hocket_swigregister = _CsoundAC.Hocket_swigregister
Hocket_swigregister(Hocket)

class Rescale(ScoreNode):
    """Proxy of C++ csound::Rescale class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rescale, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rescale, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Rescale self) -> Rescale"""
        this = _CsoundAC.new_Rescale()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Rescale
    __del__ = lambda self : None;
    def initialize(self):
        """initialize(Rescale self)"""
        return _CsoundAC.Rescale_initialize(self)

    def produceOrTransform(self, *args):
        """produceOrTransform(Rescale self, Score score, size_t beginAt, size_t endAt, Eigen::MatrixXd const & coordinates)"""
        return _CsoundAC.Rescale_produceOrTransform(self, *args)

    def setRescale(self, *args):
        """setRescale(Rescale self, int dimension, bool rescaleMinimum, bool rescaleRange, double targetMinimum, double targetRange)"""
        return _CsoundAC.Rescale_setRescale(self, *args)

    def getRescale(self, *args):
        """
        getRescale(Rescale self, int dimension, bool & rescaleMinimum, bool & rescaleRange, double & targetMinimum, 
            double & targetRange)
        """
        return _CsoundAC.Rescale_getRescale(self, *args)

Rescale_swigregister = _CsoundAC.Rescale_swigregister
Rescale_swigregister(Rescale)

class ScoreModel(Composition,Node):
    """Proxy of C++ csound::ScoreModel class"""
    __swig_setmethods__ = {}
    for _s in [Composition,Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScoreModel, name, value)
    __swig_getmethods__ = {}
    for _s in [Composition,Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScoreModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::ScoreModel self) -> ScoreModel"""
        this = _CsoundAC.new_ScoreModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_ScoreModel
    __del__ = lambda self : None;
    def initialize(self):
        """initialize(ScoreModel self)"""
        return _CsoundAC.ScoreModel_initialize(self)

    def generate(self):
        """generate(ScoreModel self) -> int"""
        return _CsoundAC.ScoreModel_generate(self)

    def clear(self):
        """clear(ScoreModel self)"""
        return _CsoundAC.ScoreModel_clear(self)

    def getThis(self):
        """getThis(ScoreModel self) -> long"""
        return _CsoundAC.ScoreModel_getThis(self)

    def getThisNode(self):
        """getThisNode(ScoreModel self) -> Node"""
        return _CsoundAC.ScoreModel_getThisNode(self)

ScoreModel_swigregister = _CsoundAC.ScoreModel_swigregister
ScoreModel_swigregister(ScoreModel)

class MusicModel(ScoreModel):
    """Proxy of C++ csound::MusicModel class"""
    __swig_setmethods__ = {}
    for _s in [ScoreModel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MusicModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreModel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MusicModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::MusicModel self) -> MusicModel"""
        this = _CsoundAC.new_MusicModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MusicModel
    __del__ = lambda self : None;
    def initialize(self):
        """initialize(MusicModel self)"""
        return _CsoundAC.MusicModel_initialize(self)

    def generate(self):
        """generate(MusicModel self) -> int"""
        return _CsoundAC.MusicModel_generate(self)

    def getThis(self):
        """getThis(MusicModel self) -> long"""
        return _CsoundAC.MusicModel_getThis(self)

    def getThisNode(self):
        """getThisNode(MusicModel self) -> Node"""
        return _CsoundAC.MusicModel_getThisNode(self)

    def createCsoundScore(self, addToScore="", extendSeconds=5.0):
        """
        createCsoundScore(MusicModel self, std::string addToScore="", double extendSeconds=5.0)
        createCsoundScore(MusicModel self, std::string addToScore="")
        createCsoundScore(MusicModel self)
        """
        return _CsoundAC.MusicModel_createCsoundScore(self, addToScore, extendSeconds)

    def render(self):
        """render(MusicModel self) -> int"""
        return _CsoundAC.MusicModel_render(self)

    def stop(self):
        """stop(MusicModel self)"""
        return _CsoundAC.MusicModel_stop(self)

    def perform(self):
        """perform(MusicModel self) -> int"""
        return _CsoundAC.MusicModel_perform(self)

    def clear(self):
        """clear(MusicModel self)"""
        return _CsoundAC.MusicModel_clear(self)

    def setCppSound(self, *args):
        """setCppSound(MusicModel self, CppSound * orchestra)"""
        return _CsoundAC.MusicModel_setCppSound(self, *args)

    def getCppSound(self):
        """getCppSound(MusicModel self) -> CppSound *"""
        return _CsoundAC.MusicModel_getCppSound(self)

    def setCsoundOrchestra(self, *args):
        """setCsoundOrchestra(MusicModel self, std::string orchestra)"""
        return _CsoundAC.MusicModel_setCsoundOrchestra(self, *args)

    def getCsoundOrchestra(self):
        """getCsoundOrchestra(MusicModel self) -> std::string"""
        return _CsoundAC.MusicModel_getCsoundOrchestra(self)

    def setCsoundScoreHeader(self, *args):
        """setCsoundScoreHeader(MusicModel self, std::string header)"""
        return _CsoundAC.MusicModel_setCsoundScoreHeader(self, *args)

    def getCsoundScoreHeader(self):
        """getCsoundScoreHeader(MusicModel self) -> std::string"""
        return _CsoundAC.MusicModel_getCsoundScoreHeader(self)

    def arrange(self, *args):
        """
        arrange(MusicModel self, int oldInstrumentNumber, int newInstrumentNumber)
        arrange(MusicModel self, int oldInstrumentNumber, int newInstrumentNumber, double gain)
        arrange(MusicModel self, int oldInstrumentNumber, int newInstrumentNumber, double gain, double pan)
        arrange(MusicModel self, int silenceInstrumentNumber, std::string csoundInstrumentName)
        arrange(MusicModel self, int silenceInstrumentNumber, std::string csoundInstrumentName, double gain)
        arrange(MusicModel self, int silenceInstrumentNumber, std::string csoundInstrumentName, double gain, double pan)
        """
        return _CsoundAC.MusicModel_arrange(self, *args)

    def removeArrangement(self):
        """removeArrangement(MusicModel self)"""
        return _CsoundAC.MusicModel_removeArrangement(self)

    def setCsoundCommand(self, *args):
        """setCsoundCommand(MusicModel self, std::string command)"""
        return _CsoundAC.MusicModel_setCsoundCommand(self, *args)

    def getCsoundCommand(self):
        """getCsoundCommand(MusicModel self) -> std::string"""
        return _CsoundAC.MusicModel_getCsoundCommand(self)

    def processArgs(self, *args):
        """processArgs(MusicModel self, std::vector< std::string,std::allocator< std::string > > const & args) -> int"""
        return _CsoundAC.MusicModel_processArgs(self, *args)

MusicModel_swigregister = _CsoundAC.MusicModel_swigregister
MusicModel_swigregister(MusicModel)

class Sequence(Node):
    """Proxy of C++ csound::Sequence class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sequence, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Sequence self) -> Sequence"""
        this = _CsoundAC.new_Sequence()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Sequence
    __del__ = lambda self : None;
    def traverse(self, *args):
        """traverse(Sequence self, Eigen::MatrixXd const & globalCoordinates, Score score) -> Eigen::MatrixXd"""
        return _CsoundAC.Sequence_traverse(self, *args)

Sequence_swigregister = _CsoundAC.Sequence_swigregister
Sequence_swigregister(Sequence)

class Random(Node):
    """Proxy of C++ csound::Random class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distribution"] = _CsoundAC.Random_distribution_set
    __swig_getmethods__["distribution"] = _CsoundAC.Random_distribution_get
    if _newclass:distribution = _swig_property(_CsoundAC.Random_distribution_get, _CsoundAC.Random_distribution_set)
    __swig_setmethods__["row"] = _CsoundAC.Random_row_set
    __swig_getmethods__["row"] = _CsoundAC.Random_row_get
    if _newclass:row = _swig_property(_CsoundAC.Random_row_get, _CsoundAC.Random_row_set)
    __swig_setmethods__["column"] = _CsoundAC.Random_column_set
    __swig_getmethods__["column"] = _CsoundAC.Random_column_get
    if _newclass:column = _swig_property(_CsoundAC.Random_column_get, _CsoundAC.Random_column_set)
    __swig_setmethods__["eventCount"] = _CsoundAC.Random_eventCount_set
    __swig_getmethods__["eventCount"] = _CsoundAC.Random_eventCount_get
    if _newclass:eventCount = _swig_property(_CsoundAC.Random_eventCount_get, _CsoundAC.Random_eventCount_set)
    __swig_setmethods__["incrementTime"] = _CsoundAC.Random_incrementTime_set
    __swig_getmethods__["incrementTime"] = _CsoundAC.Random_incrementTime_get
    if _newclass:incrementTime = _swig_property(_CsoundAC.Random_incrementTime_get, _CsoundAC.Random_incrementTime_set)
    __swig_setmethods__["minimum"] = _CsoundAC.Random_minimum_set
    __swig_getmethods__["minimum"] = _CsoundAC.Random_minimum_get
    if _newclass:minimum = _swig_property(_CsoundAC.Random_minimum_get, _CsoundAC.Random_minimum_set)
    __swig_setmethods__["maximum"] = _CsoundAC.Random_maximum_set
    __swig_getmethods__["maximum"] = _CsoundAC.Random_maximum_get
    if _newclass:maximum = _swig_property(_CsoundAC.Random_maximum_get, _CsoundAC.Random_maximum_set)
    __swig_setmethods__["q"] = _CsoundAC.Random_q_set
    __swig_getmethods__["q"] = _CsoundAC.Random_q_get
    if _newclass:q = _swig_property(_CsoundAC.Random_q_get, _CsoundAC.Random_q_set)
    __swig_setmethods__["a"] = _CsoundAC.Random_a_set
    __swig_getmethods__["a"] = _CsoundAC.Random_a_get
    if _newclass:a = _swig_property(_CsoundAC.Random_a_get, _CsoundAC.Random_a_set)
    __swig_setmethods__["b"] = _CsoundAC.Random_b_set
    __swig_getmethods__["b"] = _CsoundAC.Random_b_get
    if _newclass:b = _swig_property(_CsoundAC.Random_b_get, _CsoundAC.Random_b_set)
    __swig_setmethods__["c"] = _CsoundAC.Random_c_set
    __swig_getmethods__["c"] = _CsoundAC.Random_c_get
    if _newclass:c = _swig_property(_CsoundAC.Random_c_get, _CsoundAC.Random_c_set)
    __swig_setmethods__["Lambda"] = _CsoundAC.Random_Lambda_set
    __swig_getmethods__["Lambda"] = _CsoundAC.Random_Lambda_get
    if _newclass:Lambda = _swig_property(_CsoundAC.Random_Lambda_get, _CsoundAC.Random_Lambda_set)
    __swig_setmethods__["mean"] = _CsoundAC.Random_mean_set
    __swig_getmethods__["mean"] = _CsoundAC.Random_mean_get
    if _newclass:mean = _swig_property(_CsoundAC.Random_mean_get, _CsoundAC.Random_mean_set)
    __swig_setmethods__["sigma"] = _CsoundAC.Random_sigma_set
    __swig_getmethods__["sigma"] = _CsoundAC.Random_sigma_get
    if _newclass:sigma = _swig_property(_CsoundAC.Random_sigma_get, _CsoundAC.Random_sigma_set)
    def __init__(self): 
        """__init__(csound::Random self) -> Random"""
        this = _CsoundAC.new_Random()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Random
    __del__ = lambda self : None;
    def sample(self):
        """sample(Random self) -> double"""
        return _CsoundAC.Random_sample(self)

    def getRandomCoordinates(self):
        """getRandomCoordinates(Random self) -> Eigen::MatrixXd"""
        return _CsoundAC.Random_getRandomCoordinates(self)

    def createDistribution(self, *args):
        """createDistribution(Random self, std::string distribution)"""
        return _CsoundAC.Random_createDistribution(self, *args)

    def produceOrTransform(self, *args):
        """produceOrTransform(Random self, Score score, size_t beginAt, size_t endAt, Eigen::MatrixXd const & compositeCoordinates)"""
        return _CsoundAC.Random_produceOrTransform(self, *args)

    def seed(*args):
        """seed(int s)"""
        return _CsoundAC.Random_seed(*args)

    if _newclass:seed = staticmethod(seed)
    __swig_getmethods__["seed"] = lambda x: seed
Random_swigregister = _CsoundAC.Random_swigregister
Random_swigregister(Random)

def Random_seed(*args):
  """Random_seed(int s)"""
  return _CsoundAC.Random_seed(*args)

class ImageToScore(ScoreNode):
    """Proxy of C++ csound::ImageToScore class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageToScore, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageToScore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::ImageToScore self) -> ImageToScore"""
        this = _CsoundAC.new_ImageToScore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_ImageToScore
    __del__ = lambda self : None;
    def setImageFilename(self, *args):
        """setImageFilename(ImageToScore self, std::string imageFilename)"""
        return _CsoundAC.ImageToScore_setImageFilename(self, *args)

    def getImageFilename(self):
        """getImageFilename(ImageToScore self) -> std::string"""
        return _CsoundAC.ImageToScore_getImageFilename(self)

    def setMaximumVoiceCount(self, *args):
        """setMaximumVoiceCount(ImageToScore self, size_t maximumVoiceCount)"""
        return _CsoundAC.ImageToScore_setMaximumVoiceCount(self, *args)

    def getMaximumVoiceCount(self):
        """getMaximumVoiceCount(ImageToScore self) -> size_t"""
        return _CsoundAC.ImageToScore_getMaximumVoiceCount(self)

    def setMinimumValue(self, *args):
        """setMinimumValue(ImageToScore self, double minimumValue)"""
        return _CsoundAC.ImageToScore_setMinimumValue(self, *args)

    def getMinimumValue(self):
        """getMinimumValue(ImageToScore self) -> double"""
        return _CsoundAC.ImageToScore_getMinimumValue(self)

    def generate(self):
        """generate(ImageToScore self)"""
        return _CsoundAC.ImageToScore_generate(self)

ImageToScore_swigregister = _CsoundAC.ImageToScore_swigregister
ImageToScore_swigregister(ImageToScore)

class StrangeAttractor(ScoreNode):
    """Proxy of C++ csound::StrangeAttractor class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrangeAttractor, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrangeAttractor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["randomNode"] = _CsoundAC.StrangeAttractor_randomNode_set
    __swig_getmethods__["randomNode"] = _CsoundAC.StrangeAttractor_randomNode_get
    if _newclass:randomNode = _swig_property(_CsoundAC.StrangeAttractor_randomNode_get, _CsoundAC.StrangeAttractor_randomNode_set)
    def __init__(self): 
        """__init__(csound::StrangeAttractor self) -> StrangeAttractor"""
        this = _CsoundAC.new_StrangeAttractor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_StrangeAttractor
    __del__ = lambda self : None;
    def setCode(self, *args):
        """setCode(StrangeAttractor self, std::string code)"""
        return _CsoundAC.StrangeAttractor_setCode(self, *args)

    def getCode(self):
        """getCode(StrangeAttractor self) -> std::string"""
        return _CsoundAC.StrangeAttractor_getCode(self)

    def setIterationCount(self, *args):
        """setIterationCount(StrangeAttractor self, size_t iterationCount)"""
        return _CsoundAC.StrangeAttractor_setIterationCount(self, *args)

    def getIterationCount(self):
        """getIterationCount(StrangeAttractor self) -> size_t"""
        return _CsoundAC.StrangeAttractor_getIterationCount(self)

    def setIteration(self, *args):
        """setIteration(StrangeAttractor self, size_t iteration)"""
        return _CsoundAC.StrangeAttractor_setIteration(self, *args)

    def getIteration(self):
        """getIteration(StrangeAttractor self) -> size_t"""
        return _CsoundAC.StrangeAttractor_getIteration(self)

    def setAttractorType(self, *args):
        """setAttractorType(StrangeAttractor self, int attractorType)"""
        return _CsoundAC.StrangeAttractor_setAttractorType(self, *args)

    def getAttractorType(self):
        """getAttractorType(StrangeAttractor self) -> int"""
        return _CsoundAC.StrangeAttractor_getAttractorType(self)

    def setScoreType(self, *args):
        """setScoreType(StrangeAttractor self, int attractorType)"""
        return _CsoundAC.StrangeAttractor_setScoreType(self, *args)

    def getScoreType(self):
        """getScoreType(StrangeAttractor self) -> int"""
        return _CsoundAC.StrangeAttractor_getScoreType(self)

    def initialize(self):
        """initialize(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_initialize(self)

    def reinitialize(self):
        """reinitialize(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_reinitialize(self)

    def reset(self):
        """reset(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_reset(self)

    def codeRandomize(self):
        """codeRandomize(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_codeRandomize(self)

    def specialFunctions(self):
        """specialFunctions(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_specialFunctions(self)

    def getDimensionAndOrder(self):
        """getDimensionAndOrder(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_getDimensionAndOrder(self)

    def getCoefficients(self):
        """getCoefficients(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_getCoefficients(self)

    def shuffleRandomNumbers(self):
        """shuffleRandomNumbers(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_shuffleRandomNumbers(self)

    def calculateLyupanovExponent(self):
        """calculateLyupanovExponent(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_calculateLyupanovExponent(self)

    def calculateFractalDimension(self):
        """calculateFractalDimension(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_calculateFractalDimension(self)

    def getFractalDimension(self):
        """getFractalDimension(StrangeAttractor self) -> double"""
        return _CsoundAC.StrangeAttractor_getFractalDimension(self)

    def getLyupanovExponent(self):
        """getLyupanovExponent(StrangeAttractor self) -> double"""
        return _CsoundAC.StrangeAttractor_getLyupanovExponent(self)

    def setX(self, *args):
        """setX(StrangeAttractor self, double X)"""
        return _CsoundAC.StrangeAttractor_setX(self, *args)

    def getX(self):
        """getX(StrangeAttractor self) -> double"""
        return _CsoundAC.StrangeAttractor_getX(self)

    def setY(self, *args):
        """setY(StrangeAttractor self, double X)"""
        return _CsoundAC.StrangeAttractor_setY(self, *args)

    def getY(self):
        """getY(StrangeAttractor self) -> double"""
        return _CsoundAC.StrangeAttractor_getY(self)

    def setZ(self, *args):
        """setZ(StrangeAttractor self, double X)"""
        return _CsoundAC.StrangeAttractor_setZ(self, *args)

    def getZ(self):
        """getZ(StrangeAttractor self) -> double"""
        return _CsoundAC.StrangeAttractor_getZ(self)

    def setW(self, *args):
        """setW(StrangeAttractor self, double X)"""
        return _CsoundAC.StrangeAttractor_setW(self, *args)

    def getW(self):
        """getW(StrangeAttractor self) -> double"""
        return _CsoundAC.StrangeAttractor_getW(self)

    def searchForAttractor(self):
        """searchForAttractor(StrangeAttractor self) -> bool"""
        return _CsoundAC.StrangeAttractor_searchForAttractor(self)

    def evaluateAttractor(self):
        """evaluateAttractor(StrangeAttractor self) -> bool"""
        return _CsoundAC.StrangeAttractor_evaluateAttractor(self)

    def iterate(self):
        """iterate(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_iterate(self)

    def generate(self):
        """generate(StrangeAttractor self)"""
        return _CsoundAC.StrangeAttractor_generate(self)

    def render(self, *args):
        """render(StrangeAttractor self, int N, double X, double Y, double Z, double W)"""
        return _CsoundAC.StrangeAttractor_render(self, *args)

    def setDimensionCount(self, *args):
        """setDimensionCount(StrangeAttractor self, int D)"""
        return _CsoundAC.StrangeAttractor_setDimensionCount(self, *args)

    def getDimensionCount(self):
        """getDimensionCount(StrangeAttractor self) -> int"""
        return _CsoundAC.StrangeAttractor_getDimensionCount(self)

StrangeAttractor_swigregister = _CsoundAC.StrangeAttractor_swigregister
StrangeAttractor_swigregister(StrangeAttractor)

class Lindenmayer(ScoreNode):
    """Proxy of C++ csound::Lindenmayer class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lindenmayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lindenmayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Lindenmayer self) -> Lindenmayer"""
        this = _CsoundAC.new_Lindenmayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Lindenmayer
    __del__ = lambda self : None;
    def getIterationCount(self):
        """getIterationCount(Lindenmayer self) -> int"""
        return _CsoundAC.Lindenmayer_getIterationCount(self)

    def setIterationCount(self, *args):
        """setIterationCount(Lindenmayer self, int count)"""
        return _CsoundAC.Lindenmayer_setIterationCount(self, *args)

    def getAngle(self):
        """getAngle(Lindenmayer self) -> double"""
        return _CsoundAC.Lindenmayer_getAngle(self)

    def setAngle(self, *args):
        """setAngle(Lindenmayer self, double angle)"""
        return _CsoundAC.Lindenmayer_setAngle(self, *args)

    def getAxiom(self):
        """getAxiom(Lindenmayer self) -> std::string"""
        return _CsoundAC.Lindenmayer_getAxiom(self)

    def setAxiom(self, *args):
        """setAxiom(Lindenmayer self, std::string axiom)"""
        return _CsoundAC.Lindenmayer_setAxiom(self, *args)

    def addRule(self, *args):
        """addRule(Lindenmayer self, std::string command, std::string replacement)"""
        return _CsoundAC.Lindenmayer_addRule(self, *args)

    def getReplacement(self, *args):
        """getReplacement(Lindenmayer self, std::string command) -> std::string"""
        return _CsoundAC.Lindenmayer_getReplacement(self, *args)

    def generate(self):
        """generate(Lindenmayer self)"""
        return _CsoundAC.Lindenmayer_generate(self)

    def clear(self):
        """clear(Lindenmayer self)"""
        return _CsoundAC.Lindenmayer_clear(self)

Lindenmayer_swigregister = _CsoundAC.Lindenmayer_swigregister
Lindenmayer_swigregister(Lindenmayer)

class MCRM(ScoreNode):
    """Proxy of C++ csound::MCRM class"""
    __swig_setmethods__ = {}
    for _s in [ScoreNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCRM, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCRM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::MCRM self) -> MCRM"""
        this = _CsoundAC.new_MCRM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_MCRM
    __del__ = lambda self : None;
    def setDepth(self, *args):
        """setDepth(MCRM self, int depth)"""
        return _CsoundAC.MCRM_setDepth(self, *args)

    def resize(self, *args):
        """resize(MCRM self, size_t transformations)"""
        return _CsoundAC.MCRM_resize(self, *args)

    def setTransformationElement(self, *args):
        """setTransformationElement(MCRM self, size_t index, size_t row, size_t column, double value)"""
        return _CsoundAC.MCRM_setTransformationElement(self, *args)

    def setWeight(self, *args):
        """setWeight(MCRM self, size_t precursor, size_t successor, double weight)"""
        return _CsoundAC.MCRM_setWeight(self, *args)

    def generate(self):
        """generate(MCRM self)"""
        return _CsoundAC.MCRM_generate(self)

    def produceOrTransform(self, *args):
        """produceOrTransform(MCRM self, Score score, size_t beginAt, size_t endAt, Eigen::MatrixXd const & coordinates)"""
        return _CsoundAC.MCRM_produceOrTransform(self, *args)

MCRM_swigregister = _CsoundAC.MCRM_swigregister
MCRM_swigregister(MCRM)

class Soundfile(_object):
    """Proxy of C++ csound::Soundfile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Soundfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Soundfile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::Soundfile self) -> Soundfile"""
        this = _CsoundAC.new_Soundfile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Soundfile
    __del__ = lambda self : None;
    def getFramesPerSecond(self):
        """getFramesPerSecond(Soundfile self) -> int"""
        return _CsoundAC.Soundfile_getFramesPerSecond(self)

    def setFramesPerSecond(self, *args):
        """setFramesPerSecond(Soundfile self, int framesPerSecond)"""
        return _CsoundAC.Soundfile_setFramesPerSecond(self, *args)

    def getChannelsPerFrame(self):
        """getChannelsPerFrame(Soundfile self) -> int"""
        return _CsoundAC.Soundfile_getChannelsPerFrame(self)

    def setChannelsPerFrame(self, *args):
        """setChannelsPerFrame(Soundfile self, int channelsPerFrame)"""
        return _CsoundAC.Soundfile_setChannelsPerFrame(self, *args)

    def getFormat(self):
        """getFormat(Soundfile self) -> int"""
        return _CsoundAC.Soundfile_getFormat(self)

    def setFormat(self, *args):
        """setFormat(Soundfile self, int format)"""
        return _CsoundAC.Soundfile_setFormat(self, *args)

    def getFrames(self):
        """getFrames(Soundfile self) -> int"""
        return _CsoundAC.Soundfile_getFrames(self)

    def open(self, *args):
        """open(Soundfile self, std::string filename) -> int"""
        return _CsoundAC.Soundfile_open(self, *args)

    def create(self, *args):
        """
        create(Soundfile self, std::string filename, int framesPerSecond=44100, int channelsPerFrame=2, int format=SF_FORMAT_WAV|SF_FORMAT_FLOAT) -> int
        create(Soundfile self, std::string filename, int framesPerSecond=44100, int channelsPerFrame=2) -> int
        create(Soundfile self, std::string filename, int framesPerSecond=44100) -> int
        create(Soundfile self, std::string filename) -> int
        """
        return _CsoundAC.Soundfile_create(self, *args)

    def seek(self, *args):
        """
        seek(Soundfile self, int frames, int whence=0) -> int
        seek(Soundfile self, int frames) -> int
        """
        return _CsoundAC.Soundfile_seek(self, *args)

    def seekSeconds(self, *args):
        """
        seekSeconds(Soundfile self, double seconds, int whence=0) -> double
        seekSeconds(Soundfile self, double seconds) -> double
        """
        return _CsoundAC.Soundfile_seekSeconds(self, *args)

    def readFrame(self, *args):
        """readFrame(Soundfile self, double * outputFrame) -> int"""
        return _CsoundAC.Soundfile_readFrame(self, *args)

    def writeFrame(self, *args):
        """writeFrame(Soundfile self, double * inputFrame) -> int"""
        return _CsoundAC.Soundfile_writeFrame(self, *args)

    def readFrames(self, *args):
        """readFrames(Soundfile self, double * outputFrames) -> int"""
        return _CsoundAC.Soundfile_readFrames(self, *args)

    def writeFrames(self, *args):
        """writeFrames(Soundfile self, double * inputFrames) -> int"""
        return _CsoundAC.Soundfile_writeFrames(self, *args)

    def mixFrames(self, *args):
        """mixFrames(Soundfile self, double * inputFrames, double * mixedFrames) -> int"""
        return _CsoundAC.Soundfile_mixFrames(self, *args)

    def updateHeader(self):
        """updateHeader(Soundfile self)"""
        return _CsoundAC.Soundfile_updateHeader(self)

    def close(self):
        """close(Soundfile self) -> int"""
        return _CsoundAC.Soundfile_close(self)

    def error(self):
        """error(Soundfile self)"""
        return _CsoundAC.Soundfile_error(self)

    def blank(self, *args):
        """blank(Soundfile self, double duration)"""
        return _CsoundAC.Soundfile_blank(self, *args)

    def jonesParksGrain(self, *args):
        """
        jonesParksGrain(Soundfile self, double centerTimeSeconds, double durationSeconds, double beginningFrequencyHz, double centerFrequencyHz, 
            double centerAmplitude, double centerPhaseOffsetRadians, 
            double pan, bool synchronousPhase=True, bool buffer=False)
        jonesParksGrain(Soundfile self, double centerTimeSeconds, double durationSeconds, double beginningFrequencyHz, double centerFrequencyHz, 
            double centerAmplitude, double centerPhaseOffsetRadians, 
            double pan, bool synchronousPhase=True)
        jonesParksGrain(Soundfile self, double centerTimeSeconds, double durationSeconds, double beginningFrequencyHz, double centerFrequencyHz, 
            double centerAmplitude, double centerPhaseOffsetRadians, 
            double pan)
        """
        return _CsoundAC.Soundfile_jonesParksGrain(self, *args)

    def cosineGrain(self, *args):
        """
        cosineGrain(Soundfile self, double centerTimeSeconds, double durationSeconds, double frequencyHz, double amplitude, 
            double phaseOffsetRadians, double pan, bool synchronousPhase=True, bool buffer=False)
        cosineGrain(Soundfile self, double centerTimeSeconds, double durationSeconds, double frequencyHz, double amplitude, 
            double phaseOffsetRadians, double pan, bool synchronousPhase=True)
        cosineGrain(Soundfile self, double centerTimeSeconds, double durationSeconds, double frequencyHz, double amplitude, 
            double phaseOffsetRadians, double pan)
        """
        return _CsoundAC.Soundfile_cosineGrain(self, *args)

    def mixGrain(self):
        """mixGrain(Soundfile self)"""
        return _CsoundAC.Soundfile_mixGrain(self)

Soundfile_swigregister = _CsoundAC.Soundfile_swigregister
Soundfile_swigregister(Soundfile)

class ChordVector(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChordVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChordVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ChordVector self) -> SwigPyIterator"""
        return _CsoundAC.ChordVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ChordVector self) -> bool"""
        return _CsoundAC.ChordVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ChordVector self) -> bool"""
        return _CsoundAC.ChordVector___bool__(self)

    def __len__(self):
        """__len__(ChordVector self) -> std::vector< std::vector< double > >::size_type"""
        return _CsoundAC.ChordVector___len__(self)

    def pop(self):
        """pop(ChordVector self) -> DoubleVector"""
        return _CsoundAC.ChordVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ChordVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> ChordVector"""
        return _CsoundAC.ChordVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ChordVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, 
            ChordVector v=std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >())
        __setslice__(ChordVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        """
        return _CsoundAC.ChordVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ChordVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _CsoundAC.ChordVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ChordVector self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(ChordVector self, PySliceObject * slice)
        """
        return _CsoundAC.ChordVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ChordVector self, PySliceObject * slice) -> ChordVector
        __getitem__(ChordVector self, std::vector< std::vector< double > >::difference_type i) -> DoubleVector
        """
        return _CsoundAC.ChordVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ChordVector self, PySliceObject * slice, ChordVector v)
        __setitem__(ChordVector self, PySliceObject * slice)
        __setitem__(ChordVector self, std::vector< std::vector< double > >::difference_type i, DoubleVector x)
        """
        return _CsoundAC.ChordVector___setitem__(self, *args)

    def append(self, *args):
        """append(ChordVector self, DoubleVector x)"""
        return _CsoundAC.ChordVector_append(self, *args)

    def empty(self):
        """empty(ChordVector self) -> bool"""
        return _CsoundAC.ChordVector_empty(self)

    def size(self):
        """size(ChordVector self) -> std::vector< std::vector< double > >::size_type"""
        return _CsoundAC.ChordVector_size(self)

    def clear(self):
        """clear(ChordVector self)"""
        return _CsoundAC.ChordVector_clear(self)

    def swap(self, *args):
        """swap(ChordVector self, ChordVector v)"""
        return _CsoundAC.ChordVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ChordVector self) -> std::vector< std::vector< double > >::allocator_type"""
        return _CsoundAC.ChordVector_get_allocator(self)

    def begin(self):
        """begin(ChordVector self) -> std::vector< std::vector< double > >::iterator"""
        return _CsoundAC.ChordVector_begin(self)

    def end(self):
        """end(ChordVector self) -> std::vector< std::vector< double > >::iterator"""
        return _CsoundAC.ChordVector_end(self)

    def rbegin(self):
        """rbegin(ChordVector self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _CsoundAC.ChordVector_rbegin(self)

    def rend(self):
        """rend(ChordVector self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _CsoundAC.ChordVector_rend(self)

    def pop_back(self):
        """pop_back(ChordVector self)"""
        return _CsoundAC.ChordVector_pop_back(self)

    def erase(self, *args):
        """
        erase(ChordVector self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(ChordVector self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _CsoundAC.ChordVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> ChordVector
        __init__(std::vector<(std::vector<(double)>)> self, ChordVector arg2) -> ChordVector
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> ChordVector
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, DoubleVector value) -> ChordVector
        """
        this = _CsoundAC.new_ChordVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ChordVector self, DoubleVector x)"""
        return _CsoundAC.ChordVector_push_back(self, *args)

    def front(self):
        """front(ChordVector self) -> DoubleVector"""
        return _CsoundAC.ChordVector_front(self)

    def back(self):
        """back(ChordVector self) -> DoubleVector"""
        return _CsoundAC.ChordVector_back(self)

    def assign(self, *args):
        """assign(ChordVector self, std::vector< std::vector< double > >::size_type n, DoubleVector x)"""
        return _CsoundAC.ChordVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(ChordVector self, std::vector< std::vector< double > >::size_type new_size)
        resize(ChordVector self, std::vector< std::vector< double > >::size_type new_size, DoubleVector x)
        """
        return _CsoundAC.ChordVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(ChordVector self, std::vector< std::vector< double > >::iterator pos, DoubleVector x) -> std::vector< std::vector< double > >::iterator
        insert(ChordVector self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, 
            DoubleVector x)
        """
        return _CsoundAC.ChordVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(ChordVector self, std::vector< std::vector< double > >::size_type n)"""
        return _CsoundAC.ChordVector_reserve(self, *args)

    def capacity(self):
        """capacity(ChordVector self) -> std::vector< std::vector< double > >::size_type"""
        return _CsoundAC.ChordVector_capacity(self)

    __swig_destroy__ = _CsoundAC.delete_ChordVector
    __del__ = lambda self : None;
ChordVector_swigregister = _CsoundAC.ChordVector_swigregister
ChordVector_swigregister(ChordVector)

class Voicelead(_object):
    """Proxy of C++ csound::Voicelead class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Voicelead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Voicelead, name)
    __repr__ = _swig_repr
    def pc(*args):
        """
        pc(double pitch, size_t divisionsPerOctave=12) -> double
        pc(double pitch) -> double
        """
        return _CsoundAC.Voicelead_pc(*args)

    if _newclass:pc = staticmethod(pc)
    __swig_getmethods__["pc"] = lambda x: pc
    def voiceleading(*args):
        """voiceleading(DoubleVector chord1, DoubleVector chord2) -> DoubleVector"""
        return _CsoundAC.Voicelead_voiceleading(*args)

    if _newclass:voiceleading = staticmethod(voiceleading)
    __swig_getmethods__["voiceleading"] = lambda x: voiceleading
    def simpler(*args):
        """simpler(DoubleVector source, DoubleVector destination1, DoubleVector destination2, bool avoidParallels) -> DoubleVector"""
        return _CsoundAC.Voicelead_simpler(*args)

    if _newclass:simpler = staticmethod(simpler)
    __swig_getmethods__["simpler"] = lambda x: simpler
    def smoothness(*args):
        """smoothness(DoubleVector chord1, DoubleVector chord2) -> double"""
        return _CsoundAC.Voicelead_smoothness(*args)

    if _newclass:smoothness = staticmethod(smoothness)
    __swig_getmethods__["smoothness"] = lambda x: smoothness
    def euclideanDistance(*args):
        """euclideanDistance(DoubleVector chord1, DoubleVector chord2) -> double"""
        return _CsoundAC.Voicelead_euclideanDistance(*args)

    if _newclass:euclideanDistance = staticmethod(euclideanDistance)
    __swig_getmethods__["euclideanDistance"] = lambda x: euclideanDistance
    def areParallel(*args):
        """areParallel(DoubleVector chord1, DoubleVector chord2) -> bool"""
        return _CsoundAC.Voicelead_areParallel(*args)

    if _newclass:areParallel = staticmethod(areParallel)
    __swig_getmethods__["areParallel"] = lambda x: areParallel
    def closer(*args):
        """closer(DoubleVector source, DoubleVector destination1, DoubleVector destination2, bool avoidParallels) -> DoubleVector"""
        return _CsoundAC.Voicelead_closer(*args)

    if _newclass:closer = staticmethod(closer)
    __swig_getmethods__["closer"] = lambda x: closer
    def rotate(*args):
        """rotate(DoubleVector chord) -> DoubleVector"""
        return _CsoundAC.Voicelead_rotate(*args)

    if _newclass:rotate = staticmethod(rotate)
    __swig_getmethods__["rotate"] = lambda x: rotate
    def rotations(*args):
        """rotations(DoubleVector chord) -> ChordVector"""
        return _CsoundAC.Voicelead_rotations(*args)

    if _newclass:rotations = staticmethod(rotations)
    __swig_getmethods__["rotations"] = lambda x: rotations
    def pcs(*args):
        """
        pcs(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
        pcs(DoubleVector chord) -> DoubleVector
        """
        return _CsoundAC.Voicelead_pcs(*args)

    if _newclass:pcs = staticmethod(pcs)
    __swig_getmethods__["pcs"] = lambda x: pcs
    def uniquePcs(*args):
        """
        uniquePcs(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
        uniquePcs(DoubleVector chord) -> DoubleVector
        """
        return _CsoundAC.Voicelead_uniquePcs(*args)

    if _newclass:uniquePcs = staticmethod(uniquePcs)
    __swig_getmethods__["uniquePcs"] = lambda x: uniquePcs
    def pitchClassSetToM(*args):
        """
        pitchClassSetToM(DoubleVector chord, size_t divisionsPerOctave=12) -> double
        pitchClassSetToM(DoubleVector chord) -> double
        """
        return _CsoundAC.Voicelead_pitchClassSetToM(*args)

    if _newclass:pitchClassSetToM = staticmethod(pitchClassSetToM)
    __swig_getmethods__["pitchClassSetToM"] = lambda x: pitchClassSetToM
    def mToPitchClassSet(*args):
        """
        mToPitchClassSet(double pcn, size_t divisionsPerOctave=12) -> DoubleVector
        mToPitchClassSet(double pcn) -> DoubleVector
        """
        return _CsoundAC.Voicelead_mToPitchClassSet(*args)

    if _newclass:mToPitchClassSet = staticmethod(mToPitchClassSet)
    __swig_getmethods__["mToPitchClassSet"] = lambda x: mToPitchClassSet
    def pitchClassSetToPandT(*args):
        """
        pitchClassSetToPandT(DoubleVector pcs, size_t divisionsPerOctave=12) -> DoubleVector
        pitchClassSetToPandT(DoubleVector pcs) -> DoubleVector
        """
        return _CsoundAC.Voicelead_pitchClassSetToPandT(*args)

    if _newclass:pitchClassSetToPandT = staticmethod(pitchClassSetToPandT)
    __swig_getmethods__["pitchClassSetToPandT"] = lambda x: pitchClassSetToPandT
    def pAndTtoPitchClassSet(*args):
        """
        pAndTtoPitchClassSet(double prime, double transposition, size_t divisionsPerOctave=12) -> DoubleVector
        pAndTtoPitchClassSet(double prime, double transposition) -> DoubleVector
        """
        return _CsoundAC.Voicelead_pAndTtoPitchClassSet(*args)

    if _newclass:pAndTtoPitchClassSet = staticmethod(pAndTtoPitchClassSet)
    __swig_getmethods__["pAndTtoPitchClassSet"] = lambda x: pAndTtoPitchClassSet
    def closest(*args):
        """closest(DoubleVector source, ChordVector destinations, bool avoidParallels) -> DoubleVector"""
        return _CsoundAC.Voicelead_closest(*args)

    if _newclass:closest = staticmethod(closest)
    __swig_getmethods__["closest"] = lambda x: closest
    def voicelead(*args):
        """
        voicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
            bool avoidParallels, size_t divisionsPerOctave=12) -> DoubleVector
        voicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
            bool avoidParallels) -> DoubleVector
        """
        return _CsoundAC.Voicelead_voicelead(*args)

    if _newclass:voicelead = staticmethod(voicelead)
    __swig_getmethods__["voicelead"] = lambda x: voicelead
    def recursiveVoicelead(*args):
        """
        recursiveVoicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
            bool avoidParallels, size_t divisionsPerOctave=12) -> DoubleVector
        recursiveVoicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
            bool avoidParallels) -> DoubleVector
        """
        return _CsoundAC.Voicelead_recursiveVoicelead(*args)

    if _newclass:recursiveVoicelead = staticmethod(recursiveVoicelead)
    __swig_getmethods__["recursiveVoicelead"] = lambda x: recursiveVoicelead
    def closestPitch(*args):
        """closestPitch(double pitch, DoubleVector pitches) -> double"""
        return _CsoundAC.Voicelead_closestPitch(*args)

    if _newclass:closestPitch = staticmethod(closestPitch)
    __swig_getmethods__["closestPitch"] = lambda x: closestPitch
    def conformToPitchClassSet(*args):
        """
        conformToPitchClassSet(double pitch, DoubleVector pcs, size_t divisionsPerOctave=12) -> double
        conformToPitchClassSet(double pitch, DoubleVector pcs) -> double
        """
        return _CsoundAC.Voicelead_conformToPitchClassSet(*args)

    if _newclass:conformToPitchClassSet = staticmethod(conformToPitchClassSet)
    __swig_getmethods__["conformToPitchClassSet"] = lambda x: conformToPitchClassSet
    def invert(*args):
        """invert(DoubleVector chord) -> DoubleVector"""
        return _CsoundAC.Voicelead_invert(*args)

    if _newclass:invert = staticmethod(invert)
    __swig_getmethods__["invert"] = lambda x: invert
    def inversions(*args):
        """inversions(DoubleVector chord) -> ChordVector"""
        return _CsoundAC.Voicelead_inversions(*args)

    if _newclass:inversions = staticmethod(inversions)
    __swig_getmethods__["inversions"] = lambda x: inversions
    def toOrigin(*args):
        """toOrigin(DoubleVector chord) -> DoubleVector"""
        return _CsoundAC.Voicelead_toOrigin(*args)

    if _newclass:toOrigin = staticmethod(toOrigin)
    __swig_getmethods__["toOrigin"] = lambda x: toOrigin
    def normalChord(*args):
        """normalChord(DoubleVector chord) -> DoubleVector"""
        return _CsoundAC.Voicelead_normalChord(*args)

    if _newclass:normalChord = staticmethod(normalChord)
    __swig_getmethods__["normalChord"] = lambda x: normalChord
    def primeChord(*args):
        """primeChord(DoubleVector chord) -> DoubleVector"""
        return _CsoundAC.Voicelead_primeChord(*args)

    if _newclass:primeChord = staticmethod(primeChord)
    __swig_getmethods__["primeChord"] = lambda x: primeChord
    def nameToC(*args):
        """nameToC(std::string name, size_t divisionsPerOctave_) -> double"""
        return _CsoundAC.Voicelead_nameToC(*args)

    if _newclass:nameToC = staticmethod(nameToC)
    __swig_getmethods__["nameToC"] = lambda x: nameToC
    def mToC(*args):
        """mToC(double M, size_t divisionsPerOctave) -> double"""
        return _CsoundAC.Voicelead_mToC(*args)

    if _newclass:mToC = staticmethod(mToC)
    __swig_getmethods__["mToC"] = lambda x: mToC
    def cToM(*args):
        """
        cToM(double C, size_t divisionsPerOctaven=12) -> double
        cToM(double C) -> double
        """
        return _CsoundAC.Voicelead_cToM(*args)

    if _newclass:cToM = staticmethod(cToM)
    __swig_getmethods__["cToM"] = lambda x: cToM
    def cToP(*args):
        """
        cToP(double C, size_t divisionsPerOctave=12) -> double
        cToP(double C) -> double
        """
        return _CsoundAC.Voicelead_cToP(*args)

    if _newclass:cToP = staticmethod(cToP)
    __swig_getmethods__["cToP"] = lambda x: cToP
    def pToC(*args):
        """
        pToC(double Z, size_t divisionsPerOctave=12) -> double
        pToC(double Z) -> double
        """
        return _CsoundAC.Voicelead_pToC(*args)

    if _newclass:pToC = staticmethod(pToC)
    __swig_getmethods__["pToC"] = lambda x: pToC
    def orderedPcs(*args):
        """
        orderedPcs(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
        orderedPcs(DoubleVector chord) -> DoubleVector
        """
        return _CsoundAC.Voicelead_orderedPcs(*args)

    if _newclass:orderedPcs = staticmethod(orderedPcs)
    __swig_getmethods__["orderedPcs"] = lambda x: orderedPcs
    def sortByAscendingDistance(*args):
        """
        sortByAscendingDistance(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
        sortByAscendingDistance(DoubleVector chord) -> DoubleVector
        """
        return _CsoundAC.Voicelead_sortByAscendingDistance(*args)

    if _newclass:sortByAscendingDistance = staticmethod(sortByAscendingDistance)
    __swig_getmethods__["sortByAscendingDistance"] = lambda x: sortByAscendingDistance
    def nonBijectiveVoicelead(*args):
        """
        nonBijectiveVoicelead(DoubleVector sourceChord, DoubleVector targetPitchClassSet, size_t divisionsPerOctave=12) -> ChordVector
        nonBijectiveVoicelead(DoubleVector sourceChord, DoubleVector targetPitchClassSet) -> ChordVector
        """
        return _CsoundAC.Voicelead_nonBijectiveVoicelead(*args)

    if _newclass:nonBijectiveVoicelead = staticmethod(nonBijectiveVoicelead)
    __swig_getmethods__["nonBijectiveVoicelead"] = lambda x: nonBijectiveVoicelead
    def pToPrimeChord(*args):
        """
        pToPrimeChord(double P, size_t divisionsPerOctave=12) -> DoubleVector
        pToPrimeChord(double P) -> DoubleVector
        """
        return _CsoundAC.Voicelead_pToPrimeChord(*args)

    if _newclass:pToPrimeChord = staticmethod(pToPrimeChord)
    __swig_getmethods__["pToPrimeChord"] = lambda x: pToPrimeChord
    def initializePrimeChordsForDivisionsPerOctave(*args):
        """initializePrimeChordsForDivisionsPerOctave(size_t divisionsPerOctave)"""
        return _CsoundAC.Voicelead_initializePrimeChordsForDivisionsPerOctave(*args)

    if _newclass:initializePrimeChordsForDivisionsPerOctave = staticmethod(initializePrimeChordsForDivisionsPerOctave)
    __swig_getmethods__["initializePrimeChordsForDivisionsPerOctave"] = lambda x: initializePrimeChordsForDivisionsPerOctave
    def ptvToChord(*args):
        """
        ptvToChord(size_t P, size_t T, size_t V_, size_t lowest, size_t range, size_t divisionsPerOctave=12) -> DoubleVector
        ptvToChord(size_t P, size_t T, size_t V_, size_t lowest, size_t range) -> DoubleVector
        """
        return _CsoundAC.Voicelead_ptvToChord(*args)

    if _newclass:ptvToChord = staticmethod(ptvToChord)
    __swig_getmethods__["ptvToChord"] = lambda x: ptvToChord
    def chordToPTV(*args):
        """
        chordToPTV(DoubleVector chord, size_t lowestPitch, size_t highestPitch, size_t divisionsPerOctave=12) -> DoubleVector
        chordToPTV(DoubleVector chord, size_t lowestPitch, size_t highestPitch) -> DoubleVector
        """
        return _CsoundAC.Voicelead_chordToPTV(*args)

    if _newclass:chordToPTV = staticmethod(chordToPTV)
    __swig_getmethods__["chordToPTV"] = lambda x: chordToPTV
    def voicings(*args):
        """voicings(DoubleVector chord, double lowest, double highest, size_t divisionsPerOctave) -> ChordVector"""
        return _CsoundAC.Voicelead_voicings(*args)

    if _newclass:voicings = staticmethod(voicings)
    __swig_getmethods__["voicings"] = lambda x: voicings
    def addOctave(*args):
        """addOctave(DoubleVector lowestVoicing, DoubleVector newVoicing, size_t maximumPitch, size_t divisionsPerOctave) -> bool"""
        return _CsoundAC.Voicelead_addOctave(*args)

    if _newclass:addOctave = staticmethod(addOctave)
    __swig_getmethods__["addOctave"] = lambda x: addOctave
    def wrap(*args):
        """
        wrap(DoubleVector chord, size_t lowestPitch, size_t highestPitch, size_t divisionsPerOctave=12) -> DoubleVector
        wrap(DoubleVector chord, size_t lowestPitch, size_t highestPitch) -> DoubleVector
        """
        return _CsoundAC.Voicelead_wrap(*args)

    if _newclass:wrap = staticmethod(wrap)
    __swig_getmethods__["wrap"] = lambda x: wrap
    def transpose(*args):
        """transpose(DoubleVector chord, double semitones) -> DoubleVector"""
        return _CsoundAC.Voicelead_transpose(*args)

    if _newclass:transpose = staticmethod(transpose)
    __swig_getmethods__["transpose"] = lambda x: transpose
    def T(*args):
        """
        T(double p, double n) -> double
        T(DoubleVector c, double n) -> DoubleVector
        """
        return _CsoundAC.Voicelead_T(*args)

    if _newclass:T = staticmethod(T)
    __swig_getmethods__["T"] = lambda x: T
    def I(*args):
        """
        I(double p, double n) -> double
        I(DoubleVector c, double n) -> DoubleVector
        """
        return _CsoundAC.Voicelead_I(*args)

    if _newclass:I = staticmethod(I)
    __swig_getmethods__["I"] = lambda x: I
    def K(*args):
        """K(DoubleVector c) -> DoubleVector"""
        return _CsoundAC.Voicelead_K(*args)

    if _newclass:K = staticmethod(K)
    __swig_getmethods__["K"] = lambda x: K
    def Tform(*args):
        """
        Tform(DoubleVector X, DoubleVector Y, double g=1.0) -> bool
        Tform(DoubleVector X, DoubleVector Y) -> bool
        """
        return _CsoundAC.Voicelead_Tform(*args)

    if _newclass:Tform = staticmethod(Tform)
    __swig_getmethods__["Tform"] = lambda x: Tform
    def Iform(*args):
        """
        Iform(DoubleVector X, DoubleVector Y, double g=1.0) -> bool
        Iform(DoubleVector X, DoubleVector Y) -> bool
        """
        return _CsoundAC.Voicelead_Iform(*args)

    if _newclass:Iform = staticmethod(Iform)
    __swig_getmethods__["Iform"] = lambda x: Iform
    def Q(*args):
        """
        Q(DoubleVector c, double n, DoubleVector s, double g=1.0) -> DoubleVector
        Q(DoubleVector c, double n, DoubleVector s) -> DoubleVector
        """
        return _CsoundAC.Voicelead_Q(*args)

    if _newclass:Q = staticmethod(Q)
    __swig_getmethods__["Q"] = lambda x: Q
    def __init__(self): 
        """__init__(csound::Voicelead self) -> Voicelead"""
        this = _CsoundAC.new_Voicelead()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Voicelead
    __del__ = lambda self : None;
Voicelead_swigregister = _CsoundAC.Voicelead_swigregister
Voicelead_swigregister(Voicelead)

def Voicelead_pc(*args):
  """
    pc(double pitch, size_t divisionsPerOctave=12) -> double
    Voicelead_pc(double pitch) -> double
    """
  return _CsoundAC.Voicelead_pc(*args)

def Voicelead_voiceleading(*args):
  """Voicelead_voiceleading(DoubleVector chord1, DoubleVector chord2) -> DoubleVector"""
  return _CsoundAC.Voicelead_voiceleading(*args)

def Voicelead_simpler(*args):
  """Voicelead_simpler(DoubleVector source, DoubleVector destination1, DoubleVector destination2, bool avoidParallels) -> DoubleVector"""
  return _CsoundAC.Voicelead_simpler(*args)

def Voicelead_smoothness(*args):
  """Voicelead_smoothness(DoubleVector chord1, DoubleVector chord2) -> double"""
  return _CsoundAC.Voicelead_smoothness(*args)

def Voicelead_euclideanDistance(*args):
  """Voicelead_euclideanDistance(DoubleVector chord1, DoubleVector chord2) -> double"""
  return _CsoundAC.Voicelead_euclideanDistance(*args)

def Voicelead_areParallel(*args):
  """Voicelead_areParallel(DoubleVector chord1, DoubleVector chord2) -> bool"""
  return _CsoundAC.Voicelead_areParallel(*args)

def Voicelead_closer(*args):
  """Voicelead_closer(DoubleVector source, DoubleVector destination1, DoubleVector destination2, bool avoidParallels) -> DoubleVector"""
  return _CsoundAC.Voicelead_closer(*args)

def Voicelead_rotate(*args):
  """Voicelead_rotate(DoubleVector chord) -> DoubleVector"""
  return _CsoundAC.Voicelead_rotate(*args)

def Voicelead_rotations(*args):
  """Voicelead_rotations(DoubleVector chord) -> ChordVector"""
  return _CsoundAC.Voicelead_rotations(*args)

def Voicelead_pcs(*args):
  """
    pcs(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_pcs(DoubleVector chord) -> DoubleVector
    """
  return _CsoundAC.Voicelead_pcs(*args)

def Voicelead_uniquePcs(*args):
  """
    uniquePcs(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_uniquePcs(DoubleVector chord) -> DoubleVector
    """
  return _CsoundAC.Voicelead_uniquePcs(*args)

def Voicelead_pitchClassSetToM(*args):
  """
    pitchClassSetToM(DoubleVector chord, size_t divisionsPerOctave=12) -> double
    Voicelead_pitchClassSetToM(DoubleVector chord) -> double
    """
  return _CsoundAC.Voicelead_pitchClassSetToM(*args)

def Voicelead_mToPitchClassSet(*args):
  """
    mToPitchClassSet(double pcn, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_mToPitchClassSet(double pcn) -> DoubleVector
    """
  return _CsoundAC.Voicelead_mToPitchClassSet(*args)

def Voicelead_pitchClassSetToPandT(*args):
  """
    pitchClassSetToPandT(DoubleVector pcs, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_pitchClassSetToPandT(DoubleVector pcs) -> DoubleVector
    """
  return _CsoundAC.Voicelead_pitchClassSetToPandT(*args)

def Voicelead_pAndTtoPitchClassSet(*args):
  """
    pAndTtoPitchClassSet(double prime, double transposition, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_pAndTtoPitchClassSet(double prime, double transposition) -> DoubleVector
    """
  return _CsoundAC.Voicelead_pAndTtoPitchClassSet(*args)

def Voicelead_closest(*args):
  """Voicelead_closest(DoubleVector source, ChordVector destinations, bool avoidParallels) -> DoubleVector"""
  return _CsoundAC.Voicelead_closest(*args)

def Voicelead_voicelead(*args):
  """
    voicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
        bool avoidParallels, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_voicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
        bool avoidParallels) -> DoubleVector
    """
  return _CsoundAC.Voicelead_voicelead(*args)

def Voicelead_recursiveVoicelead(*args):
  """
    recursiveVoicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
        bool avoidParallels, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_recursiveVoicelead(DoubleVector source, DoubleVector targetPitchClassSet, double lowest, double range, 
        bool avoidParallels) -> DoubleVector
    """
  return _CsoundAC.Voicelead_recursiveVoicelead(*args)

def Voicelead_closestPitch(*args):
  """Voicelead_closestPitch(double pitch, DoubleVector pitches) -> double"""
  return _CsoundAC.Voicelead_closestPitch(*args)

def Voicelead_conformToPitchClassSet(*args):
  """
    conformToPitchClassSet(double pitch, DoubleVector pcs, size_t divisionsPerOctave=12) -> double
    Voicelead_conformToPitchClassSet(double pitch, DoubleVector pcs) -> double
    """
  return _CsoundAC.Voicelead_conformToPitchClassSet(*args)

def Voicelead_invert(*args):
  """Voicelead_invert(DoubleVector chord) -> DoubleVector"""
  return _CsoundAC.Voicelead_invert(*args)

def Voicelead_inversions(*args):
  """Voicelead_inversions(DoubleVector chord) -> ChordVector"""
  return _CsoundAC.Voicelead_inversions(*args)

def Voicelead_toOrigin(*args):
  """Voicelead_toOrigin(DoubleVector chord) -> DoubleVector"""
  return _CsoundAC.Voicelead_toOrigin(*args)

def Voicelead_normalChord(*args):
  """Voicelead_normalChord(DoubleVector chord) -> DoubleVector"""
  return _CsoundAC.Voicelead_normalChord(*args)

def Voicelead_primeChord(*args):
  """Voicelead_primeChord(DoubleVector chord) -> DoubleVector"""
  return _CsoundAC.Voicelead_primeChord(*args)

def Voicelead_nameToC(*args):
  """Voicelead_nameToC(std::string name, size_t divisionsPerOctave_) -> double"""
  return _CsoundAC.Voicelead_nameToC(*args)

def Voicelead_mToC(*args):
  """Voicelead_mToC(double M, size_t divisionsPerOctave) -> double"""
  return _CsoundAC.Voicelead_mToC(*args)

def Voicelead_cToM(*args):
  """
    cToM(double C, size_t divisionsPerOctaven=12) -> double
    Voicelead_cToM(double C) -> double
    """
  return _CsoundAC.Voicelead_cToM(*args)

def Voicelead_cToP(*args):
  """
    cToP(double C, size_t divisionsPerOctave=12) -> double
    Voicelead_cToP(double C) -> double
    """
  return _CsoundAC.Voicelead_cToP(*args)

def Voicelead_pToC(*args):
  """
    pToC(double Z, size_t divisionsPerOctave=12) -> double
    Voicelead_pToC(double Z) -> double
    """
  return _CsoundAC.Voicelead_pToC(*args)

def Voicelead_orderedPcs(*args):
  """
    orderedPcs(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_orderedPcs(DoubleVector chord) -> DoubleVector
    """
  return _CsoundAC.Voicelead_orderedPcs(*args)

def Voicelead_sortByAscendingDistance(*args):
  """
    sortByAscendingDistance(DoubleVector chord, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_sortByAscendingDistance(DoubleVector chord) -> DoubleVector
    """
  return _CsoundAC.Voicelead_sortByAscendingDistance(*args)

def Voicelead_nonBijectiveVoicelead(*args):
  """
    nonBijectiveVoicelead(DoubleVector sourceChord, DoubleVector targetPitchClassSet, size_t divisionsPerOctave=12) -> ChordVector
    Voicelead_nonBijectiveVoicelead(DoubleVector sourceChord, DoubleVector targetPitchClassSet) -> ChordVector
    """
  return _CsoundAC.Voicelead_nonBijectiveVoicelead(*args)

def Voicelead_pToPrimeChord(*args):
  """
    pToPrimeChord(double P, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_pToPrimeChord(double P) -> DoubleVector
    """
  return _CsoundAC.Voicelead_pToPrimeChord(*args)

def Voicelead_initializePrimeChordsForDivisionsPerOctave(*args):
  """Voicelead_initializePrimeChordsForDivisionsPerOctave(size_t divisionsPerOctave)"""
  return _CsoundAC.Voicelead_initializePrimeChordsForDivisionsPerOctave(*args)

def Voicelead_ptvToChord(*args):
  """
    ptvToChord(size_t P, size_t T, size_t V_, size_t lowest, size_t range, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_ptvToChord(size_t P, size_t T, size_t V_, size_t lowest, size_t range) -> DoubleVector
    """
  return _CsoundAC.Voicelead_ptvToChord(*args)

def Voicelead_chordToPTV(*args):
  """
    chordToPTV(DoubleVector chord, size_t lowestPitch, size_t highestPitch, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_chordToPTV(DoubleVector chord, size_t lowestPitch, size_t highestPitch) -> DoubleVector
    """
  return _CsoundAC.Voicelead_chordToPTV(*args)

def Voicelead_voicings(*args):
  """Voicelead_voicings(DoubleVector chord, double lowest, double highest, size_t divisionsPerOctave) -> ChordVector"""
  return _CsoundAC.Voicelead_voicings(*args)

def Voicelead_addOctave(*args):
  """Voicelead_addOctave(DoubleVector lowestVoicing, DoubleVector newVoicing, size_t maximumPitch, size_t divisionsPerOctave) -> bool"""
  return _CsoundAC.Voicelead_addOctave(*args)

def Voicelead_wrap(*args):
  """
    wrap(DoubleVector chord, size_t lowestPitch, size_t highestPitch, size_t divisionsPerOctave=12) -> DoubleVector
    Voicelead_wrap(DoubleVector chord, size_t lowestPitch, size_t highestPitch) -> DoubleVector
    """
  return _CsoundAC.Voicelead_wrap(*args)

def Voicelead_transpose(*args):
  """Voicelead_transpose(DoubleVector chord, double semitones) -> DoubleVector"""
  return _CsoundAC.Voicelead_transpose(*args)

def Voicelead_T(*args):
  """
    T(double p, double n) -> double
    Voicelead_T(DoubleVector c, double n) -> DoubleVector
    """
  return _CsoundAC.Voicelead_T(*args)

def Voicelead_I(*args):
  """
    I(double p, double n) -> double
    Voicelead_I(DoubleVector c, double n) -> DoubleVector
    """
  return _CsoundAC.Voicelead_I(*args)

def Voicelead_K(*args):
  """Voicelead_K(DoubleVector c) -> DoubleVector"""
  return _CsoundAC.Voicelead_K(*args)

def Voicelead_Tform(*args):
  """
    Tform(DoubleVector X, DoubleVector Y, double g=1.0) -> bool
    Voicelead_Tform(DoubleVector X, DoubleVector Y) -> bool
    """
  return _CsoundAC.Voicelead_Tform(*args)

def Voicelead_Iform(*args):
  """
    Iform(DoubleVector X, DoubleVector Y, double g=1.0) -> bool
    Voicelead_Iform(DoubleVector X, DoubleVector Y) -> bool
    """
  return _CsoundAC.Voicelead_Iform(*args)

def Voicelead_Q(*args):
  """
    Q(DoubleVector c, double n, DoubleVector s, double g=1.0) -> DoubleVector
    Voicelead_Q(DoubleVector c, double n, DoubleVector s) -> DoubleVector
    """
  return _CsoundAC.Voicelead_Q(*args)
cvar = _CsoundAC.cvar
Voicelead.semitonesPerOctave = _CsoundAC.cvar.Voicelead_semitonesPerOctave

class VoiceleadingOperation(_object):
    """Proxy of C++ csound::VoiceleadingOperation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoiceleadingOperation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoiceleadingOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::VoiceleadingOperation self) -> VoiceleadingOperation"""
        this = _CsoundAC.new_VoiceleadingOperation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_VoiceleadingOperation
    __del__ = lambda self : None;
    __swig_setmethods__["beginTime"] = _CsoundAC.VoiceleadingOperation_beginTime_set
    __swig_getmethods__["beginTime"] = _CsoundAC.VoiceleadingOperation_beginTime_get
    if _newclass:beginTime = _swig_property(_CsoundAC.VoiceleadingOperation_beginTime_get, _CsoundAC.VoiceleadingOperation_beginTime_set)
    __swig_setmethods__["rescaledBeginTime"] = _CsoundAC.VoiceleadingOperation_rescaledBeginTime_set
    __swig_getmethods__["rescaledBeginTime"] = _CsoundAC.VoiceleadingOperation_rescaledBeginTime_get
    if _newclass:rescaledBeginTime = _swig_property(_CsoundAC.VoiceleadingOperation_rescaledBeginTime_get, _CsoundAC.VoiceleadingOperation_rescaledBeginTime_set)
    __swig_setmethods__["endTime"] = _CsoundAC.VoiceleadingOperation_endTime_set
    __swig_getmethods__["endTime"] = _CsoundAC.VoiceleadingOperation_endTime_get
    if _newclass:endTime = _swig_property(_CsoundAC.VoiceleadingOperation_endTime_get, _CsoundAC.VoiceleadingOperation_endTime_set)
    __swig_setmethods__["rescaledEndTime"] = _CsoundAC.VoiceleadingOperation_rescaledEndTime_set
    __swig_getmethods__["rescaledEndTime"] = _CsoundAC.VoiceleadingOperation_rescaledEndTime_get
    if _newclass:rescaledEndTime = _swig_property(_CsoundAC.VoiceleadingOperation_rescaledEndTime_get, _CsoundAC.VoiceleadingOperation_rescaledEndTime_set)
    __swig_setmethods__["P"] = _CsoundAC.VoiceleadingOperation_P_set
    __swig_getmethods__["P"] = _CsoundAC.VoiceleadingOperation_P_get
    if _newclass:P = _swig_property(_CsoundAC.VoiceleadingOperation_P_get, _CsoundAC.VoiceleadingOperation_P_set)
    __swig_setmethods__["T"] = _CsoundAC.VoiceleadingOperation_T_set
    __swig_getmethods__["T"] = _CsoundAC.VoiceleadingOperation_T_get
    if _newclass:T = _swig_property(_CsoundAC.VoiceleadingOperation_T_get, _CsoundAC.VoiceleadingOperation_T_set)
    __swig_setmethods__["C"] = _CsoundAC.VoiceleadingOperation_C_set
    __swig_getmethods__["C"] = _CsoundAC.VoiceleadingOperation_C_get
    if _newclass:C = _swig_property(_CsoundAC.VoiceleadingOperation_C_get, _CsoundAC.VoiceleadingOperation_C_set)
    __swig_setmethods__["K"] = _CsoundAC.VoiceleadingOperation_K_set
    __swig_getmethods__["K"] = _CsoundAC.VoiceleadingOperation_K_get
    if _newclass:K = _swig_property(_CsoundAC.VoiceleadingOperation_K_get, _CsoundAC.VoiceleadingOperation_K_set)
    __swig_setmethods__["Q"] = _CsoundAC.VoiceleadingOperation_Q_set
    __swig_getmethods__["Q"] = _CsoundAC.VoiceleadingOperation_Q_get
    if _newclass:Q = _swig_property(_CsoundAC.VoiceleadingOperation_Q_get, _CsoundAC.VoiceleadingOperation_Q_set)
    __swig_setmethods__["V"] = _CsoundAC.VoiceleadingOperation_V_set
    __swig_getmethods__["V"] = _CsoundAC.VoiceleadingOperation_V_get
    if _newclass:V = _swig_property(_CsoundAC.VoiceleadingOperation_V_get, _CsoundAC.VoiceleadingOperation_V_set)
    __swig_setmethods__["L"] = _CsoundAC.VoiceleadingOperation_L_set
    __swig_getmethods__["L"] = _CsoundAC.VoiceleadingOperation_L_get
    if _newclass:L = _swig_property(_CsoundAC.VoiceleadingOperation_L_get, _CsoundAC.VoiceleadingOperation_L_set)
    __swig_setmethods__["begin"] = _CsoundAC.VoiceleadingOperation_begin_set
    __swig_getmethods__["begin"] = _CsoundAC.VoiceleadingOperation_begin_get
    if _newclass:begin = _swig_property(_CsoundAC.VoiceleadingOperation_begin_get, _CsoundAC.VoiceleadingOperation_begin_set)
    __swig_setmethods__["end"] = _CsoundAC.VoiceleadingOperation_end_set
    __swig_getmethods__["end"] = _CsoundAC.VoiceleadingOperation_end_get
    if _newclass:end = _swig_property(_CsoundAC.VoiceleadingOperation_end_get, _CsoundAC.VoiceleadingOperation_end_set)
    __swig_setmethods__["avoidParallels"] = _CsoundAC.VoiceleadingOperation_avoidParallels_set
    __swig_getmethods__["avoidParallels"] = _CsoundAC.VoiceleadingOperation_avoidParallels_get
    if _newclass:avoidParallels = _swig_property(_CsoundAC.VoiceleadingOperation_avoidParallels_get, _CsoundAC.VoiceleadingOperation_avoidParallels_set)
VoiceleadingOperation_swigregister = _CsoundAC.VoiceleadingOperation_swigregister
VoiceleadingOperation_swigregister(VoiceleadingOperation)


def __lshift__(*args):
  """__lshift__(std::ostream & stream, VoiceleadingOperation operation) -> std::ostream &"""
  return _CsoundAC.__lshift__(*args)
class VoiceleadingNode(Node):
    """Proxy of C++ csound::VoiceleadingNode class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoiceleadingNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VoiceleadingNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operations"] = _CsoundAC.VoiceleadingNode_operations_set
    __swig_getmethods__["operations"] = _CsoundAC.VoiceleadingNode_operations_get
    if _newclass:operations = _swig_property(_CsoundAC.VoiceleadingNode_operations_get, _CsoundAC.VoiceleadingNode_operations_set)
    __swig_setmethods__["base"] = _CsoundAC.VoiceleadingNode_base_set
    __swig_getmethods__["base"] = _CsoundAC.VoiceleadingNode_base_get
    if _newclass:base = _swig_property(_CsoundAC.VoiceleadingNode_base_get, _CsoundAC.VoiceleadingNode_base_set)
    __swig_setmethods__["range"] = _CsoundAC.VoiceleadingNode_range_set
    __swig_getmethods__["range"] = _CsoundAC.VoiceleadingNode_range_get
    if _newclass:range = _swig_property(_CsoundAC.VoiceleadingNode_range_get, _CsoundAC.VoiceleadingNode_range_set)
    __swig_setmethods__["modality"] = _CsoundAC.VoiceleadingNode_modality_set
    __swig_getmethods__["modality"] = _CsoundAC.VoiceleadingNode_modality_get
    if _newclass:modality = _swig_property(_CsoundAC.VoiceleadingNode_modality_get, _CsoundAC.VoiceleadingNode_modality_set)
    __swig_setmethods__["rescaleTimes"] = _CsoundAC.VoiceleadingNode_rescaleTimes_set
    __swig_getmethods__["rescaleTimes"] = _CsoundAC.VoiceleadingNode_rescaleTimes_get
    if _newclass:rescaleTimes = _swig_property(_CsoundAC.VoiceleadingNode_rescaleTimes_get, _CsoundAC.VoiceleadingNode_rescaleTimes_set)
    __swig_setmethods__["avoidParallels"] = _CsoundAC.VoiceleadingNode_avoidParallels_set
    __swig_getmethods__["avoidParallels"] = _CsoundAC.VoiceleadingNode_avoidParallels_get
    if _newclass:avoidParallels = _swig_property(_CsoundAC.VoiceleadingNode_avoidParallels_get, _CsoundAC.VoiceleadingNode_avoidParallels_set)
    __swig_setmethods__["divisionsPerOctave"] = _CsoundAC.VoiceleadingNode_divisionsPerOctave_set
    __swig_getmethods__["divisionsPerOctave"] = _CsoundAC.VoiceleadingNode_divisionsPerOctave_get
    if _newclass:divisionsPerOctave = _swig_property(_CsoundAC.VoiceleadingNode_divisionsPerOctave_get, _CsoundAC.VoiceleadingNode_divisionsPerOctave_set)
    def __init__(self): 
        """__init__(csound::VoiceleadingNode self) -> VoiceleadingNode"""
        this = _CsoundAC.new_VoiceleadingNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_VoiceleadingNode
    __del__ = lambda self : None;
    def apply(self, *args):
        """apply(VoiceleadingNode self, Score score, VoiceleadingOperation priorOperation, VoiceleadingOperation currentOperation)"""
        return _CsoundAC.VoiceleadingNode_apply(self, *args)

    def produceOrTransform(self, *args):
        """produceOrTransform(VoiceleadingNode self, Score collectingNode, size_t beginAt, size_t endAt, Eigen::MatrixXd const & coordinates)"""
        return _CsoundAC.VoiceleadingNode_produceOrTransform(self, *args)

    def PT(self, *args):
        """PT(VoiceleadingNode self, double time, double P_, double T)"""
        return _CsoundAC.VoiceleadingNode_PT(self, *args)

    def PTV(self, *args):
        """PTV(VoiceleadingNode self, double time, double P_, double T, double V_)"""
        return _CsoundAC.VoiceleadingNode_PTV(self, *args)

    def PTL(self, *args):
        """
        PTL(VoiceleadingNode self, double time, double P_, double T, bool avoidParallels=True)
        PTL(VoiceleadingNode self, double time, double P_, double T)
        """
        return _CsoundAC.VoiceleadingNode_PTL(self, *args)

    def C(self, *args):
        """
        C(VoiceleadingNode self, double time, double C_)
        C(VoiceleadingNode self, double time, std::string C_)
        """
        return _CsoundAC.VoiceleadingNode_C(self, *args)

    def CV(self, *args):
        """
        CV(VoiceleadingNode self, double time, double C_, double V_)
        CV(VoiceleadingNode self, double time, std::string C_, double V_)
        """
        return _CsoundAC.VoiceleadingNode_CV(self, *args)

    def CL(self, *args):
        """
        CL(VoiceleadingNode self, double time, double C_, bool avoidParallels=True)
        CL(VoiceleadingNode self, double time, double C_)
        CL(VoiceleadingNode self, double time, std::string C_, bool avoidParallels=True)
        CL(VoiceleadingNode self, double time, std::string C_)
        """
        return _CsoundAC.VoiceleadingNode_CL(self, *args)

    def K(self, *args):
        """K(VoiceleadingNode self, double time)"""
        return _CsoundAC.VoiceleadingNode_K(self, *args)

    def KV(self, *args):
        """KV(VoiceleadingNode self, double time, double V_)"""
        return _CsoundAC.VoiceleadingNode_KV(self, *args)

    def KL(self, *args):
        """
        KL(VoiceleadingNode self, double time, bool avoidParallels=True)
        KL(VoiceleadingNode self, double time)
        """
        return _CsoundAC.VoiceleadingNode_KL(self, *args)

    def Q(self, *args):
        """Q(VoiceleadingNode self, double time, double Q_)"""
        return _CsoundAC.VoiceleadingNode_Q(self, *args)

    def QV(self, *args):
        """QV(VoiceleadingNode self, double time, double Q_, double V_)"""
        return _CsoundAC.VoiceleadingNode_QV(self, *args)

    def QL(self, *args):
        """
        QL(VoiceleadingNode self, double time, double Q_, bool avoidParallels=True)
        QL(VoiceleadingNode self, double time, double Q_)
        """
        return _CsoundAC.VoiceleadingNode_QL(self, *args)

    def V(self, *args):
        """V(VoiceleadingNode self, double time, double V_)"""
        return _CsoundAC.VoiceleadingNode_V(self, *args)

    def L(self, *args):
        """
        L(VoiceleadingNode self, double time, bool avoidParallels=True)
        L(VoiceleadingNode self, double time)
        """
        return _CsoundAC.VoiceleadingNode_L(self, *args)

    def transform(self, *args):
        """
        transform(VoiceleadingNode self, Score score, bool rescaleTime=False)
        transform(VoiceleadingNode self, Score score)
        """
        return _CsoundAC.VoiceleadingNode_transform(self, *args)

    def setModality(self, *args):
        """setModality(VoiceleadingNode self, DoubleVector pcs)"""
        return _CsoundAC.VoiceleadingNode_setModality(self, *args)

    def getModality(self):
        """getModality(VoiceleadingNode self) -> DoubleVector"""
        return _CsoundAC.VoiceleadingNode_getModality(self)

VoiceleadingNode_swigregister = _CsoundAC.VoiceleadingNode_swigregister
VoiceleadingNode_swigregister(VoiceleadingNode)

class StringMap(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(StringMap self) -> SwigPyIterator"""
        return _CsoundAC.StringMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(StringMap self) -> bool"""
        return _CsoundAC.StringMap___nonzero__(self)

    def __bool__(self):
        """__bool__(StringMap self) -> bool"""
        return _CsoundAC.StringMap___bool__(self)

    def __len__(self):
        """__len__(StringMap self) -> std::map< std::string,std::string >::size_type"""
        return _CsoundAC.StringMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(StringMap self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &"""
        return _CsoundAC.StringMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(StringMap self, std::map< std::string,std::string >::key_type const & key)"""
        return _CsoundAC.StringMap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(StringMap self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _CsoundAC.StringMap_has_key(self, *args)

    def keys(self):
        """keys(StringMap self) -> PyObject *"""
        return _CsoundAC.StringMap_keys(self)

    def values(self):
        """values(StringMap self) -> PyObject *"""
        return _CsoundAC.StringMap_values(self)

    def items(self):
        """items(StringMap self) -> PyObject *"""
        return _CsoundAC.StringMap_items(self)

    def __contains__(self, *args):
        """__contains__(StringMap self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _CsoundAC.StringMap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(StringMap self) -> SwigPyIterator"""
        return _CsoundAC.StringMap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(StringMap self) -> SwigPyIterator"""
        return _CsoundAC.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(StringMap self, std::map< std::string,std::string >::key_type const & key)
        __setitem__(StringMap self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)
        """
        return _CsoundAC.StringMap___setitem__(self, *args)

    def asdict(self):
        """asdict(StringMap self) -> PyObject *"""
        return _CsoundAC.StringMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> StringMap
        __init__(std::map<(std::string,std::string)> self) -> StringMap
        __init__(std::map<(std::string,std::string)> self, StringMap arg2) -> StringMap
        """
        this = _CsoundAC.new_StringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(StringMap self) -> bool"""
        return _CsoundAC.StringMap_empty(self)

    def size(self):
        """size(StringMap self) -> std::map< std::string,std::string >::size_type"""
        return _CsoundAC.StringMap_size(self)

    def clear(self):
        """clear(StringMap self)"""
        return _CsoundAC.StringMap_clear(self)

    def swap(self, *args):
        """swap(StringMap self, StringMap v)"""
        return _CsoundAC.StringMap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(StringMap self) -> std::map< std::string,std::string >::allocator_type"""
        return _CsoundAC.StringMap_get_allocator(self)

    def begin(self):
        """begin(StringMap self) -> std::map< std::string,std::string >::iterator"""
        return _CsoundAC.StringMap_begin(self)

    def end(self):
        """end(StringMap self) -> std::map< std::string,std::string >::iterator"""
        return _CsoundAC.StringMap_end(self)

    def rbegin(self):
        """rbegin(StringMap self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _CsoundAC.StringMap_rbegin(self)

    def rend(self):
        """rend(StringMap self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _CsoundAC.StringMap_rend(self)

    def count(self, *args):
        """count(StringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type"""
        return _CsoundAC.StringMap_count(self, *args)

    def erase(self, *args):
        """
        erase(StringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type
        erase(StringMap self, std::map< std::string,std::string >::iterator position)
        erase(StringMap self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)
        """
        return _CsoundAC.StringMap_erase(self, *args)

    def find(self, *args):
        """find(StringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _CsoundAC.StringMap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(StringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _CsoundAC.StringMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(StringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _CsoundAC.StringMap_upper_bound(self, *args)

    __swig_destroy__ = _CsoundAC.delete_StringMap
    __del__ = lambda self : None;
StringMap_swigregister = _CsoundAC.StringMap_swigregister
StringMap_swigregister(StringMap)


def printChord(*args):
  """printChord(std::ostream & stream, std::string label, DoubleVector chord)"""
  return _CsoundAC.printChord(*args)
class Turtle(_object):
    """Proxy of C++ csound::Turtle class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Turtle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Turtle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["note"] = _CsoundAC.Turtle_note_set
    __swig_getmethods__["note"] = _CsoundAC.Turtle_note_get
    if _newclass:note = _swig_property(_CsoundAC.Turtle_note_get, _CsoundAC.Turtle_note_set)
    __swig_setmethods__["step"] = _CsoundAC.Turtle_step_set
    __swig_getmethods__["step"] = _CsoundAC.Turtle_step_get
    if _newclass:step = _swig_property(_CsoundAC.Turtle_step_get, _CsoundAC.Turtle_step_set)
    __swig_setmethods__["orientation"] = _CsoundAC.Turtle_orientation_set
    __swig_getmethods__["orientation"] = _CsoundAC.Turtle_orientation_get
    if _newclass:orientation = _swig_property(_CsoundAC.Turtle_orientation_get, _CsoundAC.Turtle_orientation_set)
    __swig_setmethods__["chord"] = _CsoundAC.Turtle_chord_set
    __swig_getmethods__["chord"] = _CsoundAC.Turtle_chord_get
    if _newclass:chord = _swig_property(_CsoundAC.Turtle_chord_get, _CsoundAC.Turtle_chord_set)
    __swig_setmethods__["rangeBass"] = _CsoundAC.Turtle_rangeBass_set
    __swig_getmethods__["rangeBass"] = _CsoundAC.Turtle_rangeBass_get
    if _newclass:rangeBass = _swig_property(_CsoundAC.Turtle_rangeBass_get, _CsoundAC.Turtle_rangeBass_set)
    __swig_setmethods__["rangeSize"] = _CsoundAC.Turtle_rangeSize_set
    __swig_getmethods__["rangeSize"] = _CsoundAC.Turtle_rangeSize_get
    if _newclass:rangeSize = _swig_property(_CsoundAC.Turtle_rangeSize_get, _CsoundAC.Turtle_rangeSize_set)
    __swig_setmethods__["voicing"] = _CsoundAC.Turtle_voicing_set
    __swig_getmethods__["voicing"] = _CsoundAC.Turtle_voicing_get
    if _newclass:voicing = _swig_property(_CsoundAC.Turtle_voicing_get, _CsoundAC.Turtle_voicing_set)
    __swig_setmethods__["modality"] = _CsoundAC.Turtle_modality_set
    __swig_getmethods__["modality"] = _CsoundAC.Turtle_modality_get
    if _newclass:modality = _swig_property(_CsoundAC.Turtle_modality_get, _CsoundAC.Turtle_modality_set)
    def __init__(self, *args): 
        """
        __init__(csound::Turtle self) -> Turtle
        __init__(csound::Turtle self, Turtle other) -> Turtle
        """
        this = _CsoundAC.new_Turtle(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialize(self):
        """initialize(Turtle self)"""
        return _CsoundAC.Turtle_initialize(self)

    def __lt__(self, *args):
        """__lt__(Turtle self, Turtle other) -> bool"""
        return _CsoundAC.Turtle___lt__(self, *args)

    def __str__(self):
        """__str__(Turtle self) -> std::string"""
        return _CsoundAC.Turtle___str__(self)

    __swig_destroy__ = _CsoundAC.delete_Turtle
    __del__ = lambda self : None;
Turtle_swigregister = _CsoundAC.Turtle_swigregister
Turtle_swigregister(Turtle)

class Command(_object):
    """Proxy of C++ csound::Command class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operation"] = _CsoundAC.Command_operation_set
    __swig_getmethods__["operation"] = _CsoundAC.Command_operation_get
    if _newclass:operation = _swig_property(_CsoundAC.Command_operation_get, _CsoundAC.Command_operation_set)
    __swig_setmethods__["target"] = _CsoundAC.Command_target_set
    __swig_getmethods__["target"] = _CsoundAC.Command_target_get
    if _newclass:target = _swig_property(_CsoundAC.Command_target_get, _CsoundAC.Command_target_set)
    __swig_setmethods__["equivalence"] = _CsoundAC.Command_equivalence_set
    __swig_getmethods__["equivalence"] = _CsoundAC.Command_equivalence_get
    if _newclass:equivalence = _swig_property(_CsoundAC.Command_equivalence_get, _CsoundAC.Command_equivalence_set)
    __swig_setmethods__["dimension"] = _CsoundAC.Command_dimension_set
    __swig_getmethods__["dimension"] = _CsoundAC.Command_dimension_get
    if _newclass:dimension = _swig_property(_CsoundAC.Command_dimension_get, _CsoundAC.Command_dimension_set)
    __swig_setmethods__["x"] = _CsoundAC.Command_x_set
    __swig_getmethods__["x"] = _CsoundAC.Command_x_get
    if _newclass:x = _swig_property(_CsoundAC.Command_x_get, _CsoundAC.Command_x_set)
    __swig_setmethods__["v"] = _CsoundAC.Command_v_set
    __swig_getmethods__["v"] = _CsoundAC.Command_v_get
    if _newclass:v = _swig_property(_CsoundAC.Command_v_get, _CsoundAC.Command_v_set)
    def __init__(self): 
        """__init__(csound::Command self) -> Command"""
        this = _CsoundAC.new_Command()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_Command
    __del__ = lambda self : None;
Command_swigregister = _CsoundAC.Command_swigregister
Command_swigregister(Command)

class ChordLindenmayer(VoiceleadingNode):
    """Proxy of C++ csound::ChordLindenmayer class"""
    __swig_setmethods__ = {}
    for _s in [VoiceleadingNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChordLindenmayer, name, value)
    __swig_getmethods__ = {}
    for _s in [VoiceleadingNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChordLindenmayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(csound::ChordLindenmayer self) -> ChordLindenmayer"""
        this = _CsoundAC.new_ChordLindenmayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CsoundAC.delete_ChordLindenmayer
    __del__ = lambda self : None;
    def getIterationCount(self):
        """getIterationCount(ChordLindenmayer self) -> int"""
        return _CsoundAC.ChordLindenmayer_getIterationCount(self)

    def setIterationCount(self, *args):
        """setIterationCount(ChordLindenmayer self, int count)"""
        return _CsoundAC.ChordLindenmayer_setIterationCount(self, *args)

    def getAngle(self):
        """getAngle(ChordLindenmayer self) -> double"""
        return _CsoundAC.ChordLindenmayer_getAngle(self)

    def setAngle(self, *args):
        """setAngle(ChordLindenmayer self, double angle)"""
        return _CsoundAC.ChordLindenmayer_setAngle(self, *args)

    def getAxiom(self):
        """getAxiom(ChordLindenmayer self) -> std::string"""
        return _CsoundAC.ChordLindenmayer_getAxiom(self)

    def setAxiom(self, *args):
        """setAxiom(ChordLindenmayer self, std::string axiom)"""
        return _CsoundAC.ChordLindenmayer_setAxiom(self, *args)

    def addRule(self, *args):
        """addRule(ChordLindenmayer self, std::string command, std::string replacement)"""
        return _CsoundAC.ChordLindenmayer_addRule(self, *args)

    def getReplacement(self, *args):
        """getReplacement(ChordLindenmayer self, std::string command) -> std::string"""
        return _CsoundAC.ChordLindenmayer_getReplacement(self, *args)

    def generate(self):
        """generate(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_generate(self)

    def clear(self):
        """clear(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_clear(self)

    __swig_setmethods__["score"] = _CsoundAC.ChordLindenmayer_score_set
    __swig_getmethods__["score"] = _CsoundAC.ChordLindenmayer_score_get
    if _newclass:score = _swig_property(_CsoundAC.ChordLindenmayer_score_get, _CsoundAC.ChordLindenmayer_score_set)
    __swig_setmethods__["iterationCount"] = _CsoundAC.ChordLindenmayer_iterationCount_set
    __swig_getmethods__["iterationCount"] = _CsoundAC.ChordLindenmayer_iterationCount_get
    if _newclass:iterationCount = _swig_property(_CsoundAC.ChordLindenmayer_iterationCount_get, _CsoundAC.ChordLindenmayer_iterationCount_set)
    __swig_setmethods__["angle"] = _CsoundAC.ChordLindenmayer_angle_set
    __swig_getmethods__["angle"] = _CsoundAC.ChordLindenmayer_angle_get
    if _newclass:angle = _swig_property(_CsoundAC.ChordLindenmayer_angle_get, _CsoundAC.ChordLindenmayer_angle_set)
    __swig_setmethods__["axiom"] = _CsoundAC.ChordLindenmayer_axiom_set
    __swig_getmethods__["axiom"] = _CsoundAC.ChordLindenmayer_axiom_get
    if _newclass:axiom = _swig_property(_CsoundAC.ChordLindenmayer_axiom_get, _CsoundAC.ChordLindenmayer_axiom_set)
    __swig_setmethods__["production"] = _CsoundAC.ChordLindenmayer_production_set
    __swig_getmethods__["production"] = _CsoundAC.ChordLindenmayer_production_get
    if _newclass:production = _swig_property(_CsoundAC.ChordLindenmayer_production_get, _CsoundAC.ChordLindenmayer_production_set)
    __swig_setmethods__["turtle"] = _CsoundAC.ChordLindenmayer_turtle_set
    __swig_getmethods__["turtle"] = _CsoundAC.ChordLindenmayer_turtle_get
    if _newclass:turtle = _swig_property(_CsoundAC.ChordLindenmayer_turtle_get, _CsoundAC.ChordLindenmayer_turtle_set)
    __swig_setmethods__["rules"] = _CsoundAC.ChordLindenmayer_rules_set
    __swig_getmethods__["rules"] = _CsoundAC.ChordLindenmayer_rules_get
    if _newclass:rules = _swig_property(_CsoundAC.ChordLindenmayer_rules_get, _CsoundAC.ChordLindenmayer_rules_set)
    __swig_setmethods__["turtleStack"] = _CsoundAC.ChordLindenmayer_turtleStack_set
    __swig_getmethods__["turtleStack"] = _CsoundAC.ChordLindenmayer_turtleStack_get
    if _newclass:turtleStack = _swig_property(_CsoundAC.ChordLindenmayer_turtleStack_get, _CsoundAC.ChordLindenmayer_turtleStack_set)
    __swig_setmethods__["beganAt"] = _CsoundAC.ChordLindenmayer_beganAt_set
    __swig_getmethods__["beganAt"] = _CsoundAC.ChordLindenmayer_beganAt_get
    if _newclass:beganAt = _swig_property(_CsoundAC.ChordLindenmayer_beganAt_get, _CsoundAC.ChordLindenmayer_beganAt_set)
    __swig_setmethods__["endedAt"] = _CsoundAC.ChordLindenmayer_endedAt_set
    __swig_getmethods__["endedAt"] = _CsoundAC.ChordLindenmayer_endedAt_get
    if _newclass:endedAt = _swig_property(_CsoundAC.ChordLindenmayer_endedAt_get, _CsoundAC.ChordLindenmayer_endedAt_set)
    __swig_setmethods__["elapsed"] = _CsoundAC.ChordLindenmayer_elapsed_set
    __swig_getmethods__["elapsed"] = _CsoundAC.ChordLindenmayer_elapsed_get
    if _newclass:elapsed = _swig_property(_CsoundAC.ChordLindenmayer_elapsed_get, _CsoundAC.ChordLindenmayer_elapsed_set)
    def initialize(self):
        """initialize(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_initialize(self)

    def generateLindenmayerSystem(self):
        """generateLindenmayerSystem(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_generateLindenmayerSystem(self)

    def writeScore(self):
        """writeScore(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_writeScore(self)

    def fixStatus(self):
        """fixStatus(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_fixStatus(self)

    def tieOverlappingNotes(self):
        """tieOverlappingNotes(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_tieOverlappingNotes(self)

    def applyVoiceleadingOperations(self):
        """applyVoiceleadingOperations(ChordLindenmayer self)"""
        return _CsoundAC.ChordLindenmayer_applyVoiceleadingOperations(self)

    def interpret(self, *args):
        """interpret(ChordLindenmayer self, std::string command)"""
        return _CsoundAC.ChordLindenmayer_interpret(self, *args)

    def getDimension(self, *args):
        """getDimension(ChordLindenmayer self, char dimension) -> int"""
        return _CsoundAC.ChordLindenmayer_getDimension(self, *args)

    def parseCommand(self, *args):
        """
        parseCommand(ChordLindenmayer self, std::string const & command, std::string & operation, char & target, char & equivalenceClass, 
            size_t & dimension, size_t & dimension1, double & scalar, DoubleVector vector) -> char
        """
        return _CsoundAC.ChordLindenmayer_parseCommand(self, *args)

    def createRotation(self, *args):
        """createRotation(ChordLindenmayer self, int dimension1, int dimension2, double angle) -> Eigen::MatrixXd"""
        return _CsoundAC.ChordLindenmayer_createRotation(self, *args)

    def equivalence(self, *args):
        """equivalence(ChordLindenmayer self, double & value, char equivalenceClass) -> double"""
        return _CsoundAC.ChordLindenmayer_equivalence(self, *args)

    def produceOrTransform(self, *args):
        """produceOrTransform(ChordLindenmayer self, Score score, size_t beginAt, size_t endAt, Eigen::MatrixXd const & compositeCordinates)"""
        return _CsoundAC.ChordLindenmayer_produceOrTransform(self, *args)

ChordLindenmayer_swigregister = _CsoundAC.ChordLindenmayer_swigregister
ChordLindenmayer_swigregister(ChordLindenmayer)

# Create one global instance of CppSound for CsoundAC to grab.
# Create it in the main module, so that scripts for CsoundAC
# will also work in a standalone Python interpreter.
import sys
import csnd
sys.modules["__main__"].csound = csnd.CppSound()
sys.modules["__main__"].csound.thisown = 0
sys.modules["__main__"].csound.setPythonMessageCallback()

# This file is compatible with both classic and new-style classes.


